{"ast":null,"code":"var _jsxFileName = \"/Users/harshmishra/Desktop/dashboard/frontend/src/Components/Selector.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useCallback } from 'react';\n// import { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\n// const Selector = ({ options, selectedCurrencies, setSelectedCurrencies }) => {\n//   const [dropdownOpen, setDropdownOpen] = useState(false);\n//   const [shiftSelected, setShiftSelected] = useState([]);\n//   const toggle = () => setDropdownOpen(prevState => !prevState);\n\n//   const handleCheckboxChange = useCallback((e, currency) => {\n//     let updatedSelected = [...selectedCurrencies];\n//     if (e.nativeEvent.shiftKey && shiftSelected.length > 0) {\n//       const lastSelected = shiftSelected[shiftSelected.length - 1];\n//       const start = options.findIndex(opt => opt.value === lastSelected);\n//       const end = options.findIndex(opt => opt.value === currency);\n//       const range = options.slice(Math.min(start, end), Math.max(start, end) + 1).map(opt => opt.value);\n//       if (e.target.checked) {\n//         updatedSelected = [...new Set([...updatedSelected, ...range])];\n//       } else {\n//         updatedSelected = updatedSelected.filter(sel => !range.includes(sel));\n//       }\n//       setShiftSelected(range);\n//     } else {\n//       if (e.target.checked) {\n//         updatedSelected.push(currency);\n//       } else {\n//         updatedSelected = updatedSelected.filter(sel => sel !== currency);\n//       }\n//       setShiftSelected([currency]);\n//     }\n//     setSelectedCurrencies(updatedSelected);\n//   }, [selectedCurrencies, shiftSelected, setSelectedCurrencies, options]);\n\n//   return (\n//     <Dropdown isOpen={dropdownOpen} toggle={toggle}>\n//       <DropdownToggle caret>\n//         Select Currencies\n//       </DropdownToggle>\n//       <DropdownMenu>\n//         {options.map(option => (\n//           <DropdownItem key={option.value} toggle={false}>\n//             <input\n//               type=\"checkbox\"\n//               checked={selectedCurrencies.includes(option.value)}\n//               onChange={(e) => handleCheckboxChange(e, option.value)}\n//             /> {option.label}\n//           </DropdownItem>\n//         ))}\n//       </DropdownMenu>\n//     </Dropdown>\n//   );\n// };\n\n// export default Selector;\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./Selector.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Selector = ({\n  options,\n  selectedCurrencies,\n  setSelectedCurrencies\n}) => {\n  _s();\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const handleSelectCurrency = (event, currency) => {\n    const isSelected = selectedCurrencies.some(c => c.value === currency.value);\n    let newSelectedCurrencies;\n    if (isSelected) {\n      newSelectedCurrencies = selectedCurrencies.filter(c => c.value !== currency.value);\n    } else {\n      newSelectedCurrencies = [...selectedCurrencies, currency];\n    }\n    setSelectedCurrencies(newSelectedCurrencies);\n  };\n  const handleDropdownToggle = () => {\n    setDropdownOpen(!dropdownOpen);\n  };\n  const truncateSelectedCurrencies = () => {\n    const maxDisplay = 5;\n    if (selectedCurrencies.length > maxDisplay) {\n      const displayed = selectedCurrencies.slice(0, maxDisplay).map(c => c.label).join(\", \");\n      return `${displayed}, +${selectedCurrencies.length - maxDisplay} more`;\n    }\n    return selectedCurrencies.map(c => c.label).join(\", \");\n  };\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (dropdownOpen && !event.target.closest(\".currency-selector-container\")) {\n        setDropdownOpen(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [dropdownOpen]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"currency-selector-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"dropdown-button\",\n      onClick: handleDropdownToggle,\n      children: truncateSelectedCurrencies() || \"Select Currencies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), dropdownOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"currency-list\",\n        children: options.map(currency => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"currency-item\",\n          onClick: e => handleSelectCurrency(e, currency),\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedCurrencies.some(c => c.value === currency.value),\n            onChange: e => handleSelectCurrency(e, currency)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this), currency.label]\n        }, currency.value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(Selector, \"htwsPlR08nVbejouNDN7rkObmHY=\");\n_c = Selector;\nexport default Selector;\nvar _c;\n$RefreshReg$(_c, \"Selector\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Selector","options","selectedCurrencies","setSelectedCurrencies","_s","dropdownOpen","setDropdownOpen","handleSelectCurrency","event","currency","isSelected","some","c","value","newSelectedCurrencies","filter","handleDropdownToggle","truncateSelectedCurrencies","maxDisplay","length","displayed","slice","map","label","join","handleClickOutside","target","closest","document","addEventListener","removeEventListener","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","e","type","checked","onChange","_c","$RefreshReg$"],"sources":["/Users/harshmishra/Desktop/dashboard/frontend/src/Components/Selector.jsx"],"sourcesContent":["// import React, { useState, useCallback } from 'react';\n// import { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\n// const Selector = ({ options, selectedCurrencies, setSelectedCurrencies }) => {\n//   const [dropdownOpen, setDropdownOpen] = useState(false);\n//   const [shiftSelected, setShiftSelected] = useState([]);\n//   const toggle = () => setDropdownOpen(prevState => !prevState);\n\n//   const handleCheckboxChange = useCallback((e, currency) => {\n//     let updatedSelected = [...selectedCurrencies];\n//     if (e.nativeEvent.shiftKey && shiftSelected.length > 0) {\n//       const lastSelected = shiftSelected[shiftSelected.length - 1];\n//       const start = options.findIndex(opt => opt.value === lastSelected);\n//       const end = options.findIndex(opt => opt.value === currency);\n//       const range = options.slice(Math.min(start, end), Math.max(start, end) + 1).map(opt => opt.value);\n//       if (e.target.checked) {\n//         updatedSelected = [...new Set([...updatedSelected, ...range])];\n//       } else {\n//         updatedSelected = updatedSelected.filter(sel => !range.includes(sel));\n//       }\n//       setShiftSelected(range);\n//     } else {\n//       if (e.target.checked) {\n//         updatedSelected.push(currency);\n//       } else {\n//         updatedSelected = updatedSelected.filter(sel => sel !== currency);\n//       }\n//       setShiftSelected([currency]);\n//     }\n//     setSelectedCurrencies(updatedSelected);\n//   }, [selectedCurrencies, shiftSelected, setSelectedCurrencies, options]);\n\n//   return (\n//     <Dropdown isOpen={dropdownOpen} toggle={toggle}>\n//       <DropdownToggle caret>\n//         Select Currencies\n//       </DropdownToggle>\n//       <DropdownMenu>\n//         {options.map(option => (\n//           <DropdownItem key={option.value} toggle={false}>\n//             <input\n//               type=\"checkbox\"\n//               checked={selectedCurrencies.includes(option.value)}\n//               onChange={(e) => handleCheckboxChange(e, option.value)}\n//             /> {option.label}\n//           </DropdownItem>\n//         ))}\n//       </DropdownMenu>\n//     </Dropdown>\n//   );\n// };\n\n// export default Selector;\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./Selector.css\";\n\nconst Selector = ({ options, selectedCurrencies, setSelectedCurrencies }) => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  const handleSelectCurrency = (event, currency) => {\n    const isSelected = selectedCurrencies.some(c => c.value === currency.value);\n    let newSelectedCurrencies;\n    if (isSelected) {\n      newSelectedCurrencies = selectedCurrencies.filter(c => c.value !== currency.value);\n    } else {\n      newSelectedCurrencies = [...selectedCurrencies, currency];\n    }\n    setSelectedCurrencies(newSelectedCurrencies);\n  };\n\n  const handleDropdownToggle = () => {\n    setDropdownOpen(!dropdownOpen);\n  };\n\n  const truncateSelectedCurrencies = () => {\n    const maxDisplay = 5;\n    if (selectedCurrencies.length > maxDisplay) {\n      const displayed = selectedCurrencies.slice(0, maxDisplay).map(c => c.label).join(\", \");\n      return `${displayed}, +${selectedCurrencies.length - maxDisplay} more`;\n    }\n    return selectedCurrencies.map(c => c.label).join(\", \");\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (dropdownOpen && !event.target.closest(\".currency-selector-container\")) {\n        setDropdownOpen(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [dropdownOpen]);\n\n  return (\n    <div className=\"currency-selector-container\">\n      <button className=\"dropdown-button\" onClick={handleDropdownToggle}>\n        {truncateSelectedCurrencies() || \"Select Currencies\"}\n      </button>\n      {dropdownOpen && (\n        <div className=\"dropdown-content\">\n          <div className=\"currency-list\">\n            {options.map((currency) => (\n              <div\n                key={currency.value}\n                className=\"currency-item\"\n                onClick={(e) => handleSelectCurrency(e, currency)}\n              >\n                <input\n                  type=\"checkbox\"\n                  checked={selectedCurrencies.some(c => c.value === currency.value)}\n                  onChange={(e) => handleSelectCurrency(e, currency)}\n                />\n                {currency.label}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Selector;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}