{"ast":null,"code":"var _jsxFileName = \"/Users/harshmishra/Desktop/dashboard/frontend/src/Components/Graph.jsx\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect, useRef } from \"react\";\n// // import Highcharts from \"highcharts\";\n// // import HighchartsReact from \"highcharts-react-official\";\n// // import HighchartsBoost from \"highcharts/modules/boost\";\n// // import HighchartsExporting from \"highcharts/modules/exporting\";\n// // import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// // import HighchartsMore from \"highcharts/highcharts-more\";\n// // import DataTable from \"react-data-table-component\";\n// // import DatePicker from \"react-datepicker\";\n// // import \"react-datepicker/dist/react-datepicker.css\";\n// // import Topbar from \"./Topbar\";\n// // import Selector from \"./Selector\";\n// // import \"../Styles/Graph.css\";\n\n// // HighchartsBoost(Highcharts);\n// // HighchartsExporting(Highcharts);\n// // HighchartsAnnotations(Highcharts);\n// // HighchartsMore(Highcharts);\n\n// // const Graph = () => {\n// //   const [compareWithTarget, setCompareWithTarget] = useState(false);\n// //   const [selectedCurrencies, setSelectedCurrencies] = useState([\n// //     { value: \"AUD\", label: \"AUD\" },\n// //     { value: \"EUR\", label: \"EUR\" },\n// //     { value: \"GBP\", label: \"GBP\" },\n// //     { value: \"JPY\", label: \"JPY\" },\n// //     { value: \"USD\", label: \"USD\" }\n// //   ]);\n// //   const [summary, setSummary] = useState(\"\");\n// //   const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n// //   const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n// //   const [data, setData] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [isDarkMode, setIsDarkMode] = useState(true);\n// //   const latestSummaryRef = useRef(\"\");\n// //   const chartRef = useRef(null);\n\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       try {\n// //         const response = await fetch(\"http://localhost:5000/xva\");\n// //         const result = await response.json();\n// //         setData(result);\n// //         setLoading(false);\n// //       } catch (error) {\n// //         console.error(\"Error fetching data:\", error);\n// //         setLoading(false);\n// //       }\n// //     };\n// //     fetchData();\n// //   }, []);\n\n// //   const getFilteredData = () => {\n// //     return data.filter((d) => {\n// //       const date = new Date(d.Date).getTime();\n// //       return date >= startDate.getTime() && date <= endDate.getTime();\n// //     });\n// //   };\n\n// //   useEffect(() => {\n// //     if (!loading && data.length > 0) {\n// //       const updateSummary = () => {\n// //         if (summary !== latestSummaryRef.current) {\n// //           setSummary(latestSummaryRef.current);\n// //         }\n// //       };\n// //       const interval = setInterval(updateSummary, 1000);\n// //       return () => clearInterval(interval);\n// //     }\n// //   }, [loading, data, summary]);\n\n// //   const filteredData = getFilteredData();\n\n// //   const totalLine = {\n// //     name: \"Total\",\n// //     data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n// //     color: isDarkMode ? \"#007bff\" : \"#343a40\",\n// //     marker: { enabled: false },\n// //     zIndex: 1,\n// //     boostThreshold: 1,\n// //   };\n\n// //   const shadeData = {\n// //     name: \"Shaded Area\",\n// //     data: filteredData.map((d) => ({\n// //       x: new Date(d.Date).getTime(),\n// //       low: Math.min(d.Total, d.Target),\n// //       high: Math.max(d.Total, d.Target),\n// //     })),\n// //     type: \"arearange\",\n// //     lineWidth: 0,\n// //     linkedTo: \"Total\",\n// //     color: \"#2E8C39\",\n// //     fillOpacity: 0.3,\n// //     zIndex: 0,\n// //     marker: { enabled: false },\n// //     boostThreshold: 0,\n// //     boost: false,\n// //   };\n\n// //   const getData = () => {\n// //     const compareData = [\n// //       ...selectedCurrencies.map((currency) => ({\n// //         name: currency.value,\n// //         data: filteredData.map((d) => [\n// //           new Date(d.Date).getTime(),\n// //           d[currency.value],\n// //         ]),\n// //         color: getCurrencyColor(currency.value),\n// //         marker: { enabled: false },\n// //         boostThreshold: 1,\n// //       })),\n// //       totalLine,\n// //       {\n// //         name: \"Target\",\n// //         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n// //         color: \"#007bff\",\n// //         marker: { enabled: false },\n// //         zIndex: 1,\n// //         boostThreshold: 1,\n// //       },\n// //       shadeData,\n// //     ];\n// //     return compareWithTarget ? compareData : compareData.slice(0, -1);\n// //   };\n\n// //   const getCurrencyColor = (currency) => {\n// //     switch (currency) {\n// //       case \"AUD\":\n// //         return \"#FFD700\";\n// //       case \"EUR\":\n// //         return \"#FF6347\";\n// //       case \"GBP\":\n// //         return \"#4682B4\";\n// //       case \"JPY\":\n// //         return \"#32CD32\";\n// //       case \"USD\":\n// //         return \"#FFA07A\";\n// //       case \"BRL\":\n// //         return \"#9400D3\";\n// //       case \"CAD\":\n// //         return \"#00FF00\";\n// //       case \"CHF\":\n// //         return \"#FF00FF\";\n// //       case \"CLP\":\n// //         return \"#00FFFF\";\n// //       case \"CNY\":\n// //         return \"#FF4500\";\n// //       case \"CZK\":\n// //         return \"#FF1493\";\n// //       case \"DKK\":\n// //         return \"#1E90FF\";\n// //       case \"HKD\":\n// //         return \"#FF69B4\";\n// //       case \"HUF\":\n// //         return \"#8A2BE2\";\n// //       case \"INR\":\n// //         return \"#00BFFF\";\n// //       case \"KRW\":\n// //         return \"#7B68EE\";\n// //       case \"NOK\":\n// //         return \"#FFD700\";\n// //       case \"NZD\":\n// //         return \"#FF6347\";\n// //       case \"PLN\":\n// //         return \"#4682B4\";\n// //       case \"SEK\":\n// //         return \"#32CD32\";\n// //       case \"SGD\":\n// //         return \"#FFA07A\";\n// //       case \"THB\":\n// //         return \"#9400D3\";\n// //       case \"TWD\":\n// //         return \"#00FF00\";\n// //       case \"ZAR\":\n// //         return \"#FF00FF\";\n// //       default:\n// //         return \"#FF4500\";\n// //     }\n// //   };\n\n// //   const toggleTheme = () => {\n// //     setIsDarkMode(!isDarkMode);\n// //   };\n\n// //   return (\n// //     <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n// //       <Topbar isDarkMode={isDarkMode} toggleTheme={toggleTheme} />\n// //       <div className=\"graph-container\">\n// //         <h2 className=\"graph-title\">LCH Notional | Time Series</h2>\n// //         <div className=\"selectors-container\">\n// //           <div className=\"currency-selector\">\n// //             <label>Select Currencies:</label>\n// //             <Selector\n// //               options={[\n// //                 { value: \"AUD\", label: \"AUD\" },\n// //                 { value: \"EUR\", label: \"EUR\" },\n// //                 { value: \"GBP\", label: \"GBP\" },\n// //                 { value: \"JPY\", label: \"JPY\" },\n// //                 { value: \"USD\", label: \"USD\" },\n// //                 { value: \"BRL\", label: \"BRL\" },\n// //                 { value: \"CAD\", label: \"CAD\" },\n// //                 { value: \"CHF\", label: \"CHF\" },\n// //                 { value: \"CLP\", label: \"CLP\" },\n// //                 { value: \"CNY\", label: \"CNY\" },\n// //                 { value: \"CZK\", label: \"CZK\" },\n// //                 { value: \"DKK\", label: \"DKK\" },\n// //                 { value: \"HKD\", label: \"HKD\" },\n// //                 { value: \"HUF\", label: \"HUF\" },\n// //                 { value: \"INR\", label: \"INR\" },\n// //                 { value: \"KRW\", label: \"KRW\" },\n// //                 { value: \"MXN\", label: \"MXN\" },\n// //                 { value: \"NOK\", label: \"NOK\" },\n// //                 { value: \"NZD\", label: \"NZD\" },\n// //                 { value: \"PLN\", label: \"PLN\" },\n// //                 { value: \"SEK\", label: \"SEK\" },\n// //                 { value: \"SGD\", label: \"SGD\" },\n// //                 { value: \"THB\", label: \"THB\" },\n// //                 { value: \"TWD\", label: \"TWD\" },\n// //                 { value: \"ZAR\", label: \"ZAR\" },\n// //               ]}\n// //               selectedCurrencies={selectedCurrencies}\n// //               setSelectedCurrencies={setSelectedCurrencies}\n// //             />\n// //           </div>\n// //           <div className=\"date-picker\">\n// //             <label>Select Date Range:</label>\n// //             <DatePicker\n// //               selected={startDate}\n// //               onChange={(date) => setStartDate(date)}\n// //               selectsStart\n// //               startDate={startDate}\n// //               endDate={endDate}\n// //               className=\"date-input\"\n// //             />\n// //             <DatePicker\n// //               selected={endDate}\n// //               onChange={(date) => setEndDate(date)}\n// //               selectsEnd\n// //               startDate={startDate}\n// //               endDate={endDate}\n// //               minDate={startDate}\n// //               className=\"date-input\"\n// //             />\n// //           </div>\n// //         </div>\n// //         <div className=\"main-panel\">\n// //           <HighchartsReact\n// //             className=\"chart-actual\"\n// //             highcharts={Highcharts}\n// //             options={{\n// //               chart: {\n// //                 type: \"line\",\n// //                 zoomType: \"x\",\n// //                 backgroundColor: {\n// //                   linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n// //                   stops: isDarkMode\n// //                     ? [\n// //                         [0, \"#2e2e2e\"],\n// //                         [1, \"#1a1a1a\"],\n// //                       ]\n// //                     : [\n// //                         [0, \"#ffffff\"],\n// //                         [1, \"#f0f0f0\"],\n// //                       ],\n// //                 },\n// //                 borderRadius: 10, // Rounded corners\n// //                 style: {\n// //                   fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n// //                 },\n// //                 plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //                 plotBorderWidth: 1,\n// //                 events: {\n// //                   load: function () {\n// //                     this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n// //                   },\n// //                 },\n// //                 boost: {\n// //                   useGPUTranslations: true,\n// //                   usePreAllocated: true,\n// //                 },\n// //               },\n// //               title: {\n// //                 text: \"\",\n// //                 style: {\n// //                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //                   fontSize: \"22px\",\n// //                   fontWeight: \"bold\",\n// //                 },\n// //               },\n// //               xAxis: {\n// //                 type: \"datetime\",\n// //                 title: {\n// //                   text: \"Date\",\n// //                   style: {\n// //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                     fontSize: \"14px\",\n// //                     fontWeight: \"bold\",\n// //                   },\n// //                 },\n// //                 lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //                 tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //                 labels: {\n// //                   style: {\n// //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                     fontSize: \"12px\",\n// //                   },\n// //                 },\n// //               },\n// //               yAxis: {\n// //                 title: {\n// //                   text: \"Notional (USD)\",\n// //                   style: {\n// //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                     fontSize: \"14px\",\n// //                     fontWeight: \"bold\",\n// //                   },\n// //                 },\n// //                 gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //                 labels: {\n// //                   style: {\n// //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                     fontSize: \"12px\",\n// //                   },\n// //                 },\n// //               },\n// //               legend: {\n// //                 layout: \"horizontal\",\n// //                 align: \"center\",\n// //                 verticalAlign: \"bottom\",\n// //                 itemStyle: {\n// //                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //                   fontSize: \"14px\",\n// //                   fontWeight: \"bold\",\n// //                 },\n// //                 itemHoverStyle: {\n// //                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                 },\n// //                 itemHiddenStyle: {\n// //                   color: isDarkMode ? \"#666666\" : \"#999999\",\n// //                 },\n// //               },\n// //               tooltip: {\n// //                 shared: true,\n// //                 backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n// //                 borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n// //                 style: {\n// //                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //                 },\n// //                 formatter: function () {\n// //                   const points = this.points;\n// //                   let targetValue = null;\n// //                   let totalValue = null;\n\n// //                   points.forEach((point) => {\n// //                     if (point.series.name === \"Target\") {\n// //                       targetValue = point.y;\n// //                     }\n// //                     if (point.series.name === \"Total\") {\n// //                       totalValue = point.y;\n// //                     }\n// //                   });\n\n// //                   if (targetValue !== null && totalValue !== null) {\n// //                     const difference = (totalValue - targetValue).toFixed(2);\n// //                     const totalBreakdown = selectedCurrencies\n// //                       .map((currency) => {\n// //                         const point = points.find((p) => p.series.name === currency.value);\n// //                         return point\n// //                           ? `${currency.value}: ${point.y.toFixed(2)}`\n// //                           : `${currency.value}: N/A`;\n// //                       })\n// //                       .join(\"<br>\");\n\n// //                     let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n// //                     summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n// //                     summaryHTML += `Difference: ${difference}<br><br>`;\n// //                     summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n// //                     latestSummaryRef.current = summaryHTML;\n\n// //                     return points.reduce((s, point) => {\n// //                       return (\n// //                         s +\n// //                         `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// //                       );\n// //                     }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// //                   }\n// //                   return points.reduce((s, point) => {\n// //                     return (\n// //                       s +\n// //                       `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// //                     );\n// //                   }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// //                 },\n// //               },\n// //               series: getData(),\n// //               navigation: {\n// //                 buttonOptions: {\n// //                   enabled: true,\n// //                   theme: {\n// //                     fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// //                     stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n// //                     style: {\n// //                       color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //                     },\n// //                   },\n// //                 },\n// //               },\n// //               exporting: {\n// //                 buttons: {\n// //                   contextButton: {\n// //                     symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                     theme: {\n// //                       fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// //                     },\n// //                   },\n// //                 },\n// //               },\n// //             }}\n// //             containerProps={{ className: \"chart-container\" }}\n// //             updateArgs={[true, true, true]}\n// //             ref={chartRef}\n// //           />\n// //           {compareWithTarget && (\n// //             <div className=\"summary-box\">\n// //               <h3>Summary</h3>\n// //               <div dangerouslySetInnerHTML={{ __html: summary }} />\n// //             </div>\n// //           )}\n// //           <div className=\"bottom-right-buttons\">\n// //             <button\n// //               onClick={() => setCompareWithTarget(!compareWithTarget)}\n// //               className=\"toggle-button\"\n// //             >\n// //               {compareWithTarget ? \"Disable Compare with Target\" : \"Enable Compare with Target\"}\n// //             </button>\n// //             <div className=\"download-section\">\n// //               <button className=\"toggle-button\">Download</button>\n// //               <div className=\"dropdown-content\">\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"image/png\" })\n// //                   }\n// //                 >\n// //                   PNG\n// //                 </button>\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"image/jpeg\" })\n// //                   }\n// //                 >\n// //                   JPEG\n// //                 </button>\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"application/pdf\" })\n// //                   }\n// //                 >\n// //                   PDF\n// //                 </button>\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"image/svg+xml\" })\n// //                   }\n// //                 >\n// //                   SVG\n// //                 </button>\n// //               </div>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       </div>\n// //       <div className=\"data-table-section\">\n// //         <DataTable\n// //           title=\"LCH Notional | Summary Table\"\n// //           columns={[\n// //             { name: \"Date\", selector: (row) => row.Date, sortable: true },\n// //             { name: \"Target\", selector: (row) => row.Target, sortable: true },\n// //             ...selectedCurrencies.map((currency) => ({\n// //               name: currency.label,\n// //               selector: (row) => row[currency.value],\n// //               sortable: true,\n// //             })),\n// //             { name: \"Total\", selector: (row) => row.Total, sortable: true },\n// //           ]}\n// //           data={filteredData.map((d) => {\n// //             const rowData = {\n// //               Date: d.Date,\n// //               Target: d.Target,\n// //               Total: d.Total,\n// //             };\n// //             selectedCurrencies.forEach((currency) => {\n// //               rowData[currency.value] = d[currency.value];\n// //             });\n// //             return rowData;\n// //           })}\n// //           pagination\n// //           highlightOnHover\n// //           pointerOnHover\n// //           customStyles={{\n// //             header: {\n// //               style: {\n// //                 fontSize: '22px',\n// //                 fontWeight: 'bold',\n// //                 color: 'var(--text-color)',\n// //                 backgroundColor: 'var(--control-bg-color)',\n// //               },\n// //             },\n// //             rows: {\n// //               style: {\n// //                 fontSize: '16px',\n// //                 color: 'var(--text-color)',\n// //                 backgroundColor: 'var(--input-bg-color)',\n// //                 '&:not(:last-of-type)': {\n// //                   borderBottomStyle: 'solid',\n// //                   borderBottomWidth: '1px',\n// //                   borderBottomColor: 'var(--control-bg-color)',\n// //                 },\n// //               },\n// //             },\n// //             headCells: {\n// //               style: {\n// //                 fontSize: '18px',\n// //                 fontWeight: 'bold',\n// //                 color: 'var(--text-color)',\n// //                 backgroundColor: 'var(--control-bg-color)',\n// //               },\n// //             },\n// //             cells: {\n// //               style: {\n// //                 fontSize: '16px',\n// //                 color: 'var(--text-color)',\n// //                 backgroundColor: 'var(--input-bg-color)',\n// //               },\n// //             },\n// //           }}\n// //         />\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default Graph;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import Highcharts from \"highcharts\";\n// import HighchartsReact from \"highcharts-react-official\";\n// import HighchartsBoost from \"highcharts/modules/boost\";\n// import HighchartsExporting from \"highcharts/modules/exporting\";\n// import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// import HighchartsMore from \"highcharts/highcharts-more\";\n// import DataTable from \"react-data-table-component\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import Topbar from \"./Topbar\";\n// import Selector from \"./Selector\";\n// import \"../Styles/Graph.css\";\n// import Sidebar from \"./Sidebar\";\n\n// HighchartsBoost(Highcharts);\n// HighchartsExporting(Highcharts);\n// HighchartsAnnotations(Highcharts);\n// HighchartsMore(Highcharts);\n\n// const Graph = () => {\n//   const [compareWithTarget, setCompareWithTarget] = useState(false);\n//   const [selectedCurrencies, setSelectedCurrencies] = useState([\n//     { value: \"AUD\", label: \"AUD\" },\n//     { value: \"EUR\", label: \"EUR\" },\n//     { value: \"GBP\", label: \"GBP\" },\n//     { value: \"JPY\", label: \"JPY\" },\n//     { value: \"USD\", label: \"USD\" }\n//   ]);\n//   const [summary, setSummary] = useState(\"\");\n//   const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n//   const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n//   const [data, setData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [isDarkMode, setIsDarkMode] = useState(true);\n//   const [showBreakdown, setShowBreakdown] = useState(false);\n//   const latestSummaryRef = useRef(\"\");\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:5000/xva\");\n//         const result = await response.json();\n//         setData(result);\n//         setLoading(false);\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         setLoading(false);\n//       }\n//     };\n//     fetchData();\n//   }, []);\n\n//   const getFilteredData = () => {\n//     return data.filter((d) => {\n//       const date = new Date(d.Date).getTime();\n//       return date >= startDate.getTime() && date <= endDate.getTime();\n//     });\n//   };\n\n//   useEffect(() => {\n//     if (!loading && data.length > 0) {\n//       const updateSummary = () => {\n//         if (summary !== latestSummaryRef.current) {\n//           setSummary(latestSummaryRef.current);\n//         }\n//       };\n//       const interval = setInterval(updateSummary, 1000);\n//       return () => clearInterval(interval);\n//     }\n//   }, [loading, data, summary]);\n\n//   const filteredData = getFilteredData();\n\n//   const totalLine = {\n//     name: \"Total\",\n//     data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n//     color: isDarkMode ? \"#007bff\" : \"#343a40\",\n//     marker: { enabled: false },\n//     zIndex: 1,\n//     boostThreshold: 1,\n//   };\n\n//   const shadeData = {\n//     name: \"Shaded Area\",\n//     data: filteredData.map((d) => ({\n//       x: new Date(d.Date).getTime(),\n//       low: Math.min(d.Total, d.Target),\n//       high: Math.max(d.Total, d.Target),\n//     })),\n//     type: \"arearange\",\n//     lineWidth: 0,\n//     linkedTo: \"Total\",\n//     color: \"#2E8C39\",\n//     fillOpacity: 0.3,\n//     zIndex: 0,\n//     marker: { enabled: false },\n//     boostThreshold: 0,\n//     boost: false,\n//   };\n\n//   const getData = () => {\n//     const compareData = [\n//       ...selectedCurrencies.map((currency) => ({\n//         name: currency.value,\n//         data: filteredData.map((d) => [\n//           new Date(d.Date).getTime(),\n//           d[currency.value],\n//         ]),\n//         color: getCurrencyColor(currency.value),\n//         marker: { enabled: false },\n//         boostThreshold: 1,\n//       })),\n//       totalLine,\n//       {\n//         name: \"Target\",\n//         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n//         color: \"#007bff\",\n//         marker: { enabled: false },\n//         zIndex: 1,\n//         boostThreshold: 1,\n//       },\n//       shadeData,\n//     ];\n//     return compareWithTarget ? compareData : compareData.slice(0, -1);\n//   };\n\n//   const getCurrencyColor = (currency) => {\n//     switch (currency) {\n//       case \"AUD\":\n//         return \"#FFD700\";\n//       case \"EUR\":\n//         return \"#FF6347\";\n//       case \"GBP\":\n//         return \"#4682B4\";\n//       case \"JPY\":\n//         return \"#32CD32\";\n//       case \"USD\":\n//         return \"#FFA07A\";\n//       case \"BRL\":\n//         return \"#9400D3\";\n//       case \"CAD\":\n//         return \"#00FF00\";\n//       case \"CHF\":\n//         return \"#FF00FF\";\n//       case \"CLP\":\n//         return \"#00FFFF\";\n//       case \"CNY\":\n//         return \"#FF4500\";\n//       case \"CZK\":\n//         return \"#FF1493\";\n//       case \"DKK\":\n//         return \"#1E90FF\";\n//       case \"HKD\":\n//         return \"#FF69B4\";\n//       case \"HUF\":\n//         return \"#8A2BE2\";\n//       case \"INR\":\n//         return \"#00BFFF\";\n//       case \"KRW\":\n//         return \"#7B68EE\";\n//       case \"NOK\":\n//         return \"#FFD700\";\n//       case \"NZD\":\n//         return \"#FF6347\";\n//       case \"PLN\":\n//         return \"#4682B4\";\n//       case \"SEK\":\n//         return \"#32CD32\";\n//       case \"SGD\":\n//         return \"#FFA07A\";\n//       case \"THB\":\n//         return \"#9400D3\";\n//       case \"TWD\":\n//         return \"#00FF00\";\n//       case \"ZAR\":\n//         return \"#FF00FF\";\n//       default:\n//         return \"#FF4500\";\n//     }\n//   };\n\n//   const toggleTheme = () => {\n//     setIsDarkMode(!isDarkMode);\n//   };\n\n//   return (\n//     <div>\n//         <Sidebar/>\n\n//     <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n//       <Topbar isDarkMode={isDarkMode} toggleTheme={toggleTheme} />\n//       <div className=\"graph-container\">\n//         <h2 className=\"graph-title\">LCH Notional | Time Series</h2>\n//         <div className=\"selectors-container\">\n//           <div className=\"currency-selector\">\n//             <label>Select Currencies:</label>\n//             <Selector\n//               options={[\n//                 { value: \"AUD\", label: \"AUD\" },\n//                 { value: \"EUR\", label: \"EUR\" },\n//                 { value: \"GBP\", label: \"GBP\" },\n//                 { value: \"JPY\", label: \"JPY\" },\n//                 { value: \"USD\", label: \"USD\" },\n//                 { value: \"BRL\", label: \"BRL\" },\n//                 { value: \"CAD\", label: \"CAD\" },\n//                 { value: \"CHF\", label: \"CHF\" },\n//                 { value: \"CLP\", label: \"CLP\" },\n//                 { value: \"CNY\", label: \"CNY\" },\n//                 { value: \"CZK\", label: \"CZK\" },\n//                 { value: \"DKK\", label: \"DKK\" },\n//                 { value: \"HKD\", label: \"HKD\" },\n//                 { value: \"HUF\", label: \"HUF\" },\n//                 { value: \"INR\", label: \"INR\" },\n//                 { value: \"KRW\", label: \"KRW\" },\n//                 { value: \"MXN\", label: \"MXN\" },\n//                 { value: \"NOK\", label: \"NOK\" },\n//                 { value: \"NZD\", label: \"NZD\" },\n//                 { value: \"PLN\", label: \"PLN\" },\n//                 { value: \"SEK\", label: \"SEK\" },\n//                 { value: \"SGD\", label: \"SGD\" },\n//                 { value: \"THB\", label: \"THB\" },\n//                 { value: \"TWD\", label: \"TWD\" },\n//                 { value: \"ZAR\", label: \"ZAR\" },\n//               ]}\n//               selectedCurrencies={selectedCurrencies}\n//               setSelectedCurrencies={setSelectedCurrencies}\n//             />\n//           </div>\n//           <div className=\"date-picker\">\n//             <label>Select Date Range:</label>\n//             <DatePicker\n//               selected={startDate}\n//               onChange={(date) => setStartDate(date)}\n//               selectsStart\n//               startDate={startDate}\n//               endDate={endDate}\n//               className=\"date-input\"\n//             />\n//             <DatePicker\n//               selected={endDate}\n//               onChange={(date) => setEndDate(date)}\n//               selectsEnd\n//               startDate={startDate}\n//               endDate={endDate}\n//               minDate={startDate}\n//               className=\"date-input\"\n//             />\n//           </div>\n//         </div>\n//         <div className=\"main-panel\">\n//           <HighchartsReact\n//             className=\"chart-actual\"\n//             highcharts={Highcharts}\n//             options={{\n//               chart: {\n//                 type: \"line\",\n//                 zoomType: \"x\",\n//                 backgroundColor: {\n//                   linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n//                   stops: isDarkMode\n//                     ? [\n//                         [0, \"#2e2e2e\"],\n//                         [1, \"#1a1a1a\"],\n//                       ]\n//                     : [\n//                         [0, \"#ffffff\"],\n//                         [1, \"#f0f0f0\"],\n//                       ],\n//                 },\n//                 borderRadius: 10, // Rounded corners\n//                 style: {\n//                   fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n//                 },\n//                 plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                 plotBorderWidth: 1,\n//                 events: {\n//                   load: function () {\n//                     this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n//                   },\n//                 },\n//                 boost: {\n//                   useGPUTranslations: true,\n//                   usePreAllocated: true,\n//                 },\n//               },\n//               title: {\n//                 text: \"\",\n//                 style: {\n//                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                   fontSize: \"22px\",\n//                   fontWeight: \"bold\",\n//                 },\n//               },\n//               xAxis: {\n//                 type: \"datetime\",\n//                 title: {\n//                   text: \"Date\",\n//                   style: {\n//                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                     fontSize: \"14px\",\n//                     fontWeight: \"bold\",\n//                   },\n//                 },\n//                 lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                 tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                 labels: {\n//                   style: {\n//                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                     fontSize: \"12px\",\n//                   },\n//                 },\n//               },\n//               yAxis: {\n//                 title: {\n//                   text: \"Notional (USD)\",\n//                   style: {\n//                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                     fontSize: \"14px\",\n//                     fontWeight: \"bold\",\n//                   },\n//                 },\n//                 gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                 labels: {\n//                   style: {\n//                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                     fontSize: \"12px\",\n//                   },\n//                 },\n//               },\n//               legend: {\n//                 layout: \"horizontal\",\n//                 align: \"center\",\n//                 verticalAlign: \"bottom\",\n//                 itemStyle: {\n//                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                   fontSize: \"14px\",\n//                   fontWeight: \"bold\",\n//                 },\n//                 itemHoverStyle: {\n//                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                 },\n//                 itemHiddenStyle: {\n//                   color: isDarkMode ? \"#666666\" : \"#999999\",\n//                 },\n//               },\n//               tooltip: {\n//                 shared: true,\n//                 backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n//                 borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n//                 style: {\n//                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                 },\n//                 formatter: function () {\n//                   const points = this.points;\n//                   let targetValue = null;\n//                   let totalValue = null;\n\n//                   points.forEach((point) => {\n//                     if (point.series.name === \"Target\") {\n//                       targetValue = point.y;\n//                     }\n//                     if (point.series.name === \"Total\") {\n//                       totalValue = point.y;\n//                     }\n//                   });\n\n//                   if (targetValue !== null && totalValue !== null) {\n//                     const difference = (totalValue - targetValue).toFixed(2);\n//                     const totalBreakdown = selectedCurrencies\n//                       .map((currency) => {\n//                         const point = points.find((p) => p.series.name === currency.value);\n//                         return point\n//                           ? `${currency.value}: ${point.y.toFixed(2)}`\n//                           : `${currency.value}: N/A`;\n//                       })\n//                       .join(\"<br>\");\n\n//                     let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n//                     summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n//                     summaryHTML += `Difference: ${difference}<br><br>`;\n//                     summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n//                     latestSummaryRef.current = summaryHTML;\n\n//                     return points.reduce((s, point) => {\n//                       return (\n//                         s +\n//                         `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//                       );\n//                     }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n//                   }\n//                   return points.reduce((s, point) => {\n//                     return (\n//                       s +\n//                       `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//                     );\n//                   }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n//                 },\n//               },\n//               series: getData(),\n//               navigation: {\n//                 buttonOptions: {\n//                   enabled: true,\n//                   theme: {\n//                     fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//                     stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n//                     style: {\n//                       color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                     },\n//                   },\n//                 },\n//               },\n//               exporting: {\n//                 buttons: {\n//                   contextButton: {\n//                     symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                     theme: {\n//                       fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//                     },\n//                   },\n//                 },\n//               },\n//             }}\n//             containerProps={{ className: \"chart-container\" }}\n//             updateArgs={[true, true, true]}\n//             ref={chartRef}\n//           />\n//           {compareWithTarget && (\n//             <div className=\"summary-box\">\n//               <div className=\"summary-content\">\n//                 <span>Total: {parseFloat(summary.split('Total: ')[1]?.split('<br>')[0])}</span>\n//                 <span>Target: {parseFloat(summary.split('Target: ')[1]?.split('<br>')[0])}</span>\n//                 <span>Difference: {parseFloat(summary.split('Difference: ')[1]?.split('<br>')[0])}</span>\n//                 <span\n//                   className=\"dropdown-arrow\"\n//                   onClick={() => setShowBreakdown(!showBreakdown)}\n//                   title=\"Show currency breakdown\"\n//                 >\n//                   &#9660;\n//                 </span>\n//               </div>\n//               {showBreakdown && (\n//                 <div className=\"currency-breakdown\">\n//                   <div dangerouslySetInnerHTML={{ __html: summary.split('<br><br>')[1] }} />\n//                 </div>\n//               )}\n//             </div>\n//           )}\n//           <div className=\"bottom-right-buttons\">\n//             <button\n//               onClick={() => setCompareWithTarget(!compareWithTarget)}\n//               className=\"toggle-button\"\n//             >\n//               {compareWithTarget ? \"Disable Compare with Target\" : \"Enable Compare with Target\"}\n//             </button>\n//             <div className=\"download-section\">\n//               <button className=\"toggle-button\">Download</button>\n//               <div className=\"dropdown-content\">\n//                 <button\n//                   onClick={() =>\n//                     chartRef.current.chart.exportChart({ type: \"image/png\" })\n//                   }\n//                 >\n//                   PNG\n//                 </button>\n//                 <button\n//                   onClick={() =>\n//                     chartRef.current.chart.exportChart({ type: \"image/jpeg\" })\n//                   }\n//                 >\n//                   JPEG\n//                 </button>\n//                 <button\n//                   onClick={() =>\n//                     chartRef.current.chart.exportChart({ type: \"application/pdf\" })\n//                   }\n//                 >\n//                   PDF\n//                 </button>\n//                 <button\n//                   onClick={() =>\n//                     chartRef.current.chart.exportChart({ type: \"image/svg+xml\" })\n//                   }\n//                 >\n//                   SVG\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <div className=\"data-table-section\">\n//         <DataTable\n//           title=\"LCH Notional | Summary Table\"\n//           columns={[\n//             { name: \"Date\", selector: (row) => row.Date, sortable: true },\n//             { name: \"Target\", selector: (row) => row.Target, sortable: true },\n//             ...selectedCurrencies.map((currency) => ({\n//               name: currency.label,\n//               selector: (row) => row[currency.value],\n//               sortable: true,\n//             })),\n//             { name: \"Total\", selector: (row) => row.Total, sortable: true },\n//           ]}\n//           data={filteredData.map((d) => {\n//             const rowData = {\n//               Date: d.Date,\n//               Target: d.Target,\n//               Total: d.Total,\n//             };\n//             selectedCurrencies.forEach((currency) => {\n//               rowData[currency.value] = d[currency.value];\n//             });\n//             return rowData;\n//           })}\n//           pagination\n//           highlightOnHover\n//           pointerOnHover\n//           customStyles={{\n//             header: {\n//               style: {\n//                 fontSize: '22px',\n//                 fontWeight: 'bold',\n//                 color: 'var(--text-color)',\n//                 backgroundColor: 'var(--control-bg-color)',\n//               },\n//             },\n//             rows: {\n//               style: {\n//                 fontSize: '16px',\n//                 color: 'var(--text-color)',\n//                 backgroundColor: 'var(--input-bg-color)',\n//                 '&:not(:last-of-type)': {\n//                   borderBottomStyle: 'solid',\n//                   borderBottomWidth: '1px',\n//                   borderBottomColor: 'var(--control-bg-color)',\n//                 },\n//               },\n//             },\n//             headCells: {\n//               style: {\n//                 fontSize: '18px',\n//                 fontWeight: 'bold',\n//                 color: 'var(--text-color)',\n//                 backgroundColor: 'var(--control-bg-color)',\n//               },\n//             },\n//             cells: {\n//               style: {\n//                 fontSize: '16px',\n//                 color: 'var(--text-color)',\n//                 backgroundColor: 'var(--input-bg-color)',\n//               },\n//             },\n//           }}\n//         />\n//       </div>\n//     </div>\n//     </div>\n//   );\n// };\n\n// export default Graph;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport HighchartsBoost from \"highcharts/modules/boost\";\nimport HighchartsExporting from \"highcharts/modules/exporting\";\nimport HighchartsAnnotations from \"highcharts/modules/annotations\";\nimport HighchartsMore from \"highcharts/highcharts-more\";\nimport DataTable from \"react-data-table-component\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Topbar from \"./Topbar\";\nimport Selector from \"./Selector\";\nimport Sidebar from \"./Sidebar\"; // Import the Sidebar component\nimport \"../Styles/Graph.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nHighchartsBoost(Highcharts);\nHighchartsExporting(Highcharts);\nHighchartsAnnotations(Highcharts);\nHighchartsMore(Highcharts);\nconst Graph = () => {\n  _s();\n  const [compareWithTarget, setCompareWithTarget] = useState(false);\n  const [selectedCurrencies, setSelectedCurrencies] = useState([{\n    value: \"AUD\",\n    label: \"AUD\"\n  }, {\n    value: \"EUR\",\n    label: \"EUR\"\n  }, {\n    value: \"GBP\",\n    label: \"GBP\"\n  }, {\n    value: \"JPY\",\n    label: \"JPY\"\n  }, {\n    value: \"USD\",\n    label: \"USD\"\n  }]);\n  const [summary, setSummary] = useState(\"\");\n  const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n  const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [sidebarOpen, setSidebarOpen] = useState(false); // Sidebar state\n  const latestSummaryRef = useRef(\"\");\n  const chartRef = useRef(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/xva\");\n        const result = await response.json();\n        setData(result);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  const getFilteredData = () => {\n    return data.filter(d => {\n      const date = new Date(d.Date).getTime();\n      return date >= startDate.getTime() && date <= endDate.getTime();\n    });\n  };\n  useEffect(() => {\n    if (!loading && data.length > 0) {\n      const updateSummary = () => {\n        if (summary !== latestSummaryRef.current) {\n          setSummary(latestSummaryRef.current);\n        }\n      };\n      const interval = setInterval(updateSummary, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [loading, data, summary]);\n  const filteredData = getFilteredData();\n  const totalLine = {\n    name: \"Total\",\n    data: filteredData.map(d => [new Date(d.Date).getTime(), d.Total]),\n    color: isDarkMode ? \"#007bff\" : \"#343a40\",\n    marker: {\n      enabled: false\n    },\n    zIndex: 1,\n    boostThreshold: 1\n  };\n  const shadeData = {\n    name: \"Shaded Area\",\n    data: filteredData.map(d => ({\n      x: new Date(d.Date).getTime(),\n      low: Math.min(d.Total, d.Target),\n      high: Math.max(d.Total, d.Target)\n    })),\n    type: \"arearange\",\n    lineWidth: 0,\n    linkedTo: \"Total\",\n    color: \"#2E8C39\",\n    fillOpacity: 0.3,\n    zIndex: 0,\n    marker: {\n      enabled: false\n    },\n    boostThreshold: 0,\n    boost: false\n  };\n  const getData = () => {\n    const compareData = [...selectedCurrencies.map(currency => ({\n      name: currency.value,\n      data: filteredData.map(d => [new Date(d.Date).getTime(), d[currency.value]]),\n      color: getCurrencyColor(currency.value),\n      marker: {\n        enabled: false\n      },\n      boostThreshold: 1\n    })), totalLine, {\n      name: \"Target\",\n      data: filteredData.map(d => [new Date(d.Date).getTime(), d.Target]),\n      color: \"#007bff\",\n      marker: {\n        enabled: false\n      },\n      zIndex: 1,\n      boostThreshold: 1\n    }, shadeData];\n    return compareWithTarget ? compareData : compareData.slice(0, -1);\n  };\n  const getCurrencyColor = currency => {\n    switch (currency) {\n      case \"AUD\":\n        return \"#FFD700\";\n      case \"EUR\":\n        return \"#FF6347\";\n      case \"GBP\":\n        return \"#4682B4\";\n      case \"JPY\":\n        return \"#32CD32\";\n      case \"USD\":\n        return \"#FFA07A\";\n      case \"BRL\":\n        return \"#9400D3\";\n      case \"CAD\":\n        return \"#00FF00\";\n      case \"CHF\":\n        return \"#FF00FF\";\n      case \"CLP\":\n        return \"#00FFFF\";\n      case \"CNY\":\n        return \"#FF4500\";\n      case \"CZK\":\n        return \"#FF1493\";\n      case \"DKK\":\n        return \"#1E90FF\";\n      case \"HKD\":\n        return \"#FF69B4\";\n      case \"HUF\":\n        return \"#8A2BE2\";\n      case \"INR\":\n        return \"#00BFFF\";\n      case \"KRW\":\n        return \"#7B68EE\";\n      case \"NOK\":\n        return \"#FFD700\";\n      case \"NZD\":\n        return \"#FF6347\";\n      case \"PLN\":\n        return \"#4682B4\";\n      case \"SEK\":\n        return \"#32CD32\";\n      case \"SGD\":\n        return \"#FFA07A\";\n      case \"THB\":\n        return \"#9400D3\";\n      case \"TWD\":\n        return \"#00FF00\";\n      case \"ZAR\":\n        return \"#FF00FF\";\n      default:\n        return \"#FF4500\";\n    }\n  };\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n  const toggleSidebar = () => {\n    setSidebarOpen(!sidebarOpen);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`,\n    children: [/*#__PURE__*/_jsxDEV(Topbar, {\n      toggleSidebar: toggleSidebar,\n      isDarkMode: isDarkMode,\n      toggleTheme: toggleTheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1308,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Sidebar, {\n      isOpen: sidebarOpen,\n      toggleSidebar: toggleSidebar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1309,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"graph-title\",\n        children: \"LCH Notional | Time Series\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1311,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selectors-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"currency-selector\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Currencies:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1314,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Selector, {\n            options: [{\n              value: \"AUD\",\n              label: \"AUD\"\n            }, {\n              value: \"EUR\",\n              label: \"EUR\"\n            }, {\n              value: \"GBP\",\n              label: \"GBP\"\n            }, {\n              value: \"JPY\",\n              label: \"JPY\"\n            }, {\n              value: \"USD\",\n              label: \"USD\"\n            }, {\n              value: \"BRL\",\n              label: \"BRL\"\n            }, {\n              value: \"CAD\",\n              label: \"CAD\"\n            }, {\n              value: \"CHF\",\n              label: \"CHF\"\n            }, {\n              value: \"CLP\",\n              label: \"CLP\"\n            }, {\n              value: \"CNY\",\n              label: \"CNY\"\n            }, {\n              value: \"CZK\",\n              label: \"CZK\"\n            }, {\n              value: \"DKK\",\n              label: \"DKK\"\n            }, {\n              value: \"HKD\",\n              label: \"HKD\"\n            }, {\n              value: \"HUF\",\n              label: \"HUF\"\n            }, {\n              value: \"INR\",\n              label: \"INR\"\n            }, {\n              value: \"KRW\",\n              label: \"KRW\"\n            }, {\n              value: \"MXN\",\n              label: \"MXN\"\n            }, {\n              value: \"NOK\",\n              label: \"NOK\"\n            }, {\n              value: \"NZD\",\n              label: \"NZD\"\n            }, {\n              value: \"PLN\",\n              label: \"PLN\"\n            }, {\n              value: \"SEK\",\n              label: \"SEK\"\n            }, {\n              value: \"SGD\",\n              label: \"SGD\"\n            }, {\n              value: \"THB\",\n              label: \"THB\"\n            }, {\n              value: \"TWD\",\n              label: \"TWD\"\n            }, {\n              value: \"ZAR\",\n              label: \"ZAR\"\n            }],\n            selectedCurrencies: selectedCurrencies,\n            setSelectedCurrencies: setSelectedCurrencies\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1315,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1313,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"date-picker\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Date Range:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1348,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n            selected: startDate,\n            onChange: date => setStartDate(date),\n            selectsStart: true,\n            startDate: startDate,\n            endDate: endDate,\n            className: \"date-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1349,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n            selected: endDate,\n            onChange: date => setEndDate(date),\n            selectsEnd: true,\n            startDate: startDate,\n            endDate: endDate,\n            minDate: startDate,\n            className: \"date-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1357,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1347,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1312,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-panel\",\n        children: [/*#__PURE__*/_jsxDEV(HighchartsReact, {\n          className: \"chart-actual\",\n          highcharts: Highcharts,\n          options: {\n            chart: {\n              type: \"line\",\n              zoomType: \"x\",\n              backgroundColor: {\n                linearGradient: {\n                  x1: 0,\n                  y1: 0,\n                  x2: 1,\n                  y2: 1\n                },\n                stops: isDarkMode ? [[0, \"#2e2e2e\"], [1, \"#1a1a1a\"]] : [[0, \"#ffffff\"], [1, \"#f0f0f0\"]]\n              },\n              borderRadius: 10,\n              // Rounded corners\n              style: {\n                fontFamily: \"Helvetica, Arial, sans-serif\" // Font style for the chart\n              },\n              plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n              plotBorderWidth: 1,\n              events: {\n                load: function () {\n                  this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n                }\n              },\n              boost: {\n                useGPUTranslations: true,\n                usePreAllocated: true\n              }\n            },\n            title: {\n              text: \"\",\n              style: {\n                color: isDarkMode ? \"#ffffff\" : \"#000000\",\n                fontSize: \"22px\",\n                fontWeight: \"bold\"\n              }\n            },\n            xAxis: {\n              type: \"datetime\",\n              title: {\n                text: \"Date\",\n                style: {\n                  color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                  fontSize: \"14px\",\n                  fontWeight: \"bold\"\n                }\n              },\n              lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n              tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n              labels: {\n                style: {\n                  color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                  fontSize: \"12px\"\n                }\n              }\n            },\n            yAxis: {\n              title: {\n                text: \"Notional (USD)\",\n                style: {\n                  color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                  fontSize: \"14px\",\n                  fontWeight: \"bold\"\n                }\n              },\n              gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n              labels: {\n                style: {\n                  color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                  fontSize: \"12px\"\n                }\n              }\n            },\n            legend: {\n              layout: \"horizontal\",\n              align: \"center\",\n              verticalAlign: \"bottom\",\n              itemStyle: {\n                color: isDarkMode ? \"#ffffff\" : \"#000000\",\n                fontSize: \"14px\",\n                fontWeight: \"bold\"\n              },\n              itemHoverStyle: {\n                color: isDarkMode ? \"#cccccc\" : \"#000000\"\n              },\n              itemHiddenStyle: {\n                color: isDarkMode ? \"#666666\" : \"#999999\"\n              }\n            },\n            tooltip: {\n              shared: true,\n              backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n              borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n              style: {\n                color: isDarkMode ? \"#ffffff\" : \"#000000\"\n              },\n              formatter: function () {\n                const points = this.points;\n                let targetValue = null;\n                let totalValue = null;\n                points.forEach(point => {\n                  if (point.series.name === \"Target\") {\n                    targetValue = point.y;\n                  }\n                  if (point.series.name === \"Total\") {\n                    totalValue = point.y;\n                  }\n                });\n                if (targetValue !== null && totalValue !== null) {\n                  const difference = (totalValue - targetValue).toFixed(2);\n                  const totalBreakdown = selectedCurrencies.map(currency => {\n                    const point = points.find(p => p.series.name === currency.value);\n                    return point ? `${currency.value}: ${point.y.toFixed(2)}` : `${currency.value}: N/A`;\n                  }).join(\"<br>\");\n                  let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n                  summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n                  summaryHTML += `Difference: ${difference}<br><br>`;\n                  summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n                  latestSummaryRef.current = summaryHTML;\n                  return points.reduce((s, point) => {\n                    return s + `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`;\n                  }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n                }\n                return points.reduce((s, point) => {\n                  return s + `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`;\n                }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n              }\n            },\n            series: getData(),\n            navigation: {\n              buttonOptions: {\n                enabled: true,\n                theme: {\n                  fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n                  stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n                  style: {\n                    color: isDarkMode ? \"#ffffff\" : \"#000000\"\n                  }\n                }\n              }\n            },\n            exporting: {\n              buttons: {\n                contextButton: {\n                  symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n                  theme: {\n                    fill: isDarkMode ? \"#444444\" : \"#f0f0f0\"\n                  }\n                }\n              }\n            }\n          },\n          containerProps: {\n            className: \"chart-container\"\n          },\n          updateArgs: [true, true, true],\n          ref: chartRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1369,\n          columnNumber: 21\n        }, this), compareWithTarget && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-box\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"summary-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Total: \", summary.total]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1549,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Target: \", summary.target]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1550,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Difference: \", summary.difference]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1551,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-dropdown\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"dropdown-arrow\",\n                children: \"\\u25BC\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1553,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"currency-breakdown\",\n                children: summary.currencyBreakdown\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1554,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1552,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1548,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1547,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom-right-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setCompareWithTarget(!compareWithTarget),\n            className: \"toggle-button\",\n            children: compareWithTarget ? \"Disable Compare with Target\" : \"Enable Compare with Target\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1562,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"download-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"toggle-button\",\n              children: \"Download\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1569,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dropdown-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => chartRef.current.chart.exportChart({\n                  type: \"image/png\"\n                }),\n                children: \"PNG\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1571,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => chartRef.current.chart.exportChart({\n                  type: \"image/jpeg\"\n                }),\n                children: \"JPEG\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1578,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => chartRef.current.chart.exportChart({\n                  type: \"application/pdf\"\n                }),\n                children: \"PDF\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1585,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => chartRef.current.chart.exportChart({\n                  type: \"image/svg+xml\"\n                }),\n                children: \"SVG\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1592,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1570,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1568,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1561,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1368,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1310,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"data-table-section\",\n      children: /*#__PURE__*/_jsxDEV(DataTable, {\n        title: \"LCH Notional | Summary Table\",\n        columns: [{\n          name: \"Date\",\n          selector: row => row.Date,\n          sortable: true\n        }, {\n          name: \"Target\",\n          selector: row => row.Target,\n          sortable: true\n        }, ...selectedCurrencies.map(currency => ({\n          name: currency.label,\n          selector: row => row[currency.value],\n          sortable: true\n        })), {\n          name: \"Total\",\n          selector: row => row.Total,\n          sortable: true\n        }],\n        data: filteredData.map(d => {\n          const rowData = {\n            Date: d.Date,\n            Target: d.Target,\n            Total: d.Total\n          };\n          selectedCurrencies.forEach(currency => {\n            rowData[currency.value] = d[currency.value];\n          });\n          return rowData;\n        }),\n        pagination: true,\n        highlightOnHover: true,\n        pointerOnHover: true,\n        customStyles: {\n          header: {\n            style: {\n              fontSize: '22px',\n              fontWeight: 'bold',\n              color: 'var(--text-color)',\n              backgroundColor: 'var(--control-bg-color)'\n            }\n          },\n          rows: {\n            style: {\n              fontSize: '16px',\n              color: 'var(--text-color)',\n              backgroundColor: 'var(--input-bg-color)',\n              '&:not(:last-of-type)': {\n                borderBottomStyle: 'solid',\n                borderBottomWidth: '1px',\n                borderBottomColor: 'var(--control-bg-color)'\n              }\n            }\n          },\n          headCells: {\n            style: {\n              fontSize: '18px',\n              fontWeight: 'bold',\n              color: 'var(--text-color)',\n              backgroundColor: 'var(--control-bg-color)'\n            }\n          },\n          cells: {\n            style: {\n              fontSize: '16px',\n              color: 'var(--text-color)',\n              backgroundColor: 'var(--input-bg-color)'\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1605,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1604,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1307,\n    columnNumber: 9\n  }, this);\n};\n_s(Graph, \"JLhFxv5fA8l2tggUyIyyN0YHn3s=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Highcharts","HighchartsReact","HighchartsBoost","HighchartsExporting","HighchartsAnnotations","HighchartsMore","DataTable","DatePicker","Topbar","Selector","Sidebar","jsxDEV","_jsxDEV","Graph","_s","compareWithTarget","setCompareWithTarget","selectedCurrencies","setSelectedCurrencies","value","label","summary","setSummary","startDate","setStartDate","Date","endDate","setEndDate","data","setData","loading","setLoading","isDarkMode","setIsDarkMode","sidebarOpen","setSidebarOpen","latestSummaryRef","chartRef","fetchData","response","fetch","result","json","error","console","getFilteredData","filter","d","date","getTime","length","updateSummary","current","interval","setInterval","clearInterval","filteredData","totalLine","name","map","Total","color","marker","enabled","zIndex","boostThreshold","shadeData","x","low","Math","min","Target","high","max","type","lineWidth","linkedTo","fillOpacity","boost","getData","compareData","currency","getCurrencyColor","slice","toggleTheme","toggleSidebar","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","options","selected","onChange","selectsStart","selectsEnd","minDate","highcharts","chart","zoomType","backgroundColor","linearGradient","x1","y1","x2","y2","stops","borderRadius","style","fontFamily","plotBorderColor","plotBorderWidth","events","load","xAxis","setExtremes","useGPUTranslations","usePreAllocated","title","text","fontSize","fontWeight","lineColor","tickColor","labels","yAxis","gridLineColor","legend","layout","align","verticalAlign","itemStyle","itemHoverStyle","itemHiddenStyle","tooltip","shared","borderColor","formatter","points","targetValue","totalValue","forEach","point","series","y","difference","toFixed","totalBreakdown","find","p","join","summaryHTML","reduce","s","dateFormat","navigation","buttonOptions","theme","fill","stroke","exporting","buttons","contextButton","symbolStroke","containerProps","updateArgs","ref","total","target","currencyBreakdown","onClick","exportChart","columns","selector","row","sortable","rowData","pagination","highlightOnHover","pointerOnHover","customStyles","header","rows","borderBottomStyle","borderBottomWidth","borderBottomColor","headCells","cells","_c","$RefreshReg$"],"sources":["/Users/harshmishra/Desktop/dashboard/frontend/src/Components/Graph.jsx"],"sourcesContent":["// // import React, { useState, useEffect, useRef } from \"react\";\n// // import Highcharts from \"highcharts\";\n// // import HighchartsReact from \"highcharts-react-official\";\n// // import HighchartsBoost from \"highcharts/modules/boost\";\n// // import HighchartsExporting from \"highcharts/modules/exporting\";\n// // import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// // import HighchartsMore from \"highcharts/highcharts-more\";\n// // import DataTable from \"react-data-table-component\";\n// // import DatePicker from \"react-datepicker\";\n// // import \"react-datepicker/dist/react-datepicker.css\";\n// // import Topbar from \"./Topbar\";\n// // import Selector from \"./Selector\";\n// // import \"../Styles/Graph.css\";\n\n// // HighchartsBoost(Highcharts);\n// // HighchartsExporting(Highcharts);\n// // HighchartsAnnotations(Highcharts);\n// // HighchartsMore(Highcharts);\n\n// // const Graph = () => {\n// //   const [compareWithTarget, setCompareWithTarget] = useState(false);\n// //   const [selectedCurrencies, setSelectedCurrencies] = useState([\n// //     { value: \"AUD\", label: \"AUD\" },\n// //     { value: \"EUR\", label: \"EUR\" },\n// //     { value: \"GBP\", label: \"GBP\" },\n// //     { value: \"JPY\", label: \"JPY\" },\n// //     { value: \"USD\", label: \"USD\" }\n// //   ]);\n// //   const [summary, setSummary] = useState(\"\");\n// //   const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n// //   const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n// //   const [data, setData] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [isDarkMode, setIsDarkMode] = useState(true);\n// //   const latestSummaryRef = useRef(\"\");\n// //   const chartRef = useRef(null);\n\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       try {\n// //         const response = await fetch(\"http://localhost:5000/xva\");\n// //         const result = await response.json();\n// //         setData(result);\n// //         setLoading(false);\n// //       } catch (error) {\n// //         console.error(\"Error fetching data:\", error);\n// //         setLoading(false);\n// //       }\n// //     };\n// //     fetchData();\n// //   }, []);\n\n// //   const getFilteredData = () => {\n// //     return data.filter((d) => {\n// //       const date = new Date(d.Date).getTime();\n// //       return date >= startDate.getTime() && date <= endDate.getTime();\n// //     });\n// //   };\n\n// //   useEffect(() => {\n// //     if (!loading && data.length > 0) {\n// //       const updateSummary = () => {\n// //         if (summary !== latestSummaryRef.current) {\n// //           setSummary(latestSummaryRef.current);\n// //         }\n// //       };\n// //       const interval = setInterval(updateSummary, 1000);\n// //       return () => clearInterval(interval);\n// //     }\n// //   }, [loading, data, summary]);\n\n// //   const filteredData = getFilteredData();\n\n// //   const totalLine = {\n// //     name: \"Total\",\n// //     data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n// //     color: isDarkMode ? \"#007bff\" : \"#343a40\",\n// //     marker: { enabled: false },\n// //     zIndex: 1,\n// //     boostThreshold: 1,\n// //   };\n\n// //   const shadeData = {\n// //     name: \"Shaded Area\",\n// //     data: filteredData.map((d) => ({\n// //       x: new Date(d.Date).getTime(),\n// //       low: Math.min(d.Total, d.Target),\n// //       high: Math.max(d.Total, d.Target),\n// //     })),\n// //     type: \"arearange\",\n// //     lineWidth: 0,\n// //     linkedTo: \"Total\",\n// //     color: \"#2E8C39\",\n// //     fillOpacity: 0.3,\n// //     zIndex: 0,\n// //     marker: { enabled: false },\n// //     boostThreshold: 0,\n// //     boost: false,\n// //   };\n\n// //   const getData = () => {\n// //     const compareData = [\n// //       ...selectedCurrencies.map((currency) => ({\n// //         name: currency.value,\n// //         data: filteredData.map((d) => [\n// //           new Date(d.Date).getTime(),\n// //           d[currency.value],\n// //         ]),\n// //         color: getCurrencyColor(currency.value),\n// //         marker: { enabled: false },\n// //         boostThreshold: 1,\n// //       })),\n// //       totalLine,\n// //       {\n// //         name: \"Target\",\n// //         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n// //         color: \"#007bff\",\n// //         marker: { enabled: false },\n// //         zIndex: 1,\n// //         boostThreshold: 1,\n// //       },\n// //       shadeData,\n// //     ];\n// //     return compareWithTarget ? compareData : compareData.slice(0, -1);\n// //   };\n\n// //   const getCurrencyColor = (currency) => {\n// //     switch (currency) {\n// //       case \"AUD\":\n// //         return \"#FFD700\";\n// //       case \"EUR\":\n// //         return \"#FF6347\";\n// //       case \"GBP\":\n// //         return \"#4682B4\";\n// //       case \"JPY\":\n// //         return \"#32CD32\";\n// //       case \"USD\":\n// //         return \"#FFA07A\";\n// //       case \"BRL\":\n// //         return \"#9400D3\";\n// //       case \"CAD\":\n// //         return \"#00FF00\";\n// //       case \"CHF\":\n// //         return \"#FF00FF\";\n// //       case \"CLP\":\n// //         return \"#00FFFF\";\n// //       case \"CNY\":\n// //         return \"#FF4500\";\n// //       case \"CZK\":\n// //         return \"#FF1493\";\n// //       case \"DKK\":\n// //         return \"#1E90FF\";\n// //       case \"HKD\":\n// //         return \"#FF69B4\";\n// //       case \"HUF\":\n// //         return \"#8A2BE2\";\n// //       case \"INR\":\n// //         return \"#00BFFF\";\n// //       case \"KRW\":\n// //         return \"#7B68EE\";\n// //       case \"NOK\":\n// //         return \"#FFD700\";\n// //       case \"NZD\":\n// //         return \"#FF6347\";\n// //       case \"PLN\":\n// //         return \"#4682B4\";\n// //       case \"SEK\":\n// //         return \"#32CD32\";\n// //       case \"SGD\":\n// //         return \"#FFA07A\";\n// //       case \"THB\":\n// //         return \"#9400D3\";\n// //       case \"TWD\":\n// //         return \"#00FF00\";\n// //       case \"ZAR\":\n// //         return \"#FF00FF\";\n// //       default:\n// //         return \"#FF4500\";\n// //     }\n// //   };\n\n// //   const toggleTheme = () => {\n// //     setIsDarkMode(!isDarkMode);\n// //   };\n\n// //   return (\n// //     <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n// //       <Topbar isDarkMode={isDarkMode} toggleTheme={toggleTheme} />\n// //       <div className=\"graph-container\">\n// //         <h2 className=\"graph-title\">LCH Notional | Time Series</h2>\n// //         <div className=\"selectors-container\">\n// //           <div className=\"currency-selector\">\n// //             <label>Select Currencies:</label>\n// //             <Selector\n// //               options={[\n// //                 { value: \"AUD\", label: \"AUD\" },\n// //                 { value: \"EUR\", label: \"EUR\" },\n// //                 { value: \"GBP\", label: \"GBP\" },\n// //                 { value: \"JPY\", label: \"JPY\" },\n// //                 { value: \"USD\", label: \"USD\" },\n// //                 { value: \"BRL\", label: \"BRL\" },\n// //                 { value: \"CAD\", label: \"CAD\" },\n// //                 { value: \"CHF\", label: \"CHF\" },\n// //                 { value: \"CLP\", label: \"CLP\" },\n// //                 { value: \"CNY\", label: \"CNY\" },\n// //                 { value: \"CZK\", label: \"CZK\" },\n// //                 { value: \"DKK\", label: \"DKK\" },\n// //                 { value: \"HKD\", label: \"HKD\" },\n// //                 { value: \"HUF\", label: \"HUF\" },\n// //                 { value: \"INR\", label: \"INR\" },\n// //                 { value: \"KRW\", label: \"KRW\" },\n// //                 { value: \"MXN\", label: \"MXN\" },\n// //                 { value: \"NOK\", label: \"NOK\" },\n// //                 { value: \"NZD\", label: \"NZD\" },\n// //                 { value: \"PLN\", label: \"PLN\" },\n// //                 { value: \"SEK\", label: \"SEK\" },\n// //                 { value: \"SGD\", label: \"SGD\" },\n// //                 { value: \"THB\", label: \"THB\" },\n// //                 { value: \"TWD\", label: \"TWD\" },\n// //                 { value: \"ZAR\", label: \"ZAR\" },\n// //               ]}\n// //               selectedCurrencies={selectedCurrencies}\n// //               setSelectedCurrencies={setSelectedCurrencies}\n// //             />\n// //           </div>\n// //           <div className=\"date-picker\">\n// //             <label>Select Date Range:</label>\n// //             <DatePicker\n// //               selected={startDate}\n// //               onChange={(date) => setStartDate(date)}\n// //               selectsStart\n// //               startDate={startDate}\n// //               endDate={endDate}\n// //               className=\"date-input\"\n// //             />\n// //             <DatePicker\n// //               selected={endDate}\n// //               onChange={(date) => setEndDate(date)}\n// //               selectsEnd\n// //               startDate={startDate}\n// //               endDate={endDate}\n// //               minDate={startDate}\n// //               className=\"date-input\"\n// //             />\n// //           </div>\n// //         </div>\n// //         <div className=\"main-panel\">\n// //           <HighchartsReact\n// //             className=\"chart-actual\"\n// //             highcharts={Highcharts}\n// //             options={{\n// //               chart: {\n// //                 type: \"line\",\n// //                 zoomType: \"x\",\n// //                 backgroundColor: {\n// //                   linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n// //                   stops: isDarkMode\n// //                     ? [\n// //                         [0, \"#2e2e2e\"],\n// //                         [1, \"#1a1a1a\"],\n// //                       ]\n// //                     : [\n// //                         [0, \"#ffffff\"],\n// //                         [1, \"#f0f0f0\"],\n// //                       ],\n// //                 },\n// //                 borderRadius: 10, // Rounded corners\n// //                 style: {\n// //                   fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n// //                 },\n// //                 plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //                 plotBorderWidth: 1,\n// //                 events: {\n// //                   load: function () {\n// //                     this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n// //                   },\n// //                 },\n// //                 boost: {\n// //                   useGPUTranslations: true,\n// //                   usePreAllocated: true,\n// //                 },\n// //               },\n// //               title: {\n// //                 text: \"\",\n// //                 style: {\n// //                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //                   fontSize: \"22px\",\n// //                   fontWeight: \"bold\",\n// //                 },\n// //               },\n// //               xAxis: {\n// //                 type: \"datetime\",\n// //                 title: {\n// //                   text: \"Date\",\n// //                   style: {\n// //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                     fontSize: \"14px\",\n// //                     fontWeight: \"bold\",\n// //                   },\n// //                 },\n// //                 lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //                 tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //                 labels: {\n// //                   style: {\n// //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                     fontSize: \"12px\",\n// //                   },\n// //                 },\n// //               },\n// //               yAxis: {\n// //                 title: {\n// //                   text: \"Notional (USD)\",\n// //                   style: {\n// //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                     fontSize: \"14px\",\n// //                     fontWeight: \"bold\",\n// //                   },\n// //                 },\n// //                 gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //                 labels: {\n// //                   style: {\n// //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                     fontSize: \"12px\",\n// //                   },\n// //                 },\n// //               },\n// //               legend: {\n// //                 layout: \"horizontal\",\n// //                 align: \"center\",\n// //                 verticalAlign: \"bottom\",\n// //                 itemStyle: {\n// //                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //                   fontSize: \"14px\",\n// //                   fontWeight: \"bold\",\n// //                 },\n// //                 itemHoverStyle: {\n// //                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                 },\n// //                 itemHiddenStyle: {\n// //                   color: isDarkMode ? \"#666666\" : \"#999999\",\n// //                 },\n// //               },\n// //               tooltip: {\n// //                 shared: true,\n// //                 backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n// //                 borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n// //                 style: {\n// //                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //                 },\n// //                 formatter: function () {\n// //                   const points = this.points;\n// //                   let targetValue = null;\n// //                   let totalValue = null;\n\n// //                   points.forEach((point) => {\n// //                     if (point.series.name === \"Target\") {\n// //                       targetValue = point.y;\n// //                     }\n// //                     if (point.series.name === \"Total\") {\n// //                       totalValue = point.y;\n// //                     }\n// //                   });\n\n// //                   if (targetValue !== null && totalValue !== null) {\n// //                     const difference = (totalValue - targetValue).toFixed(2);\n// //                     const totalBreakdown = selectedCurrencies\n// //                       .map((currency) => {\n// //                         const point = points.find((p) => p.series.name === currency.value);\n// //                         return point\n// //                           ? `${currency.value}: ${point.y.toFixed(2)}`\n// //                           : `${currency.value}: N/A`;\n// //                       })\n// //                       .join(\"<br>\");\n\n// //                     let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n// //                     summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n// //                     summaryHTML += `Difference: ${difference}<br><br>`;\n// //                     summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n// //                     latestSummaryRef.current = summaryHTML;\n\n// //                     return points.reduce((s, point) => {\n// //                       return (\n// //                         s +\n// //                         `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// //                       );\n// //                     }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// //                   }\n// //                   return points.reduce((s, point) => {\n// //                     return (\n// //                       s +\n// //                       `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// //                     );\n// //                   }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// //                 },\n// //               },\n// //               series: getData(),\n// //               navigation: {\n// //                 buttonOptions: {\n// //                   enabled: true,\n// //                   theme: {\n// //                     fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// //                     stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n// //                     style: {\n// //                       color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //                     },\n// //                   },\n// //                 },\n// //               },\n// //               exporting: {\n// //                 buttons: {\n// //                   contextButton: {\n// //                     symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                     theme: {\n// //                       fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// //                     },\n// //                   },\n// //                 },\n// //               },\n// //             }}\n// //             containerProps={{ className: \"chart-container\" }}\n// //             updateArgs={[true, true, true]}\n// //             ref={chartRef}\n// //           />\n// //           {compareWithTarget && (\n// //             <div className=\"summary-box\">\n// //               <h3>Summary</h3>\n// //               <div dangerouslySetInnerHTML={{ __html: summary }} />\n// //             </div>\n// //           )}\n// //           <div className=\"bottom-right-buttons\">\n// //             <button\n// //               onClick={() => setCompareWithTarget(!compareWithTarget)}\n// //               className=\"toggle-button\"\n// //             >\n// //               {compareWithTarget ? \"Disable Compare with Target\" : \"Enable Compare with Target\"}\n// //             </button>\n// //             <div className=\"download-section\">\n// //               <button className=\"toggle-button\">Download</button>\n// //               <div className=\"dropdown-content\">\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"image/png\" })\n// //                   }\n// //                 >\n// //                   PNG\n// //                 </button>\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"image/jpeg\" })\n// //                   }\n// //                 >\n// //                   JPEG\n// //                 </button>\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"application/pdf\" })\n// //                   }\n// //                 >\n// //                   PDF\n// //                 </button>\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"image/svg+xml\" })\n// //                   }\n// //                 >\n// //                   SVG\n// //                 </button>\n// //               </div>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       </div>\n// //       <div className=\"data-table-section\">\n// //         <DataTable\n// //           title=\"LCH Notional | Summary Table\"\n// //           columns={[\n// //             { name: \"Date\", selector: (row) => row.Date, sortable: true },\n// //             { name: \"Target\", selector: (row) => row.Target, sortable: true },\n// //             ...selectedCurrencies.map((currency) => ({\n// //               name: currency.label,\n// //               selector: (row) => row[currency.value],\n// //               sortable: true,\n// //             })),\n// //             { name: \"Total\", selector: (row) => row.Total, sortable: true },\n// //           ]}\n// //           data={filteredData.map((d) => {\n// //             const rowData = {\n// //               Date: d.Date,\n// //               Target: d.Target,\n// //               Total: d.Total,\n// //             };\n// //             selectedCurrencies.forEach((currency) => {\n// //               rowData[currency.value] = d[currency.value];\n// //             });\n// //             return rowData;\n// //           })}\n// //           pagination\n// //           highlightOnHover\n// //           pointerOnHover\n// //           customStyles={{\n// //             header: {\n// //               style: {\n// //                 fontSize: '22px',\n// //                 fontWeight: 'bold',\n// //                 color: 'var(--text-color)',\n// //                 backgroundColor: 'var(--control-bg-color)',\n// //               },\n// //             },\n// //             rows: {\n// //               style: {\n// //                 fontSize: '16px',\n// //                 color: 'var(--text-color)',\n// //                 backgroundColor: 'var(--input-bg-color)',\n// //                 '&:not(:last-of-type)': {\n// //                   borderBottomStyle: 'solid',\n// //                   borderBottomWidth: '1px',\n// //                   borderBottomColor: 'var(--control-bg-color)',\n// //                 },\n// //               },\n// //             },\n// //             headCells: {\n// //               style: {\n// //                 fontSize: '18px',\n// //                 fontWeight: 'bold',\n// //                 color: 'var(--text-color)',\n// //                 backgroundColor: 'var(--control-bg-color)',\n// //               },\n// //             },\n// //             cells: {\n// //               style: {\n// //                 fontSize: '16px',\n// //                 color: 'var(--text-color)',\n// //                 backgroundColor: 'var(--input-bg-color)',\n// //               },\n// //             },\n// //           }}\n// //         />\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default Graph;\n\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import Highcharts from \"highcharts\";\n// import HighchartsReact from \"highcharts-react-official\";\n// import HighchartsBoost from \"highcharts/modules/boost\";\n// import HighchartsExporting from \"highcharts/modules/exporting\";\n// import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// import HighchartsMore from \"highcharts/highcharts-more\";\n// import DataTable from \"react-data-table-component\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import Topbar from \"./Topbar\";\n// import Selector from \"./Selector\";\n// import \"../Styles/Graph.css\";\n// import Sidebar from \"./Sidebar\";\n\n// HighchartsBoost(Highcharts);\n// HighchartsExporting(Highcharts);\n// HighchartsAnnotations(Highcharts);\n// HighchartsMore(Highcharts);\n\n// const Graph = () => {\n//   const [compareWithTarget, setCompareWithTarget] = useState(false);\n//   const [selectedCurrencies, setSelectedCurrencies] = useState([\n//     { value: \"AUD\", label: \"AUD\" },\n//     { value: \"EUR\", label: \"EUR\" },\n//     { value: \"GBP\", label: \"GBP\" },\n//     { value: \"JPY\", label: \"JPY\" },\n//     { value: \"USD\", label: \"USD\" }\n//   ]);\n//   const [summary, setSummary] = useState(\"\");\n//   const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n//   const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n//   const [data, setData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [isDarkMode, setIsDarkMode] = useState(true);\n//   const [showBreakdown, setShowBreakdown] = useState(false);\n//   const latestSummaryRef = useRef(\"\");\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:5000/xva\");\n//         const result = await response.json();\n//         setData(result);\n//         setLoading(false);\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         setLoading(false);\n//       }\n//     };\n//     fetchData();\n//   }, []);\n\n//   const getFilteredData = () => {\n//     return data.filter((d) => {\n//       const date = new Date(d.Date).getTime();\n//       return date >= startDate.getTime() && date <= endDate.getTime();\n//     });\n//   };\n\n//   useEffect(() => {\n//     if (!loading && data.length > 0) {\n//       const updateSummary = () => {\n//         if (summary !== latestSummaryRef.current) {\n//           setSummary(latestSummaryRef.current);\n//         }\n//       };\n//       const interval = setInterval(updateSummary, 1000);\n//       return () => clearInterval(interval);\n//     }\n//   }, [loading, data, summary]);\n\n//   const filteredData = getFilteredData();\n\n//   const totalLine = {\n//     name: \"Total\",\n//     data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n//     color: isDarkMode ? \"#007bff\" : \"#343a40\",\n//     marker: { enabled: false },\n//     zIndex: 1,\n//     boostThreshold: 1,\n//   };\n\n//   const shadeData = {\n//     name: \"Shaded Area\",\n//     data: filteredData.map((d) => ({\n//       x: new Date(d.Date).getTime(),\n//       low: Math.min(d.Total, d.Target),\n//       high: Math.max(d.Total, d.Target),\n//     })),\n//     type: \"arearange\",\n//     lineWidth: 0,\n//     linkedTo: \"Total\",\n//     color: \"#2E8C39\",\n//     fillOpacity: 0.3,\n//     zIndex: 0,\n//     marker: { enabled: false },\n//     boostThreshold: 0,\n//     boost: false,\n//   };\n\n//   const getData = () => {\n//     const compareData = [\n//       ...selectedCurrencies.map((currency) => ({\n//         name: currency.value,\n//         data: filteredData.map((d) => [\n//           new Date(d.Date).getTime(),\n//           d[currency.value],\n//         ]),\n//         color: getCurrencyColor(currency.value),\n//         marker: { enabled: false },\n//         boostThreshold: 1,\n//       })),\n//       totalLine,\n//       {\n//         name: \"Target\",\n//         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n//         color: \"#007bff\",\n//         marker: { enabled: false },\n//         zIndex: 1,\n//         boostThreshold: 1,\n//       },\n//       shadeData,\n//     ];\n//     return compareWithTarget ? compareData : compareData.slice(0, -1);\n//   };\n\n//   const getCurrencyColor = (currency) => {\n//     switch (currency) {\n//       case \"AUD\":\n//         return \"#FFD700\";\n//       case \"EUR\":\n//         return \"#FF6347\";\n//       case \"GBP\":\n//         return \"#4682B4\";\n//       case \"JPY\":\n//         return \"#32CD32\";\n//       case \"USD\":\n//         return \"#FFA07A\";\n//       case \"BRL\":\n//         return \"#9400D3\";\n//       case \"CAD\":\n//         return \"#00FF00\";\n//       case \"CHF\":\n//         return \"#FF00FF\";\n//       case \"CLP\":\n//         return \"#00FFFF\";\n//       case \"CNY\":\n//         return \"#FF4500\";\n//       case \"CZK\":\n//         return \"#FF1493\";\n//       case \"DKK\":\n//         return \"#1E90FF\";\n//       case \"HKD\":\n//         return \"#FF69B4\";\n//       case \"HUF\":\n//         return \"#8A2BE2\";\n//       case \"INR\":\n//         return \"#00BFFF\";\n//       case \"KRW\":\n//         return \"#7B68EE\";\n//       case \"NOK\":\n//         return \"#FFD700\";\n//       case \"NZD\":\n//         return \"#FF6347\";\n//       case \"PLN\":\n//         return \"#4682B4\";\n//       case \"SEK\":\n//         return \"#32CD32\";\n//       case \"SGD\":\n//         return \"#FFA07A\";\n//       case \"THB\":\n//         return \"#9400D3\";\n//       case \"TWD\":\n//         return \"#00FF00\";\n//       case \"ZAR\":\n//         return \"#FF00FF\";\n//       default:\n//         return \"#FF4500\";\n//     }\n//   };\n\n//   const toggleTheme = () => {\n//     setIsDarkMode(!isDarkMode);\n//   };\n\n//   return (\n//     <div>\n//         <Sidebar/>\n    \n//     <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n//       <Topbar isDarkMode={isDarkMode} toggleTheme={toggleTheme} />\n//       <div className=\"graph-container\">\n//         <h2 className=\"graph-title\">LCH Notional | Time Series</h2>\n//         <div className=\"selectors-container\">\n//           <div className=\"currency-selector\">\n//             <label>Select Currencies:</label>\n//             <Selector\n//               options={[\n//                 { value: \"AUD\", label: \"AUD\" },\n//                 { value: \"EUR\", label: \"EUR\" },\n//                 { value: \"GBP\", label: \"GBP\" },\n//                 { value: \"JPY\", label: \"JPY\" },\n//                 { value: \"USD\", label: \"USD\" },\n//                 { value: \"BRL\", label: \"BRL\" },\n//                 { value: \"CAD\", label: \"CAD\" },\n//                 { value: \"CHF\", label: \"CHF\" },\n//                 { value: \"CLP\", label: \"CLP\" },\n//                 { value: \"CNY\", label: \"CNY\" },\n//                 { value: \"CZK\", label: \"CZK\" },\n//                 { value: \"DKK\", label: \"DKK\" },\n//                 { value: \"HKD\", label: \"HKD\" },\n//                 { value: \"HUF\", label: \"HUF\" },\n//                 { value: \"INR\", label: \"INR\" },\n//                 { value: \"KRW\", label: \"KRW\" },\n//                 { value: \"MXN\", label: \"MXN\" },\n//                 { value: \"NOK\", label: \"NOK\" },\n//                 { value: \"NZD\", label: \"NZD\" },\n//                 { value: \"PLN\", label: \"PLN\" },\n//                 { value: \"SEK\", label: \"SEK\" },\n//                 { value: \"SGD\", label: \"SGD\" },\n//                 { value: \"THB\", label: \"THB\" },\n//                 { value: \"TWD\", label: \"TWD\" },\n//                 { value: \"ZAR\", label: \"ZAR\" },\n//               ]}\n//               selectedCurrencies={selectedCurrencies}\n//               setSelectedCurrencies={setSelectedCurrencies}\n//             />\n//           </div>\n//           <div className=\"date-picker\">\n//             <label>Select Date Range:</label>\n//             <DatePicker\n//               selected={startDate}\n//               onChange={(date) => setStartDate(date)}\n//               selectsStart\n//               startDate={startDate}\n//               endDate={endDate}\n//               className=\"date-input\"\n//             />\n//             <DatePicker\n//               selected={endDate}\n//               onChange={(date) => setEndDate(date)}\n//               selectsEnd\n//               startDate={startDate}\n//               endDate={endDate}\n//               minDate={startDate}\n//               className=\"date-input\"\n//             />\n//           </div>\n//         </div>\n//         <div className=\"main-panel\">\n//           <HighchartsReact\n//             className=\"chart-actual\"\n//             highcharts={Highcharts}\n//             options={{\n//               chart: {\n//                 type: \"line\",\n//                 zoomType: \"x\",\n//                 backgroundColor: {\n//                   linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n//                   stops: isDarkMode\n//                     ? [\n//                         [0, \"#2e2e2e\"],\n//                         [1, \"#1a1a1a\"],\n//                       ]\n//                     : [\n//                         [0, \"#ffffff\"],\n//                         [1, \"#f0f0f0\"],\n//                       ],\n//                 },\n//                 borderRadius: 10, // Rounded corners\n//                 style: {\n//                   fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n//                 },\n//                 plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                 plotBorderWidth: 1,\n//                 events: {\n//                   load: function () {\n//                     this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n//                   },\n//                 },\n//                 boost: {\n//                   useGPUTranslations: true,\n//                   usePreAllocated: true,\n//                 },\n//               },\n//               title: {\n//                 text: \"\",\n//                 style: {\n//                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                   fontSize: \"22px\",\n//                   fontWeight: \"bold\",\n//                 },\n//               },\n//               xAxis: {\n//                 type: \"datetime\",\n//                 title: {\n//                   text: \"Date\",\n//                   style: {\n//                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                     fontSize: \"14px\",\n//                     fontWeight: \"bold\",\n//                   },\n//                 },\n//                 lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                 tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                 labels: {\n//                   style: {\n//                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                     fontSize: \"12px\",\n//                   },\n//                 },\n//               },\n//               yAxis: {\n//                 title: {\n//                   text: \"Notional (USD)\",\n//                   style: {\n//                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                     fontSize: \"14px\",\n//                     fontWeight: \"bold\",\n//                   },\n//                 },\n//                 gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                 labels: {\n//                   style: {\n//                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                     fontSize: \"12px\",\n//                   },\n//                 },\n//               },\n//               legend: {\n//                 layout: \"horizontal\",\n//                 align: \"center\",\n//                 verticalAlign: \"bottom\",\n//                 itemStyle: {\n//                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                   fontSize: \"14px\",\n//                   fontWeight: \"bold\",\n//                 },\n//                 itemHoverStyle: {\n//                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                 },\n//                 itemHiddenStyle: {\n//                   color: isDarkMode ? \"#666666\" : \"#999999\",\n//                 },\n//               },\n//               tooltip: {\n//                 shared: true,\n//                 backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n//                 borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n//                 style: {\n//                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                 },\n//                 formatter: function () {\n//                   const points = this.points;\n//                   let targetValue = null;\n//                   let totalValue = null;\n\n//                   points.forEach((point) => {\n//                     if (point.series.name === \"Target\") {\n//                       targetValue = point.y;\n//                     }\n//                     if (point.series.name === \"Total\") {\n//                       totalValue = point.y;\n//                     }\n//                   });\n\n//                   if (targetValue !== null && totalValue !== null) {\n//                     const difference = (totalValue - targetValue).toFixed(2);\n//                     const totalBreakdown = selectedCurrencies\n//                       .map((currency) => {\n//                         const point = points.find((p) => p.series.name === currency.value);\n//                         return point\n//                           ? `${currency.value}: ${point.y.toFixed(2)}`\n//                           : `${currency.value}: N/A`;\n//                       })\n//                       .join(\"<br>\");\n\n//                     let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n//                     summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n//                     summaryHTML += `Difference: ${difference}<br><br>`;\n//                     summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n//                     latestSummaryRef.current = summaryHTML;\n\n//                     return points.reduce((s, point) => {\n//                       return (\n//                         s +\n//                         `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//                       );\n//                     }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n//                   }\n//                   return points.reduce((s, point) => {\n//                     return (\n//                       s +\n//                       `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//                     );\n//                   }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n//                 },\n//               },\n//               series: getData(),\n//               navigation: {\n//                 buttonOptions: {\n//                   enabled: true,\n//                   theme: {\n//                     fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//                     stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n//                     style: {\n//                       color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                     },\n//                   },\n//                 },\n//               },\n//               exporting: {\n//                 buttons: {\n//                   contextButton: {\n//                     symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                     theme: {\n//                       fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//                     },\n//                   },\n//                 },\n//               },\n//             }}\n//             containerProps={{ className: \"chart-container\" }}\n//             updateArgs={[true, true, true]}\n//             ref={chartRef}\n//           />\n//           {compareWithTarget && (\n//             <div className=\"summary-box\">\n//               <div className=\"summary-content\">\n//                 <span>Total: {parseFloat(summary.split('Total: ')[1]?.split('<br>')[0])}</span>\n//                 <span>Target: {parseFloat(summary.split('Target: ')[1]?.split('<br>')[0])}</span>\n//                 <span>Difference: {parseFloat(summary.split('Difference: ')[1]?.split('<br>')[0])}</span>\n//                 <span\n//                   className=\"dropdown-arrow\"\n//                   onClick={() => setShowBreakdown(!showBreakdown)}\n//                   title=\"Show currency breakdown\"\n//                 >\n//                   &#9660;\n//                 </span>\n//               </div>\n//               {showBreakdown && (\n//                 <div className=\"currency-breakdown\">\n//                   <div dangerouslySetInnerHTML={{ __html: summary.split('<br><br>')[1] }} />\n//                 </div>\n//               )}\n//             </div>\n//           )}\n//           <div className=\"bottom-right-buttons\">\n//             <button\n//               onClick={() => setCompareWithTarget(!compareWithTarget)}\n//               className=\"toggle-button\"\n//             >\n//               {compareWithTarget ? \"Disable Compare with Target\" : \"Enable Compare with Target\"}\n//             </button>\n//             <div className=\"download-section\">\n//               <button className=\"toggle-button\">Download</button>\n//               <div className=\"dropdown-content\">\n//                 <button\n//                   onClick={() =>\n//                     chartRef.current.chart.exportChart({ type: \"image/png\" })\n//                   }\n//                 >\n//                   PNG\n//                 </button>\n//                 <button\n//                   onClick={() =>\n//                     chartRef.current.chart.exportChart({ type: \"image/jpeg\" })\n//                   }\n//                 >\n//                   JPEG\n//                 </button>\n//                 <button\n//                   onClick={() =>\n//                     chartRef.current.chart.exportChart({ type: \"application/pdf\" })\n//                   }\n//                 >\n//                   PDF\n//                 </button>\n//                 <button\n//                   onClick={() =>\n//                     chartRef.current.chart.exportChart({ type: \"image/svg+xml\" })\n//                   }\n//                 >\n//                   SVG\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <div className=\"data-table-section\">\n//         <DataTable\n//           title=\"LCH Notional | Summary Table\"\n//           columns={[\n//             { name: \"Date\", selector: (row) => row.Date, sortable: true },\n//             { name: \"Target\", selector: (row) => row.Target, sortable: true },\n//             ...selectedCurrencies.map((currency) => ({\n//               name: currency.label,\n//               selector: (row) => row[currency.value],\n//               sortable: true,\n//             })),\n//             { name: \"Total\", selector: (row) => row.Total, sortable: true },\n//           ]}\n//           data={filteredData.map((d) => {\n//             const rowData = {\n//               Date: d.Date,\n//               Target: d.Target,\n//               Total: d.Total,\n//             };\n//             selectedCurrencies.forEach((currency) => {\n//               rowData[currency.value] = d[currency.value];\n//             });\n//             return rowData;\n//           })}\n//           pagination\n//           highlightOnHover\n//           pointerOnHover\n//           customStyles={{\n//             header: {\n//               style: {\n//                 fontSize: '22px',\n//                 fontWeight: 'bold',\n//                 color: 'var(--text-color)',\n//                 backgroundColor: 'var(--control-bg-color)',\n//               },\n//             },\n//             rows: {\n//               style: {\n//                 fontSize: '16px',\n//                 color: 'var(--text-color)',\n//                 backgroundColor: 'var(--input-bg-color)',\n//                 '&:not(:last-of-type)': {\n//                   borderBottomStyle: 'solid',\n//                   borderBottomWidth: '1px',\n//                   borderBottomColor: 'var(--control-bg-color)',\n//                 },\n//               },\n//             },\n//             headCells: {\n//               style: {\n//                 fontSize: '18px',\n//                 fontWeight: 'bold',\n//                 color: 'var(--text-color)',\n//                 backgroundColor: 'var(--control-bg-color)',\n//               },\n//             },\n//             cells: {\n//               style: {\n//                 fontSize: '16px',\n//                 color: 'var(--text-color)',\n//                 backgroundColor: 'var(--input-bg-color)',\n//               },\n//             },\n//           }}\n//         />\n//       </div>\n//     </div>\n//     </div>\n//   );\n// };\n\n// export default Graph;\n\n\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport HighchartsBoost from \"highcharts/modules/boost\";\nimport HighchartsExporting from \"highcharts/modules/exporting\";\nimport HighchartsAnnotations from \"highcharts/modules/annotations\";\nimport HighchartsMore from \"highcharts/highcharts-more\";\nimport DataTable from \"react-data-table-component\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Topbar from \"./Topbar\";\nimport Selector from \"./Selector\";\nimport Sidebar from \"./Sidebar\"; // Import the Sidebar component\nimport \"../Styles/Graph.css\";\n\nHighchartsBoost(Highcharts);\nHighchartsExporting(Highcharts);\nHighchartsAnnotations(Highcharts);\nHighchartsMore(Highcharts);\n\nconst Graph = () => {\n    const [compareWithTarget, setCompareWithTarget] = useState(false);\n    const [selectedCurrencies, setSelectedCurrencies] = useState([\n        { value: \"AUD\", label: \"AUD\" },\n        { value: \"EUR\", label: \"EUR\" },\n        { value: \"GBP\", label: \"GBP\" },\n        { value: \"JPY\", label: \"JPY\" },\n        { value: \"USD\", label: \"USD\" }\n    ]);\n    const [summary, setSummary] = useState(\"\");\n    const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n    const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [isDarkMode, setIsDarkMode] = useState(true);\n    const [sidebarOpen, setSidebarOpen] = useState(false); // Sidebar state\n    const latestSummaryRef = useRef(\"\");\n    const chartRef = useRef(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await fetch(\"http://localhost:5000/xva\");\n                const result = await response.json();\n                setData(result);\n                setLoading(false);\n            } catch (error) {\n                console.error(\"Error fetching data:\", error);\n                setLoading(false);\n            }\n        };\n        fetchData();\n    }, []);\n\n    const getFilteredData = () => {\n        return data.filter((d) => {\n            const date = new Date(d.Date).getTime();\n            return date >= startDate.getTime() && date <= endDate.getTime();\n        });\n    };\n\n    useEffect(() => {\n        if (!loading && data.length > 0) {\n            const updateSummary = () => {\n                if (summary !== latestSummaryRef.current) {\n                    setSummary(latestSummaryRef.current);\n                }\n            };\n            const interval = setInterval(updateSummary, 1000);\n            return () => clearInterval(interval);\n        }\n    }, [loading, data, summary]);\n\n    const filteredData = getFilteredData();\n\n    const totalLine = {\n        name: \"Total\",\n        data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n        color: isDarkMode ? \"#007bff\" : \"#343a40\",\n        marker: { enabled: false },\n        zIndex: 1,\n        boostThreshold: 1,\n    };\n\n    const shadeData = {\n        name: \"Shaded Area\",\n        data: filteredData.map((d) => ({\n            x: new Date(d.Date).getTime(),\n            low: Math.min(d.Total, d.Target),\n            high: Math.max(d.Total, d.Target),\n        })),\n        type: \"arearange\",\n        lineWidth: 0,\n        linkedTo: \"Total\",\n        color: \"#2E8C39\",\n        fillOpacity: 0.3,\n        zIndex: 0,\n        marker: { enabled: false },\n        boostThreshold: 0,\n        boost: false,\n    };\n\n    const getData = () => {\n        const compareData = [\n            ...selectedCurrencies.map((currency) => ({\n                name: currency.value,\n                data: filteredData.map((d) => [\n                    new Date(d.Date).getTime(),\n                    d[currency.value],\n                ]),\n                color: getCurrencyColor(currency.value),\n                marker: { enabled: false },\n                boostThreshold: 1,\n            })),\n            totalLine,\n            {\n                name: \"Target\",\n                data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n                color: \"#007bff\",\n                marker: { enabled: false },\n                zIndex: 1,\n                boostThreshold: 1,\n            },\n            shadeData,\n        ];\n        return compareWithTarget ? compareData : compareData.slice(0, -1);\n    };\n\n    const getCurrencyColor = (currency) => {\n        switch (currency) {\n            case \"AUD\":\n                return \"#FFD700\";\n            case \"EUR\":\n                return \"#FF6347\";\n            case \"GBP\":\n                return \"#4682B4\";\n            case \"JPY\":\n                return \"#32CD32\";\n            case \"USD\":\n                return \"#FFA07A\";\n            case \"BRL\":\n                return \"#9400D3\";\n            case \"CAD\":\n                return \"#00FF00\";\n            case \"CHF\":\n                return \"#FF00FF\";\n            case \"CLP\":\n                return \"#00FFFF\";\n            case \"CNY\":\n                return \"#FF4500\";\n            case \"CZK\":\n                return \"#FF1493\";\n            case \"DKK\":\n                return \"#1E90FF\";\n            case \"HKD\":\n                return \"#FF69B4\";\n            case \"HUF\":\n                return \"#8A2BE2\";\n            case \"INR\":\n                return \"#00BFFF\";\n            case \"KRW\":\n                return \"#7B68EE\";\n            case \"NOK\":\n                return \"#FFD700\";\n            case \"NZD\":\n                return \"#FF6347\";\n            case \"PLN\":\n                return \"#4682B4\";\n            case \"SEK\":\n                return \"#32CD32\";\n            case \"SGD\":\n                return \"#FFA07A\";\n            case \"THB\":\n                return \"#9400D3\";\n            case \"TWD\":\n                return \"#00FF00\";\n            case \"ZAR\":\n                return \"#FF00FF\";\n            default:\n                return \"#FF4500\";\n        }\n    };\n\n    const toggleTheme = () => {\n        setIsDarkMode(!isDarkMode);\n    };\n\n    const toggleSidebar = () => {\n        setSidebarOpen(!sidebarOpen);\n    };\n\n    return (\n        <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n            <Topbar toggleSidebar={toggleSidebar} isDarkMode={isDarkMode} toggleTheme={toggleTheme} />\n            <Sidebar isOpen={sidebarOpen} toggleSidebar={toggleSidebar} />\n            <div className=\"graph-container\">\n                <h2 className=\"graph-title\">LCH Notional | Time Series</h2>\n                <div className=\"selectors-container\">\n                    <div className=\"currency-selector\">\n                        <label>Select Currencies:</label>\n                        <Selector\n                            options={[\n                                { value: \"AUD\", label: \"AUD\" },\n                                { value: \"EUR\", label: \"EUR\" },\n                                { value: \"GBP\", label: \"GBP\" },\n                                { value: \"JPY\", label: \"JPY\" },\n                                { value: \"USD\", label: \"USD\" },\n                                { value: \"BRL\", label: \"BRL\" },\n                                { value: \"CAD\", label: \"CAD\" },\n                                { value: \"CHF\", label: \"CHF\" },\n                                { value: \"CLP\", label: \"CLP\" },\n                                { value: \"CNY\", label: \"CNY\" },\n                                { value: \"CZK\", label: \"CZK\" },\n                                { value: \"DKK\", label: \"DKK\" },\n                                { value: \"HKD\", label: \"HKD\" },\n                                { value: \"HUF\", label: \"HUF\" },\n                                { value: \"INR\", label: \"INR\" },\n                                { value: \"KRW\", label: \"KRW\" },\n                                { value: \"MXN\", label: \"MXN\" },\n                                { value: \"NOK\", label: \"NOK\" },\n                                { value: \"NZD\", label: \"NZD\" },\n                                { value: \"PLN\", label: \"PLN\" },\n                                { value: \"SEK\", label: \"SEK\" },\n                                { value: \"SGD\", label: \"SGD\" },\n                                { value: \"THB\", label: \"THB\" },\n                                { value: \"TWD\", label: \"TWD\" },\n                                { value: \"ZAR\", label: \"ZAR\" },\n                            ]}\n                            selectedCurrencies={selectedCurrencies}\n                            setSelectedCurrencies={setSelectedCurrencies}\n                        />\n                    </div>\n                    <div className=\"date-picker\">\n                        <label>Select Date Range:</label>\n                        <DatePicker\n                            selected={startDate}\n                            onChange={(date) => setStartDate(date)}\n                            selectsStart\n                            startDate={startDate}\n                            endDate={endDate}\n                            className=\"date-input\"\n                        />\n                        <DatePicker\n                            selected={endDate}\n                            onChange={(date) => setEndDate(date)}\n                            selectsEnd\n                            startDate={startDate}\n                            endDate={endDate}\n                            minDate={startDate}\n                            className=\"date-input\"\n                        />\n                    </div>\n                </div>\n                <div className=\"main-panel\">\n                    <HighchartsReact\n                        className=\"chart-actual\"\n                        highcharts={Highcharts}\n                        options={{\n                            chart: {\n                                type: \"line\",\n                                zoomType: \"x\",\n                                backgroundColor: {\n                                    linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n                                    stops: isDarkMode\n                                        ? [\n                                            [0, \"#2e2e2e\"],\n                                            [1, \"#1a1a1a\"],\n                                        ]\n                                        : [\n                                            [0, \"#ffffff\"],\n                                            [1, \"#f0f0f0\"],\n                                        ],\n                                },\n                                borderRadius: 10, // Rounded corners\n                                style: {\n                                    fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n                                },\n                                plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n                                plotBorderWidth: 1,\n                                events: {\n                                    load: function () {\n                                        this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n                                    },\n                                },\n                                boost: {\n                                    useGPUTranslations: true,\n                                    usePreAllocated: true,\n                                },\n                            },\n                            title: {\n                                text: \"\",\n                                style: {\n                                    color: isDarkMode ? \"#ffffff\" : \"#000000\",\n                                    fontSize: \"22px\",\n                                    fontWeight: \"bold\",\n                                },\n                            },\n                            xAxis: {\n                                type: \"datetime\",\n                                title: {\n                                    text: \"Date\",\n                                    style: {\n                                        color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                                        fontSize: \"14px\",\n                                        fontWeight: \"bold\",\n                                    },\n                                },\n                                lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n                                tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n                                labels: {\n                                    style: {\n                                        color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                                        fontSize: \"12px\",\n                                    },\n                                },\n                            },\n                            yAxis: {\n                                title: {\n                                    text: \"Notional (USD)\",\n                                    style: {\n                                        color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                                        fontSize: \"14px\",\n                                        fontWeight: \"bold\",\n                                    },\n                                },\n                                gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n                                labels: {\n                                    style: {\n                                        color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                                        fontSize: \"12px\",\n                                    },\n                                },\n                            },\n                            legend: {\n                                layout: \"horizontal\",\n                                align: \"center\",\n                                verticalAlign: \"bottom\",\n                                itemStyle: {\n                                    color: isDarkMode ? \"#ffffff\" : \"#000000\",\n                                    fontSize: \"14px\",\n                                    fontWeight: \"bold\",\n                                },\n                                itemHoverStyle: {\n                                    color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                                },\n                                itemHiddenStyle: {\n                                    color: isDarkMode ? \"#666666\" : \"#999999\",\n                                },\n                            },\n                            tooltip: {\n                                shared: true,\n                                backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n                                borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n                                style: {\n                                    color: isDarkMode ? \"#ffffff\" : \"#000000\",\n                                },\n                                formatter: function () {\n                                    const points = this.points;\n                                    let targetValue = null;\n                                    let totalValue = null;\n\n                                    points.forEach((point) => {\n                                        if (point.series.name === \"Target\") {\n                                            targetValue = point.y;\n                                        }\n                                        if (point.series.name === \"Total\") {\n                                            totalValue = point.y;\n                                        }\n                                    });\n\n                                    if (targetValue !== null && totalValue !== null) {\n                                        const difference = (totalValue - targetValue).toFixed(2);\n                                        const totalBreakdown = selectedCurrencies\n                                            .map((currency) => {\n                                                const point = points.find((p) => p.series.name === currency.value);\n                                                return point\n                                                    ? `${currency.value}: ${point.y.toFixed(2)}`\n                                                    : `${currency.value}: N/A`;\n                                            })\n                                            .join(\"<br>\");\n\n                                        let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n                                        summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n                                        summaryHTML += `Difference: ${difference}<br><br>`;\n                                        summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n                                        latestSummaryRef.current = summaryHTML;\n\n                                        return points.reduce((s, point) => {\n                                            return (\n                                                s +\n                                                `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n                                            );\n                                        }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n                                    }\n                                    return points.reduce((s, point) => {\n                                        return (\n                                            s +\n                                            `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n                                        );\n                                    }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n                                },\n                            },\n                            series: getData(),\n                            navigation: {\n                                buttonOptions: {\n                                    enabled: true,\n                                    theme: {\n                                        fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n                                        stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n                                        style: {\n                                            color: isDarkMode ? \"#ffffff\" : \"#000000\",\n                                        },\n                                    },\n                                },\n                            },\n                            exporting: {\n                                buttons: {\n                                    contextButton: {\n                                        symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n                                        theme: {\n                                            fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n                                        },\n                                    },\n                                },\n                            },\n                        }}\n                        containerProps={{ className: \"chart-container\" }}\n                        updateArgs={[true, true, true]}\n                        ref={chartRef}\n                    />\n                    {compareWithTarget && (\n                        <div className=\"summary-box\">\n                            <div className=\"summary-content\">\n                                <span>Total: {summary.total}</span>\n                                <span>Target: {summary.target}</span>\n                                <span>Difference: {summary.difference}</span>\n                                <div className=\"summary-dropdown\">\n                                    <span className=\"dropdown-arrow\">▼</span>\n                                    <div className=\"currency-breakdown\">\n                                        {summary.currencyBreakdown}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                    <div className=\"bottom-right-buttons\">\n                        <button\n                            onClick={() => setCompareWithTarget(!compareWithTarget)}\n                            className=\"toggle-button\"\n                        >\n                            {compareWithTarget ? \"Disable Compare with Target\" : \"Enable Compare with Target\"}\n                        </button>\n                        <div className=\"download-section\">\n                            <button className=\"toggle-button\">Download</button>\n                            <div className=\"dropdown-content\">\n                                <button\n                                    onClick={() =>\n                                        chartRef.current.chart.exportChart({ type: \"image/png\" })\n                                    }\n                                >\n                                    PNG\n                                </button>\n                                <button\n                                    onClick={() =>\n                                        chartRef.current.chart.exportChart({ type: \"image/jpeg\" })\n                                    }\n                                >\n                                    JPEG\n                                </button>\n                                <button\n                                    onClick={() =>\n                                        chartRef.current.chart.exportChart({ type: \"application/pdf\" })\n                                    }\n                                >\n                                    PDF\n                                </button>\n                                <button\n                                    onClick={() =>\n                                        chartRef.current.chart.exportChart({ type: \"image/svg+xml\" })\n                                    }\n                                >\n                                    SVG\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"data-table-section\">\n                <DataTable\n                    title=\"LCH Notional | Summary Table\"\n                    columns={[\n                        { name: \"Date\", selector: (row) => row.Date, sortable: true },\n                        { name: \"Target\", selector: (row) => row.Target, sortable: true },\n                        ...selectedCurrencies.map((currency) => ({\n                            name: currency.label,\n                            selector: (row) => row[currency.value],\n                            sortable: true,\n                        })),\n                        { name: \"Total\", selector: (row) => row.Total, sortable: true },\n                    ]}\n                    data={filteredData.map((d) => {\n                        const rowData = {\n                            Date: d.Date,\n                            Target: d.Target,\n                            Total: d.Total,\n                        };\n                        selectedCurrencies.forEach((currency) => {\n                            rowData[currency.value] = d[currency.value];\n                        });\n                        return rowData;\n                    })}\n                    pagination\n                    highlightOnHover\n                    pointerOnHover\n                    customStyles={{\n                        header: {\n                            style: {\n                                fontSize: '22px',\n                                fontWeight: 'bold',\n                                color: 'var(--text-color)',\n                                backgroundColor: 'var(--control-bg-color)',\n                            },\n                        },\n                        rows: {\n                            style: {\n                                fontSize: '16px',\n                                color: 'var(--text-color)',\n                                backgroundColor: 'var(--input-bg-color)',\n                                '&:not(:last-of-type)': {\n                                    borderBottomStyle: 'solid',\n                                    borderBottomWidth: '1px',\n                                    borderBottomColor: 'var(--control-bg-color)',\n                                },\n                            },\n                        },\n                        headCells: {\n                            style: {\n                                fontSize: '18px',\n                                fontWeight: 'bold',\n                                color: 'var(--text-color)',\n                                backgroundColor: 'var(--control-bg-color)',\n                            },\n                        },\n                        cells: {\n                            style: {\n                                fontSize: '16px',\n                                color: 'var(--text-color)',\n                                backgroundColor: 'var(--input-bg-color)',\n                            },\n                        },\n                    }}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default Graph;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}