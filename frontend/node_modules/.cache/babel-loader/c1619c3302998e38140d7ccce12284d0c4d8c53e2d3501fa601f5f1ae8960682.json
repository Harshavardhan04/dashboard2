{"ast":null,"code":"var _jsxFileName = \"/Users/harshmishra/Desktop/dashboard/frontend/src/Components/Graph.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from \"react\";\n// import Highcharts from \"highcharts\";\n// import HighchartsReact from \"highcharts-react-official\";\n// import HighchartsBoost from \"highcharts/modules/boost\";\n// import HighchartsExporting from \"highcharts/modules/exporting\";\n// import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// import HighchartsMore from \"highcharts/highcharts-more\";\n// import DataTable from \"react-data-table-component\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import Topbar from \"./Topbar\";\n// import Selector from \"./Selector\";\n// import \"../Styles/Graph.css\";\n\n// HighchartsBoost(Highcharts);\n// HighchartsExporting(Highcharts);\n// HighchartsAnnotations(Highcharts);\n// HighchartsMore(Highcharts);\n\n// const Graph = () => {\n//   const [compareWithTarget, setCompareWithTarget] = useState(false);\n//   const [selectedCurrencies, setSelectedCurrencies] = useState([\n//     { value: \"AUD\", label: \"AUD\" },\n//     { value: \"EUR\", label: \"EUR\" },\n//     { value: \"GBP\", label: \"GBP\" },\n//     { value: \"JPY\", label: \"JPY\" },\n//     { value: \"USD\", label: \"USD\" }\n//   ]);\n//   const [summary, setSummary] = useState(\"\");\n//   const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n//   const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n//   const [data, setData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [isDarkMode, setIsDarkMode] = useState(true);\n//   const latestSummaryRef = useRef(\"\");\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:5000/xva\");\n//         const result = await response.json();\n//         setData(result);\n//         setLoading(false);\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         setLoading(false);\n//       }\n//     };\n//     fetchData();\n//   }, []);\n\n//   const getFilteredData = () => {\n//     return data.filter((d) => {\n//       const date = new Date(d.Date).getTime();\n//       return date >= startDate.getTime() && date <= endDate.getTime();\n//     });\n//   };\n\n//   useEffect(() => {\n//     if (!loading && data.length > 0) {\n//       const updateSummary = () => {\n//         if (summary !== latestSummaryRef.current) {\n//           setSummary(latestSummaryRef.current);\n//         }\n//       };\n//       const interval = setInterval(updateSummary, 1000);\n//       return () => clearInterval(interval);\n//     }\n//   }, [loading, data, summary]);\n\n//   const filteredData = getFilteredData();\n\n//   const totalLine = {\n//     name: \"Total\",\n//     data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n//     color: isDarkMode ? \"#007bff\" : \"#343a40\",\n//     marker: { enabled: false },\n//     zIndex: 1,\n//     boostThreshold: 1,\n//   };\n\n//   const shadeData = {\n//     name: \"Shaded Area\",\n//     data: filteredData.map((d) => ({\n//       x: new Date(d.Date).getTime(),\n//       low: Math.min(d.Total, d.Target),\n//       high: Math.max(d.Total, d.Target),\n//     })),\n//     type: \"arearange\",\n//     lineWidth: 0,\n//     linkedTo: \"Total\",\n//     color: \"#2E8C39\",\n//     fillOpacity: 0.3,\n//     zIndex: 0,\n//     marker: { enabled: false },\n//     boostThreshold: 0,\n//     boost: false,\n//   };\n\n//   const getData = () => {\n//     const compareData = [\n//       ...selectedCurrencies.map((currency) => ({\n//         name: currency.value,\n//         data: filteredData.map((d) => [\n//           new Date(d.Date).getTime(),\n//           d[currency.value],\n//         ]),\n//         color: getCurrencyColor(currency.value),\n//         marker: { enabled: false },\n//         boostThreshold: 1,\n//       })),\n//       totalLine,\n//       {\n//         name: \"Target\",\n//         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n//         color: \"#007bff\",\n//         marker: { enabled: false },\n//         zIndex: 1,\n//         boostThreshold: 1,\n//       },\n//       shadeData,\n//     ];\n//     return compareWithTarget ? compareData : compareData.slice(0, -1);\n//   };\n\n//   const getCurrencyColor = (currency) => {\n//     switch (currency) {\n//       case \"AUD\":\n//         return \"#FFD700\";\n//       case \"EUR\":\n//         return \"#FF6347\";\n//       case \"GBP\":\n//         return \"#4682B4\";\n//       case \"JPY\":\n//         return \"#32CD32\";\n//       case \"USD\":\n//         return \"#FFA07A\";\n//       case \"BRL\":\n//         return \"#9400D3\";\n//       case \"CAD\":\n//         return \"#00FF00\";\n//       case \"CHF\":\n//         return \"#FF00FF\";\n//       case \"CLP\":\n//         return \"#00FFFF\";\n//       case \"CNY\":\n//         return \"#FF4500\";\n//       case \"CZK\":\n//         return \"#FF1493\";\n//       case \"DKK\":\n//         return \"#1E90FF\";\n//       case \"HKD\":\n//         return \"#FF69B4\";\n//       case \"HUF\":\n//         return \"#8A2BE2\";\n//       case \"INR\":\n//         return \"#00BFFF\";\n//       case \"KRW\":\n//         return \"#7B68EE\";\n//       case \"NOK\":\n//         return \"#FFD700\";\n//       case \"NZD\":\n//         return \"#FF6347\";\n//       case \"PLN\":\n//         return \"#4682B4\";\n//       case \"SEK\":\n//         return \"#32CD32\";\n//       case \"SGD\":\n//         return \"#FFA07A\";\n//       case \"THB\":\n//         return \"#9400D3\";\n//       case \"TWD\":\n//         return \"#00FF00\";\n//       case \"ZAR\":\n//         return \"#FF00FF\";\n//       default:\n//         return \"#FF4500\";\n//     }\n//   };\n\n//   const toggleTheme = () => {\n//     setIsDarkMode(!isDarkMode);\n//   };\n\n//   return (\n//     <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n//       <Topbar isDarkMode={isDarkMode} toggleTheme={toggleTheme} />\n//       <div className=\"graph-container\">\n//         <h2 className=\"graph-title\">LCH Notional | Time Series</h2>\n//         <div className=\"selectors-container\">\n//           <div className=\"currency-selector\">\n//             <label>Select Currencies:</label>\n//             <Selector\n//               options={[\n//                 { value: \"AUD\", label: \"AUD\" },\n//                 { value: \"EUR\", label: \"EUR\" },\n//                 { value: \"GBP\", label: \"GBP\" },\n//                 { value: \"JPY\", label: \"JPY\" },\n//                 { value: \"USD\", label: \"USD\" },\n//                 { value: \"BRL\", label: \"BRL\" },\n//                 { value: \"CAD\", label: \"CAD\" },\n//                 { value: \"CHF\", label: \"CHF\" },\n//                 { value: \"CLP\", label: \"CLP\" },\n//                 { value: \"CNY\", label: \"CNY\" },\n//                 { value: \"CZK\", label: \"CZK\" },\n//                 { value: \"DKK\", label: \"DKK\" },\n//                 { value: \"HKD\", label: \"HKD\" },\n//                 { value: \"HUF\", label: \"HUF\" },\n//                 { value: \"INR\", label: \"INR\" },\n//                 { value: \"KRW\", label: \"KRW\" },\n//                 { value: \"MXN\", label: \"MXN\" },\n//                 { value: \"NOK\", label: \"NOK\" },\n//                 { value: \"NZD\", label: \"NZD\" },\n//                 { value: \"PLN\", label: \"PLN\" },\n//                 { value: \"SEK\", label: \"SEK\" },\n//                 { value: \"SGD\", label: \"SGD\" },\n//                 { value: \"THB\", label: \"THB\" },\n//                 { value: \"TWD\", label: \"TWD\" },\n//                 { value: \"ZAR\", label: \"ZAR\" },\n//               ]}\n//               selectedCurrencies={selectedCurrencies}\n//               setSelectedCurrencies={setSelectedCurrencies}\n//             />\n//           </div>\n//           <div className=\"date-picker\">\n//             <label>Select Date Range:</label>\n//             <DatePicker\n//               selected={startDate}\n//               onChange={(date) => setStartDate(date)}\n//               selectsStart\n//               startDate={startDate}\n//               endDate={endDate}\n//               className=\"date-input\"\n//             />\n//             <DatePicker\n//               selected={endDate}\n//               onChange={(date) => setEndDate(date)}\n//               selectsEnd\n//               startDate={startDate}\n//               endDate={endDate}\n//               minDate={startDate}\n//               className=\"date-input\"\n//             />\n//           </div>\n//         </div>\n//         <div className=\"main-panel\">\n//           <HighchartsReact\n//             className=\"chart-actual\"\n//             highcharts={Highcharts}\n//             options={{\n//               chart: {\n//                 type: \"line\",\n//                 zoomType: \"x\",\n//                 backgroundColor: {\n//                   linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n//                   stops: isDarkMode\n//                     ? [\n//                         [0, \"#2e2e2e\"],\n//                         [1, \"#1a1a1a\"],\n//                       ]\n//                     : [\n//                         [0, \"#ffffff\"],\n//                         [1, \"#f0f0f0\"],\n//                       ],\n//                 },\n//                 borderRadius: 10, // Rounded corners\n//                 style: {\n//                   fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n//                 },\n//                 plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                 plotBorderWidth: 1,\n//                 events: {\n//                   load: function () {\n//                     this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n//                   },\n//                 },\n//                 boost: {\n//                   useGPUTranslations: true,\n//                   usePreAllocated: true,\n//                 },\n//               },\n//               title: {\n//                 text: \"\",\n//                 style: {\n//                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                   fontSize: \"22px\",\n//                   fontWeight: \"bold\",\n//                 },\n//               },\n//               xAxis: {\n//                 type: \"datetime\",\n//                 title: {\n//                   text: \"Date\",\n//                   style: {\n//                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                     fontSize: \"14px\",\n//                     fontWeight: \"bold\",\n//                   },\n//                 },\n//                 lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                 tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                 labels: {\n//                   style: {\n//                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                     fontSize: \"12px\",\n//                   },\n//                 },\n//               },\n//               yAxis: {\n//                 title: {\n//                   text: \"Notional (USD)\",\n//                   style: {\n//                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                     fontSize: \"14px\",\n//                     fontWeight: \"bold\",\n//                   },\n//                 },\n//                 gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                 labels: {\n//                   style: {\n//                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                     fontSize: \"12px\",\n//                   },\n//                 },\n//               },\n//               legend: {\n//                 layout: \"horizontal\",\n//                 align: \"center\",\n//                 verticalAlign: \"bottom\",\n//                 itemStyle: {\n//                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                   fontSize: \"14px\",\n//                   fontWeight: \"bold\",\n//                 },\n//                 itemHoverStyle: {\n//                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                 },\n//                 itemHiddenStyle: {\n//                   color: isDarkMode ? \"#666666\" : \"#999999\",\n//                 },\n//               },\n//               tooltip: {\n//                 shared: true,\n//                 backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n//                 borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n//                 style: {\n//                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                 },\n//                 formatter: function () {\n//                   const points = this.points;\n//                   let targetValue = null;\n//                   let totalValue = null;\n\n//                   points.forEach((point) => {\n//                     if (point.series.name === \"Target\") {\n//                       targetValue = point.y;\n//                     }\n//                     if (point.series.name === \"Total\") {\n//                       totalValue = point.y;\n//                     }\n//                   });\n\n//                   if (targetValue !== null && totalValue !== null) {\n//                     const difference = (totalValue - targetValue).toFixed(2);\n//                     const totalBreakdown = selectedCurrencies\n//                       .map((currency) => {\n//                         const point = points.find((p) => p.series.name === currency.value);\n//                         return point\n//                           ? `${currency.value}: ${point.y.toFixed(2)}`\n//                           : `${currency.value}: N/A`;\n//                       })\n//                       .join(\"<br>\");\n\n//                     let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n//                     summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n//                     summaryHTML += `Difference: ${difference}<br><br>`;\n//                     summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n//                     latestSummaryRef.current = summaryHTML;\n\n//                     return points.reduce((s, point) => {\n//                       return (\n//                         s +\n//                         `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//                       );\n//                     }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n//                   }\n//                   return points.reduce((s, point) => {\n//                     return (\n//                       s +\n//                       `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//                     );\n//                   }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n//                 },\n//               },\n//               series: getData(),\n//               navigation: {\n//                 buttonOptions: {\n//                   enabled: true,\n//                   theme: {\n//                     fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//                     stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n//                     style: {\n//                       color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                     },\n//                   },\n//                 },\n//               },\n//               exporting: {\n//                 buttons: {\n//                   contextButton: {\n//                     symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                     theme: {\n//                       fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//                     },\n//                   },\n//                 },\n//               },\n//             }}\n//             containerProps={{ className: \"chart-container\" }}\n//             updateArgs={[true, true, true]}\n//             ref={chartRef}\n//           />\n//           {compareWithTarget && (\n//             <div className=\"summary-box\">\n//               <h3>Summary</h3>\n//               <div dangerouslySetInnerHTML={{ __html: summary }} />\n//             </div>\n//           )}\n//           <div className=\"bottom-right-buttons\">\n//             <button\n//               onClick={() => setCompareWithTarget(!compareWithTarget)}\n//               className=\"toggle-button\"\n//             >\n//               {compareWithTarget ? \"Disable Compare with Target\" : \"Enable Compare with Target\"}\n//             </button>\n//             <div className=\"download-section\">\n//               <button className=\"toggle-button\">Download</button>\n//               <div className=\"dropdown-content\">\n//                 <button\n//                   onClick={() =>\n//                     chartRef.current.chart.exportChart({ type: \"image/png\" })\n//                   }\n//                 >\n//                   PNG\n//                 </button>\n//                 <button\n//                   onClick={() =>\n//                     chartRef.current.chart.exportChart({ type: \"image/jpeg\" })\n//                   }\n//                 >\n//                   JPEG\n//                 </button>\n//                 <button\n//                   onClick={() =>\n//                     chartRef.current.chart.exportChart({ type: \"application/pdf\" })\n//                   }\n//                 >\n//                   PDF\n//                 </button>\n//                 <button\n//                   onClick={() =>\n//                     chartRef.current.chart.exportChart({ type: \"image/svg+xml\" })\n//                   }\n//                 >\n//                   SVG\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <div className=\"data-table-section\">\n//         <DataTable\n//           title=\"LCH Notional | Summary Table\"\n//           columns={[\n//             { name: \"Date\", selector: (row) => row.Date, sortable: true },\n//             { name: \"Target\", selector: (row) => row.Target, sortable: true },\n//             ...selectedCurrencies.map((currency) => ({\n//               name: currency.label,\n//               selector: (row) => row[currency.value],\n//               sortable: true,\n//             })),\n//             { name: \"Total\", selector: (row) => row.Total, sortable: true },\n//           ]}\n//           data={filteredData.map((d) => {\n//             const rowData = {\n//               Date: d.Date,\n//               Target: d.Target,\n//               Total: d.Total,\n//             };\n//             selectedCurrencies.forEach((currency) => {\n//               rowData[currency.value] = d[currency.value];\n//             });\n//             return rowData;\n//           })}\n//           pagination\n//           highlightOnHover\n//           pointerOnHover\n//           customStyles={{\n//             header: {\n//               style: {\n//                 fontSize: '22px',\n//                 fontWeight: 'bold',\n//                 color: 'var(--text-color)',\n//                 backgroundColor: 'var(--control-bg-color)',\n//               },\n//             },\n//             rows: {\n//               style: {\n//                 fontSize: '16px',\n//                 color: 'var(--text-color)',\n//                 backgroundColor: 'var(--input-bg-color)',\n//                 '&:not(:last-of-type)': {\n//                   borderBottomStyle: 'solid',\n//                   borderBottomWidth: '1px',\n//                   borderBottomColor: 'var(--control-bg-color)',\n//                 },\n//               },\n//             },\n//             headCells: {\n//               style: {\n//                 fontSize: '18px',\n//                 fontWeight: 'bold',\n//                 color: 'var(--text-color)',\n//                 backgroundColor: 'var(--control-bg-color)',\n//               },\n//             },\n//             cells: {\n//               style: {\n//                 fontSize: '16px',\n//                 color: 'var(--text-color)',\n//                 backgroundColor: 'var(--input-bg-color)',\n//               },\n//             },\n//           }}\n//         />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Graph;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport HighchartsBoost from \"highcharts/modules/boost\";\nimport HighchartsExporting from \"highcharts/modules/exporting\";\nimport HighchartsAnnotations from \"highcharts/modules/annotations\";\nimport HighchartsMore from \"highcharts/highcharts-more\";\nimport DataTable from \"react-data-table-component\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Topbar from \"./Topbar\";\nimport Selector from \"./Selector\";\nimport \"../Styles/Graph.css\";\nimport Sidebar from \"./Sidebar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nHighchartsBoost(Highcharts);\nHighchartsExporting(Highcharts);\nHighchartsAnnotations(Highcharts);\nHighchartsMore(Highcharts);\nconst Graph = () => {\n  _s();\n  var _summary$split$, _summary$split$2, _summary$split$3;\n  const [compareWithTarget, setCompareWithTarget] = useState(false);\n  const [selectedCurrencies, setSelectedCurrencies] = useState([{\n    value: \"AUD\",\n    label: \"AUD\"\n  }, {\n    value: \"EUR\",\n    label: \"EUR\"\n  }, {\n    value: \"GBP\",\n    label: \"GBP\"\n  }, {\n    value: \"JPY\",\n    label: \"JPY\"\n  }, {\n    value: \"USD\",\n    label: \"USD\"\n  }]);\n  const [summary, setSummary] = useState(\"\");\n  const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n  const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [showBreakdown, setShowBreakdown] = useState(false);\n  const latestSummaryRef = useRef(\"\");\n  const chartRef = useRef(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/xva\");\n        const result = await response.json();\n        setData(result);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  const getFilteredData = () => {\n    return data.filter(d => {\n      const date = new Date(d.Date).getTime();\n      return date >= startDate.getTime() && date <= endDate.getTime();\n    });\n  };\n  useEffect(() => {\n    if (!loading && data.length > 0) {\n      const updateSummary = () => {\n        if (summary !== latestSummaryRef.current) {\n          setSummary(latestSummaryRef.current);\n        }\n      };\n      const interval = setInterval(updateSummary, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [loading, data, summary]);\n  const filteredData = getFilteredData();\n  const totalLine = {\n    name: \"Total\",\n    data: filteredData.map(d => [new Date(d.Date).getTime(), d.Total]),\n    color: isDarkMode ? \"#007bff\" : \"#343a40\",\n    marker: {\n      enabled: false\n    },\n    zIndex: 1,\n    boostThreshold: 1\n  };\n  const shadeData = {\n    name: \"Shaded Area\",\n    data: filteredData.map(d => ({\n      x: new Date(d.Date).getTime(),\n      low: Math.min(d.Total, d.Target),\n      high: Math.max(d.Total, d.Target)\n    })),\n    type: \"arearange\",\n    lineWidth: 0,\n    linkedTo: \"Total\",\n    color: \"#2E8C39\",\n    fillOpacity: 0.3,\n    zIndex: 0,\n    marker: {\n      enabled: false\n    },\n    boostThreshold: 0,\n    boost: false\n  };\n  const getData = () => {\n    const compareData = [...selectedCurrencies.map(currency => ({\n      name: currency.value,\n      data: filteredData.map(d => [new Date(d.Date).getTime(), d[currency.value]]),\n      color: getCurrencyColor(currency.value),\n      marker: {\n        enabled: false\n      },\n      boostThreshold: 1\n    })), totalLine, {\n      name: \"Target\",\n      data: filteredData.map(d => [new Date(d.Date).getTime(), d.Target]),\n      color: \"#007bff\",\n      marker: {\n        enabled: false\n      },\n      zIndex: 1,\n      boostThreshold: 1\n    }, shadeData];\n    return compareWithTarget ? compareData : compareData.slice(0, -1);\n  };\n  const getCurrencyColor = currency => {\n    switch (currency) {\n      case \"AUD\":\n        return \"#FFD700\";\n      case \"EUR\":\n        return \"#FF6347\";\n      case \"GBP\":\n        return \"#4682B4\";\n      case \"JPY\":\n        return \"#32CD32\";\n      case \"USD\":\n        return \"#FFA07A\";\n      case \"BRL\":\n        return \"#9400D3\";\n      case \"CAD\":\n        return \"#00FF00\";\n      case \"CHF\":\n        return \"#FF00FF\";\n      case \"CLP\":\n        return \"#00FFFF\";\n      case \"CNY\":\n        return \"#FF4500\";\n      case \"CZK\":\n        return \"#FF1493\";\n      case \"DKK\":\n        return \"#1E90FF\";\n      case \"HKD\":\n        return \"#FF69B4\";\n      case \"HUF\":\n        return \"#8A2BE2\";\n      case \"INR\":\n        return \"#00BFFF\";\n      case \"KRW\":\n        return \"#7B68EE\";\n      case \"NOK\":\n        return \"#FFD700\";\n      case \"NZD\":\n        return \"#FF6347\";\n      case \"PLN\":\n        return \"#4682B4\";\n      case \"SEK\":\n        return \"#32CD32\";\n      case \"SGD\":\n        return \"#FFA07A\";\n      case \"THB\":\n        return \"#9400D3\";\n      case \"TWD\":\n        return \"#00FF00\";\n      case \"ZAR\":\n        return \"#FF00FF\";\n      default:\n        return \"#FF4500\";\n    }\n  };\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 736,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`,\n      children: [/*#__PURE__*/_jsxDEV(Topbar, {\n        isDarkMode: isDarkMode,\n        toggleTheme: toggleTheme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 739,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"graph-title\",\n          children: \"LCH Notional | Time Series\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"selectors-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"currency-selector\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Select Currencies:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 744,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Selector, {\n              options: [{\n                value: \"AUD\",\n                label: \"AUD\"\n              }, {\n                value: \"EUR\",\n                label: \"EUR\"\n              }, {\n                value: \"GBP\",\n                label: \"GBP\"\n              }, {\n                value: \"JPY\",\n                label: \"JPY\"\n              }, {\n                value: \"USD\",\n                label: \"USD\"\n              }, {\n                value: \"BRL\",\n                label: \"BRL\"\n              }, {\n                value: \"CAD\",\n                label: \"CAD\"\n              }, {\n                value: \"CHF\",\n                label: \"CHF\"\n              }, {\n                value: \"CLP\",\n                label: \"CLP\"\n              }, {\n                value: \"CNY\",\n                label: \"CNY\"\n              }, {\n                value: \"CZK\",\n                label: \"CZK\"\n              }, {\n                value: \"DKK\",\n                label: \"DKK\"\n              }, {\n                value: \"HKD\",\n                label: \"HKD\"\n              }, {\n                value: \"HUF\",\n                label: \"HUF\"\n              }, {\n                value: \"INR\",\n                label: \"INR\"\n              }, {\n                value: \"KRW\",\n                label: \"KRW\"\n              }, {\n                value: \"MXN\",\n                label: \"MXN\"\n              }, {\n                value: \"NOK\",\n                label: \"NOK\"\n              }, {\n                value: \"NZD\",\n                label: \"NZD\"\n              }, {\n                value: \"PLN\",\n                label: \"PLN\"\n              }, {\n                value: \"SEK\",\n                label: \"SEK\"\n              }, {\n                value: \"SGD\",\n                label: \"SGD\"\n              }, {\n                value: \"THB\",\n                label: \"THB\"\n              }, {\n                value: \"TWD\",\n                label: \"TWD\"\n              }, {\n                value: \"ZAR\",\n                label: \"ZAR\"\n              }],\n              selectedCurrencies: selectedCurrencies,\n              setSelectedCurrencies: setSelectedCurrencies\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 745,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 743,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"date-picker\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Select Date Range:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 778,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n              selected: startDate,\n              onChange: date => setStartDate(date),\n              selectsStart: true,\n              startDate: startDate,\n              endDate: endDate,\n              className: \"date-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 779,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n              selected: endDate,\n              onChange: date => setEndDate(date),\n              selectsEnd: true,\n              startDate: startDate,\n              endDate: endDate,\n              minDate: startDate,\n              className: \"date-input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 787,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 777,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 742,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"main-panel\",\n          children: [/*#__PURE__*/_jsxDEV(HighchartsReact, {\n            className: \"chart-actual\",\n            highcharts: Highcharts,\n            options: {\n              chart: {\n                type: \"line\",\n                zoomType: \"x\",\n                backgroundColor: {\n                  linearGradient: {\n                    x1: 0,\n                    y1: 0,\n                    x2: 1,\n                    y2: 1\n                  },\n                  stops: isDarkMode ? [[0, \"#2e2e2e\"], [1, \"#1a1a1a\"]] : [[0, \"#ffffff\"], [1, \"#f0f0f0\"]]\n                },\n                borderRadius: 10,\n                // Rounded corners\n                style: {\n                  fontFamily: \"Helvetica, Arial, sans-serif\" // Font style for the chart\n                },\n                plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n                plotBorderWidth: 1,\n                events: {\n                  load: function () {\n                    this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n                  }\n                },\n                boost: {\n                  useGPUTranslations: true,\n                  usePreAllocated: true\n                }\n              },\n              title: {\n                text: \"\",\n                style: {\n                  color: isDarkMode ? \"#ffffff\" : \"#000000\",\n                  fontSize: \"22px\",\n                  fontWeight: \"bold\"\n                }\n              },\n              xAxis: {\n                type: \"datetime\",\n                title: {\n                  text: \"Date\",\n                  style: {\n                    color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                    fontSize: \"14px\",\n                    fontWeight: \"bold\"\n                  }\n                },\n                lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n                tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n                labels: {\n                  style: {\n                    color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                    fontSize: \"12px\"\n                  }\n                }\n              },\n              yAxis: {\n                title: {\n                  text: \"Notional (USD)\",\n                  style: {\n                    color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                    fontSize: \"14px\",\n                    fontWeight: \"bold\"\n                  }\n                },\n                gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n                labels: {\n                  style: {\n                    color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                    fontSize: \"12px\"\n                  }\n                }\n              },\n              legend: {\n                layout: \"horizontal\",\n                align: \"center\",\n                verticalAlign: \"bottom\",\n                itemStyle: {\n                  color: isDarkMode ? \"#ffffff\" : \"#000000\",\n                  fontSize: \"14px\",\n                  fontWeight: \"bold\"\n                },\n                itemHoverStyle: {\n                  color: isDarkMode ? \"#cccccc\" : \"#000000\"\n                },\n                itemHiddenStyle: {\n                  color: isDarkMode ? \"#666666\" : \"#999999\"\n                }\n              },\n              tooltip: {\n                shared: true,\n                backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n                borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n                style: {\n                  color: isDarkMode ? \"#ffffff\" : \"#000000\"\n                },\n                formatter: function () {\n                  const points = this.points;\n                  let targetValue = null;\n                  let totalValue = null;\n                  points.forEach(point => {\n                    if (point.series.name === \"Target\") {\n                      targetValue = point.y;\n                    }\n                    if (point.series.name === \"Total\") {\n                      totalValue = point.y;\n                    }\n                  });\n                  if (targetValue !== null && totalValue !== null) {\n                    const difference = (totalValue - targetValue).toFixed(2);\n                    const totalBreakdown = selectedCurrencies.map(currency => {\n                      const point = points.find(p => p.series.name === currency.value);\n                      return point ? `${currency.value}: ${point.y.toFixed(2)}` : `${currency.value}: N/A`;\n                    }).join(\"<br>\");\n                    let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n                    summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n                    summaryHTML += `Difference: ${difference}<br><br>`;\n                    summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n                    latestSummaryRef.current = summaryHTML;\n                    return points.reduce((s, point) => {\n                      return s + `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`;\n                    }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n                  }\n                  return points.reduce((s, point) => {\n                    return s + `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`;\n                  }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n                }\n              },\n              series: getData(),\n              navigation: {\n                buttonOptions: {\n                  enabled: true,\n                  theme: {\n                    fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n                    stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n                    style: {\n                      color: isDarkMode ? \"#ffffff\" : \"#000000\"\n                    }\n                  }\n                }\n              },\n              exporting: {\n                buttons: {\n                  contextButton: {\n                    symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n                    theme: {\n                      fill: isDarkMode ? \"#444444\" : \"#f0f0f0\"\n                    }\n                  }\n                }\n              }\n            },\n            containerProps: {\n              className: \"chart-container\"\n            },\n            updateArgs: [true, true, true],\n            ref: chartRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 799,\n            columnNumber: 11\n          }, this), compareWithTarget && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"summary-box\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Total: \", parseFloat((_summary$split$ = summary.split('Total: ')[1]) === null || _summary$split$ === void 0 ? void 0 : _summary$split$.split('<br>')[0])]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 979,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Target: \", parseFloat((_summary$split$2 = summary.split('Target: ')[1]) === null || _summary$split$2 === void 0 ? void 0 : _summary$split$2.split('<br>')[0])]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 980,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [\"Difference: \", parseFloat((_summary$split$3 = summary.split('Difference: ')[1]) === null || _summary$split$3 === void 0 ? void 0 : _summary$split$3.split('<br>')[0])]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 981,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"dropdown-arrow\",\n                onClick: () => setShowBreakdown(!showBreakdown),\n                title: \"Show currency breakdown\",\n                children: \"\\u25BC\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 982,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 978,\n              columnNumber: 15\n            }, this), showBreakdown && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"currency-breakdown\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                dangerouslySetInnerHTML: {\n                  __html: summary.split('<br><br>')[1]\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 992,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 991,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 977,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bottom-right-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setCompareWithTarget(!compareWithTarget),\n              className: \"toggle-button\",\n              children: compareWithTarget ? \"Disable Compare with Target\" : \"Enable Compare with Target\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 998,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"download-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"toggle-button\",\n                children: \"Download\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1005,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"dropdown-content\",\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => chartRef.current.chart.exportChart({\n                    type: \"image/png\"\n                  }),\n                  children: \"PNG\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1007,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => chartRef.current.chart.exportChart({\n                    type: \"image/jpeg\"\n                  }),\n                  children: \"JPEG\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1014,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => chartRef.current.chart.exportChart({\n                    type: \"application/pdf\"\n                  }),\n                  children: \"PDF\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1021,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => chartRef.current.chart.exportChart({\n                    type: \"image/svg+xml\"\n                  }),\n                  children: \"SVG\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1028,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1006,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1004,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 997,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 798,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 740,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"data-table-section\",\n        children: /*#__PURE__*/_jsxDEV(DataTable, {\n          title: \"LCH Notional | Summary Table\",\n          columns: [{\n            name: \"Date\",\n            selector: row => row.Date,\n            sortable: true\n          }, {\n            name: \"Target\",\n            selector: row => row.Target,\n            sortable: true\n          }, ...selectedCurrencies.map(currency => ({\n            name: currency.label,\n            selector: row => row[currency.value],\n            sortable: true\n          })), {\n            name: \"Total\",\n            selector: row => row.Total,\n            sortable: true\n          }],\n          data: filteredData.map(d => {\n            const rowData = {\n              Date: d.Date,\n              Target: d.Target,\n              Total: d.Total\n            };\n            selectedCurrencies.forEach(currency => {\n              rowData[currency.value] = d[currency.value];\n            });\n            return rowData;\n          }),\n          pagination: true,\n          highlightOnHover: true,\n          pointerOnHover: true,\n          customStyles: {\n            header: {\n              style: {\n                fontSize: '22px',\n                fontWeight: 'bold',\n                color: 'var(--text-color)',\n                backgroundColor: 'var(--control-bg-color)'\n              }\n            },\n            rows: {\n              style: {\n                fontSize: '16px',\n                color: 'var(--text-color)',\n                backgroundColor: 'var(--input-bg-color)',\n                '&:not(:last-of-type)': {\n                  borderBottomStyle: 'solid',\n                  borderBottomWidth: '1px',\n                  borderBottomColor: 'var(--control-bg-color)'\n                }\n              }\n            },\n            headCells: {\n              style: {\n                fontSize: '18px',\n                fontWeight: 'bold',\n                color: 'var(--text-color)',\n                backgroundColor: 'var(--control-bg-color)'\n              }\n            },\n            cells: {\n              style: {\n                fontSize: '16px',\n                color: 'var(--text-color)',\n                backgroundColor: 'var(--input-bg-color)'\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1041,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1040,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 738,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 735,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"SZ/99+3BbYoDfRmvQ7/Gggh5yQY=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Highcharts","HighchartsReact","HighchartsBoost","HighchartsExporting","HighchartsAnnotations","HighchartsMore","DataTable","DatePicker","Topbar","Selector","Sidebar","jsxDEV","_jsxDEV","Graph","_s","_summary$split$","_summary$split$2","_summary$split$3","compareWithTarget","setCompareWithTarget","selectedCurrencies","setSelectedCurrencies","value","label","summary","setSummary","startDate","setStartDate","Date","endDate","setEndDate","data","setData","loading","setLoading","isDarkMode","setIsDarkMode","showBreakdown","setShowBreakdown","latestSummaryRef","chartRef","fetchData","response","fetch","result","json","error","console","getFilteredData","filter","d","date","getTime","length","updateSummary","current","interval","setInterval","clearInterval","filteredData","totalLine","name","map","Total","color","marker","enabled","zIndex","boostThreshold","shadeData","x","low","Math","min","Target","high","max","type","lineWidth","linkedTo","fillOpacity","boost","getData","compareData","currency","getCurrencyColor","slice","toggleTheme","children","fileName","_jsxFileName","lineNumber","columnNumber","className","options","selected","onChange","selectsStart","selectsEnd","minDate","highcharts","chart","zoomType","backgroundColor","linearGradient","x1","y1","x2","y2","stops","borderRadius","style","fontFamily","plotBorderColor","plotBorderWidth","events","load","xAxis","setExtremes","useGPUTranslations","usePreAllocated","title","text","fontSize","fontWeight","lineColor","tickColor","labels","yAxis","gridLineColor","legend","layout","align","verticalAlign","itemStyle","itemHoverStyle","itemHiddenStyle","tooltip","shared","borderColor","formatter","points","targetValue","totalValue","forEach","point","series","y","difference","toFixed","totalBreakdown","find","p","join","summaryHTML","reduce","s","dateFormat","navigation","buttonOptions","theme","fill","stroke","exporting","buttons","contextButton","symbolStroke","containerProps","updateArgs","ref","parseFloat","split","onClick","dangerouslySetInnerHTML","__html","exportChart","columns","selector","row","sortable","rowData","pagination","highlightOnHover","pointerOnHover","customStyles","header","rows","borderBottomStyle","borderBottomWidth","borderBottomColor","headCells","cells","_c","$RefreshReg$"],"sources":["/Users/harshmishra/Desktop/dashboard/frontend/src/Components/Graph.jsx"],"sourcesContent":["// import React, { useState, useEffect, useRef } from \"react\";\n// import Highcharts from \"highcharts\";\n// import HighchartsReact from \"highcharts-react-official\";\n// import HighchartsBoost from \"highcharts/modules/boost\";\n// import HighchartsExporting from \"highcharts/modules/exporting\";\n// import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// import HighchartsMore from \"highcharts/highcharts-more\";\n// import DataTable from \"react-data-table-component\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import Topbar from \"./Topbar\";\n// import Selector from \"./Selector\";\n// import \"../Styles/Graph.css\";\n\n// HighchartsBoost(Highcharts);\n// HighchartsExporting(Highcharts);\n// HighchartsAnnotations(Highcharts);\n// HighchartsMore(Highcharts);\n\n// const Graph = () => {\n//   const [compareWithTarget, setCompareWithTarget] = useState(false);\n//   const [selectedCurrencies, setSelectedCurrencies] = useState([\n//     { value: \"AUD\", label: \"AUD\" },\n//     { value: \"EUR\", label: \"EUR\" },\n//     { value: \"GBP\", label: \"GBP\" },\n//     { value: \"JPY\", label: \"JPY\" },\n//     { value: \"USD\", label: \"USD\" }\n//   ]);\n//   const [summary, setSummary] = useState(\"\");\n//   const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n//   const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n//   const [data, setData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [isDarkMode, setIsDarkMode] = useState(true);\n//   const latestSummaryRef = useRef(\"\");\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:5000/xva\");\n//         const result = await response.json();\n//         setData(result);\n//         setLoading(false);\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         setLoading(false);\n//       }\n//     };\n//     fetchData();\n//   }, []);\n\n//   const getFilteredData = () => {\n//     return data.filter((d) => {\n//       const date = new Date(d.Date).getTime();\n//       return date >= startDate.getTime() && date <= endDate.getTime();\n//     });\n//   };\n\n//   useEffect(() => {\n//     if (!loading && data.length > 0) {\n//       const updateSummary = () => {\n//         if (summary !== latestSummaryRef.current) {\n//           setSummary(latestSummaryRef.current);\n//         }\n//       };\n//       const interval = setInterval(updateSummary, 1000);\n//       return () => clearInterval(interval);\n//     }\n//   }, [loading, data, summary]);\n\n//   const filteredData = getFilteredData();\n\n//   const totalLine = {\n//     name: \"Total\",\n//     data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n//     color: isDarkMode ? \"#007bff\" : \"#343a40\",\n//     marker: { enabled: false },\n//     zIndex: 1,\n//     boostThreshold: 1,\n//   };\n\n//   const shadeData = {\n//     name: \"Shaded Area\",\n//     data: filteredData.map((d) => ({\n//       x: new Date(d.Date).getTime(),\n//       low: Math.min(d.Total, d.Target),\n//       high: Math.max(d.Total, d.Target),\n//     })),\n//     type: \"arearange\",\n//     lineWidth: 0,\n//     linkedTo: \"Total\",\n//     color: \"#2E8C39\",\n//     fillOpacity: 0.3,\n//     zIndex: 0,\n//     marker: { enabled: false },\n//     boostThreshold: 0,\n//     boost: false,\n//   };\n\n//   const getData = () => {\n//     const compareData = [\n//       ...selectedCurrencies.map((currency) => ({\n//         name: currency.value,\n//         data: filteredData.map((d) => [\n//           new Date(d.Date).getTime(),\n//           d[currency.value],\n//         ]),\n//         color: getCurrencyColor(currency.value),\n//         marker: { enabled: false },\n//         boostThreshold: 1,\n//       })),\n//       totalLine,\n//       {\n//         name: \"Target\",\n//         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n//         color: \"#007bff\",\n//         marker: { enabled: false },\n//         zIndex: 1,\n//         boostThreshold: 1,\n//       },\n//       shadeData,\n//     ];\n//     return compareWithTarget ? compareData : compareData.slice(0, -1);\n//   };\n\n//   const getCurrencyColor = (currency) => {\n//     switch (currency) {\n//       case \"AUD\":\n//         return \"#FFD700\";\n//       case \"EUR\":\n//         return \"#FF6347\";\n//       case \"GBP\":\n//         return \"#4682B4\";\n//       case \"JPY\":\n//         return \"#32CD32\";\n//       case \"USD\":\n//         return \"#FFA07A\";\n//       case \"BRL\":\n//         return \"#9400D3\";\n//       case \"CAD\":\n//         return \"#00FF00\";\n//       case \"CHF\":\n//         return \"#FF00FF\";\n//       case \"CLP\":\n//         return \"#00FFFF\";\n//       case \"CNY\":\n//         return \"#FF4500\";\n//       case \"CZK\":\n//         return \"#FF1493\";\n//       case \"DKK\":\n//         return \"#1E90FF\";\n//       case \"HKD\":\n//         return \"#FF69B4\";\n//       case \"HUF\":\n//         return \"#8A2BE2\";\n//       case \"INR\":\n//         return \"#00BFFF\";\n//       case \"KRW\":\n//         return \"#7B68EE\";\n//       case \"NOK\":\n//         return \"#FFD700\";\n//       case \"NZD\":\n//         return \"#FF6347\";\n//       case \"PLN\":\n//         return \"#4682B4\";\n//       case \"SEK\":\n//         return \"#32CD32\";\n//       case \"SGD\":\n//         return \"#FFA07A\";\n//       case \"THB\":\n//         return \"#9400D3\";\n//       case \"TWD\":\n//         return \"#00FF00\";\n//       case \"ZAR\":\n//         return \"#FF00FF\";\n//       default:\n//         return \"#FF4500\";\n//     }\n//   };\n\n//   const toggleTheme = () => {\n//     setIsDarkMode(!isDarkMode);\n//   };\n\n//   return (\n//     <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n//       <Topbar isDarkMode={isDarkMode} toggleTheme={toggleTheme} />\n//       <div className=\"graph-container\">\n//         <h2 className=\"graph-title\">LCH Notional | Time Series</h2>\n//         <div className=\"selectors-container\">\n//           <div className=\"currency-selector\">\n//             <label>Select Currencies:</label>\n//             <Selector\n//               options={[\n//                 { value: \"AUD\", label: \"AUD\" },\n//                 { value: \"EUR\", label: \"EUR\" },\n//                 { value: \"GBP\", label: \"GBP\" },\n//                 { value: \"JPY\", label: \"JPY\" },\n//                 { value: \"USD\", label: \"USD\" },\n//                 { value: \"BRL\", label: \"BRL\" },\n//                 { value: \"CAD\", label: \"CAD\" },\n//                 { value: \"CHF\", label: \"CHF\" },\n//                 { value: \"CLP\", label: \"CLP\" },\n//                 { value: \"CNY\", label: \"CNY\" },\n//                 { value: \"CZK\", label: \"CZK\" },\n//                 { value: \"DKK\", label: \"DKK\" },\n//                 { value: \"HKD\", label: \"HKD\" },\n//                 { value: \"HUF\", label: \"HUF\" },\n//                 { value: \"INR\", label: \"INR\" },\n//                 { value: \"KRW\", label: \"KRW\" },\n//                 { value: \"MXN\", label: \"MXN\" },\n//                 { value: \"NOK\", label: \"NOK\" },\n//                 { value: \"NZD\", label: \"NZD\" },\n//                 { value: \"PLN\", label: \"PLN\" },\n//                 { value: \"SEK\", label: \"SEK\" },\n//                 { value: \"SGD\", label: \"SGD\" },\n//                 { value: \"THB\", label: \"THB\" },\n//                 { value: \"TWD\", label: \"TWD\" },\n//                 { value: \"ZAR\", label: \"ZAR\" },\n//               ]}\n//               selectedCurrencies={selectedCurrencies}\n//               setSelectedCurrencies={setSelectedCurrencies}\n//             />\n//           </div>\n//           <div className=\"date-picker\">\n//             <label>Select Date Range:</label>\n//             <DatePicker\n//               selected={startDate}\n//               onChange={(date) => setStartDate(date)}\n//               selectsStart\n//               startDate={startDate}\n//               endDate={endDate}\n//               className=\"date-input\"\n//             />\n//             <DatePicker\n//               selected={endDate}\n//               onChange={(date) => setEndDate(date)}\n//               selectsEnd\n//               startDate={startDate}\n//               endDate={endDate}\n//               minDate={startDate}\n//               className=\"date-input\"\n//             />\n//           </div>\n//         </div>\n//         <div className=\"main-panel\">\n//           <HighchartsReact\n//             className=\"chart-actual\"\n//             highcharts={Highcharts}\n//             options={{\n//               chart: {\n//                 type: \"line\",\n//                 zoomType: \"x\",\n//                 backgroundColor: {\n//                   linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n//                   stops: isDarkMode\n//                     ? [\n//                         [0, \"#2e2e2e\"],\n//                         [1, \"#1a1a1a\"],\n//                       ]\n//                     : [\n//                         [0, \"#ffffff\"],\n//                         [1, \"#f0f0f0\"],\n//                       ],\n//                 },\n//                 borderRadius: 10, // Rounded corners\n//                 style: {\n//                   fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n//                 },\n//                 plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                 plotBorderWidth: 1,\n//                 events: {\n//                   load: function () {\n//                     this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n//                   },\n//                 },\n//                 boost: {\n//                   useGPUTranslations: true,\n//                   usePreAllocated: true,\n//                 },\n//               },\n//               title: {\n//                 text: \"\",\n//                 style: {\n//                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                   fontSize: \"22px\",\n//                   fontWeight: \"bold\",\n//                 },\n//               },\n//               xAxis: {\n//                 type: \"datetime\",\n//                 title: {\n//                   text: \"Date\",\n//                   style: {\n//                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                     fontSize: \"14px\",\n//                     fontWeight: \"bold\",\n//                   },\n//                 },\n//                 lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                 tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                 labels: {\n//                   style: {\n//                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                     fontSize: \"12px\",\n//                   },\n//                 },\n//               },\n//               yAxis: {\n//                 title: {\n//                   text: \"Notional (USD)\",\n//                   style: {\n//                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                     fontSize: \"14px\",\n//                     fontWeight: \"bold\",\n//                   },\n//                 },\n//                 gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                 labels: {\n//                   style: {\n//                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                     fontSize: \"12px\",\n//                   },\n//                 },\n//               },\n//               legend: {\n//                 layout: \"horizontal\",\n//                 align: \"center\",\n//                 verticalAlign: \"bottom\",\n//                 itemStyle: {\n//                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                   fontSize: \"14px\",\n//                   fontWeight: \"bold\",\n//                 },\n//                 itemHoverStyle: {\n//                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                 },\n//                 itemHiddenStyle: {\n//                   color: isDarkMode ? \"#666666\" : \"#999999\",\n//                 },\n//               },\n//               tooltip: {\n//                 shared: true,\n//                 backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n//                 borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n//                 style: {\n//                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                 },\n//                 formatter: function () {\n//                   const points = this.points;\n//                   let targetValue = null;\n//                   let totalValue = null;\n\n//                   points.forEach((point) => {\n//                     if (point.series.name === \"Target\") {\n//                       targetValue = point.y;\n//                     }\n//                     if (point.series.name === \"Total\") {\n//                       totalValue = point.y;\n//                     }\n//                   });\n\n//                   if (targetValue !== null && totalValue !== null) {\n//                     const difference = (totalValue - targetValue).toFixed(2);\n//                     const totalBreakdown = selectedCurrencies\n//                       .map((currency) => {\n//                         const point = points.find((p) => p.series.name === currency.value);\n//                         return point\n//                           ? `${currency.value}: ${point.y.toFixed(2)}`\n//                           : `${currency.value}: N/A`;\n//                       })\n//                       .join(\"<br>\");\n\n//                     let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n//                     summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n//                     summaryHTML += `Difference: ${difference}<br><br>`;\n//                     summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n//                     latestSummaryRef.current = summaryHTML;\n\n//                     return points.reduce((s, point) => {\n//                       return (\n//                         s +\n//                         `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//                       );\n//                     }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n//                   }\n//                   return points.reduce((s, point) => {\n//                     return (\n//                       s +\n//                       `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//                     );\n//                   }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n//                 },\n//               },\n//               series: getData(),\n//               navigation: {\n//                 buttonOptions: {\n//                   enabled: true,\n//                   theme: {\n//                     fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//                     stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n//                     style: {\n//                       color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                     },\n//                   },\n//                 },\n//               },\n//               exporting: {\n//                 buttons: {\n//                   contextButton: {\n//                     symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                     theme: {\n//                       fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//                     },\n//                   },\n//                 },\n//               },\n//             }}\n//             containerProps={{ className: \"chart-container\" }}\n//             updateArgs={[true, true, true]}\n//             ref={chartRef}\n//           />\n//           {compareWithTarget && (\n//             <div className=\"summary-box\">\n//               <h3>Summary</h3>\n//               <div dangerouslySetInnerHTML={{ __html: summary }} />\n//             </div>\n//           )}\n//           <div className=\"bottom-right-buttons\">\n//             <button\n//               onClick={() => setCompareWithTarget(!compareWithTarget)}\n//               className=\"toggle-button\"\n//             >\n//               {compareWithTarget ? \"Disable Compare with Target\" : \"Enable Compare with Target\"}\n//             </button>\n//             <div className=\"download-section\">\n//               <button className=\"toggle-button\">Download</button>\n//               <div className=\"dropdown-content\">\n//                 <button\n//                   onClick={() =>\n//                     chartRef.current.chart.exportChart({ type: \"image/png\" })\n//                   }\n//                 >\n//                   PNG\n//                 </button>\n//                 <button\n//                   onClick={() =>\n//                     chartRef.current.chart.exportChart({ type: \"image/jpeg\" })\n//                   }\n//                 >\n//                   JPEG\n//                 </button>\n//                 <button\n//                   onClick={() =>\n//                     chartRef.current.chart.exportChart({ type: \"application/pdf\" })\n//                   }\n//                 >\n//                   PDF\n//                 </button>\n//                 <button\n//                   onClick={() =>\n//                     chartRef.current.chart.exportChart({ type: \"image/svg+xml\" })\n//                   }\n//                 >\n//                   SVG\n//                 </button>\n//               </div>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//       <div className=\"data-table-section\">\n//         <DataTable\n//           title=\"LCH Notional | Summary Table\"\n//           columns={[\n//             { name: \"Date\", selector: (row) => row.Date, sortable: true },\n//             { name: \"Target\", selector: (row) => row.Target, sortable: true },\n//             ...selectedCurrencies.map((currency) => ({\n//               name: currency.label,\n//               selector: (row) => row[currency.value],\n//               sortable: true,\n//             })),\n//             { name: \"Total\", selector: (row) => row.Total, sortable: true },\n//           ]}\n//           data={filteredData.map((d) => {\n//             const rowData = {\n//               Date: d.Date,\n//               Target: d.Target,\n//               Total: d.Total,\n//             };\n//             selectedCurrencies.forEach((currency) => {\n//               rowData[currency.value] = d[currency.value];\n//             });\n//             return rowData;\n//           })}\n//           pagination\n//           highlightOnHover\n//           pointerOnHover\n//           customStyles={{\n//             header: {\n//               style: {\n//                 fontSize: '22px',\n//                 fontWeight: 'bold',\n//                 color: 'var(--text-color)',\n//                 backgroundColor: 'var(--control-bg-color)',\n//               },\n//             },\n//             rows: {\n//               style: {\n//                 fontSize: '16px',\n//                 color: 'var(--text-color)',\n//                 backgroundColor: 'var(--input-bg-color)',\n//                 '&:not(:last-of-type)': {\n//                   borderBottomStyle: 'solid',\n//                   borderBottomWidth: '1px',\n//                   borderBottomColor: 'var(--control-bg-color)',\n//                 },\n//               },\n//             },\n//             headCells: {\n//               style: {\n//                 fontSize: '18px',\n//                 fontWeight: 'bold',\n//                 color: 'var(--text-color)',\n//                 backgroundColor: 'var(--control-bg-color)',\n//               },\n//             },\n//             cells: {\n//               style: {\n//                 fontSize: '16px',\n//                 color: 'var(--text-color)',\n//                 backgroundColor: 'var(--input-bg-color)',\n//               },\n//             },\n//           }}\n//         />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Graph;\n\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport HighchartsBoost from \"highcharts/modules/boost\";\nimport HighchartsExporting from \"highcharts/modules/exporting\";\nimport HighchartsAnnotations from \"highcharts/modules/annotations\";\nimport HighchartsMore from \"highcharts/highcharts-more\";\nimport DataTable from \"react-data-table-component\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Topbar from \"./Topbar\";\nimport Selector from \"./Selector\";\nimport \"../Styles/Graph.css\";\nimport Sidebar from \"./Sidebar\";\n\nHighchartsBoost(Highcharts);\nHighchartsExporting(Highcharts);\nHighchartsAnnotations(Highcharts);\nHighchartsMore(Highcharts);\n\nconst Graph = () => {\n  const [compareWithTarget, setCompareWithTarget] = useState(false);\n  const [selectedCurrencies, setSelectedCurrencies] = useState([\n    { value: \"AUD\", label: \"AUD\" },\n    { value: \"EUR\", label: \"EUR\" },\n    { value: \"GBP\", label: \"GBP\" },\n    { value: \"JPY\", label: \"JPY\" },\n    { value: \"USD\", label: \"USD\" }\n  ]);\n  const [summary, setSummary] = useState(\"\");\n  const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n  const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [showBreakdown, setShowBreakdown] = useState(false);\n  const latestSummaryRef = useRef(\"\");\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/xva\");\n        const result = await response.json();\n        setData(result);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  const getFilteredData = () => {\n    return data.filter((d) => {\n      const date = new Date(d.Date).getTime();\n      return date >= startDate.getTime() && date <= endDate.getTime();\n    });\n  };\n\n  useEffect(() => {\n    if (!loading && data.length > 0) {\n      const updateSummary = () => {\n        if (summary !== latestSummaryRef.current) {\n          setSummary(latestSummaryRef.current);\n        }\n      };\n      const interval = setInterval(updateSummary, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [loading, data, summary]);\n\n  const filteredData = getFilteredData();\n\n  const totalLine = {\n    name: \"Total\",\n    data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n    color: isDarkMode ? \"#007bff\" : \"#343a40\",\n    marker: { enabled: false },\n    zIndex: 1,\n    boostThreshold: 1,\n  };\n\n  const shadeData = {\n    name: \"Shaded Area\",\n    data: filteredData.map((d) => ({\n      x: new Date(d.Date).getTime(),\n      low: Math.min(d.Total, d.Target),\n      high: Math.max(d.Total, d.Target),\n    })),\n    type: \"arearange\",\n    lineWidth: 0,\n    linkedTo: \"Total\",\n    color: \"#2E8C39\",\n    fillOpacity: 0.3,\n    zIndex: 0,\n    marker: { enabled: false },\n    boostThreshold: 0,\n    boost: false,\n  };\n\n  const getData = () => {\n    const compareData = [\n      ...selectedCurrencies.map((currency) => ({\n        name: currency.value,\n        data: filteredData.map((d) => [\n          new Date(d.Date).getTime(),\n          d[currency.value],\n        ]),\n        color: getCurrencyColor(currency.value),\n        marker: { enabled: false },\n        boostThreshold: 1,\n      })),\n      totalLine,\n      {\n        name: \"Target\",\n        data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n        color: \"#007bff\",\n        marker: { enabled: false },\n        zIndex: 1,\n        boostThreshold: 1,\n      },\n      shadeData,\n    ];\n    return compareWithTarget ? compareData : compareData.slice(0, -1);\n  };\n\n  const getCurrencyColor = (currency) => {\n    switch (currency) {\n      case \"AUD\":\n        return \"#FFD700\";\n      case \"EUR\":\n        return \"#FF6347\";\n      case \"GBP\":\n        return \"#4682B4\";\n      case \"JPY\":\n        return \"#32CD32\";\n      case \"USD\":\n        return \"#FFA07A\";\n      case \"BRL\":\n        return \"#9400D3\";\n      case \"CAD\":\n        return \"#00FF00\";\n      case \"CHF\":\n        return \"#FF00FF\";\n      case \"CLP\":\n        return \"#00FFFF\";\n      case \"CNY\":\n        return \"#FF4500\";\n      case \"CZK\":\n        return \"#FF1493\";\n      case \"DKK\":\n        return \"#1E90FF\";\n      case \"HKD\":\n        return \"#FF69B4\";\n      case \"HUF\":\n        return \"#8A2BE2\";\n      case \"INR\":\n        return \"#00BFFF\";\n      case \"KRW\":\n        return \"#7B68EE\";\n      case \"NOK\":\n        return \"#FFD700\";\n      case \"NZD\":\n        return \"#FF6347\";\n      case \"PLN\":\n        return \"#4682B4\";\n      case \"SEK\":\n        return \"#32CD32\";\n      case \"SGD\":\n        return \"#FFA07A\";\n      case \"THB\":\n        return \"#9400D3\";\n      case \"TWD\":\n        return \"#00FF00\";\n      case \"ZAR\":\n        return \"#FF00FF\";\n      default:\n        return \"#FF4500\";\n    }\n  };\n\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n\n  return (\n    <div>\n        <Sidebar/>\n    \n    <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n      <Topbar isDarkMode={isDarkMode} toggleTheme={toggleTheme} />\n      <div className=\"graph-container\">\n        <h2 className=\"graph-title\">LCH Notional | Time Series</h2>\n        <div className=\"selectors-container\">\n          <div className=\"currency-selector\">\n            <label>Select Currencies:</label>\n            <Selector\n              options={[\n                { value: \"AUD\", label: \"AUD\" },\n                { value: \"EUR\", label: \"EUR\" },\n                { value: \"GBP\", label: \"GBP\" },\n                { value: \"JPY\", label: \"JPY\" },\n                { value: \"USD\", label: \"USD\" },\n                { value: \"BRL\", label: \"BRL\" },\n                { value: \"CAD\", label: \"CAD\" },\n                { value: \"CHF\", label: \"CHF\" },\n                { value: \"CLP\", label: \"CLP\" },\n                { value: \"CNY\", label: \"CNY\" },\n                { value: \"CZK\", label: \"CZK\" },\n                { value: \"DKK\", label: \"DKK\" },\n                { value: \"HKD\", label: \"HKD\" },\n                { value: \"HUF\", label: \"HUF\" },\n                { value: \"INR\", label: \"INR\" },\n                { value: \"KRW\", label: \"KRW\" },\n                { value: \"MXN\", label: \"MXN\" },\n                { value: \"NOK\", label: \"NOK\" },\n                { value: \"NZD\", label: \"NZD\" },\n                { value: \"PLN\", label: \"PLN\" },\n                { value: \"SEK\", label: \"SEK\" },\n                { value: \"SGD\", label: \"SGD\" },\n                { value: \"THB\", label: \"THB\" },\n                { value: \"TWD\", label: \"TWD\" },\n                { value: \"ZAR\", label: \"ZAR\" },\n              ]}\n              selectedCurrencies={selectedCurrencies}\n              setSelectedCurrencies={setSelectedCurrencies}\n            />\n          </div>\n          <div className=\"date-picker\">\n            <label>Select Date Range:</label>\n            <DatePicker\n              selected={startDate}\n              onChange={(date) => setStartDate(date)}\n              selectsStart\n              startDate={startDate}\n              endDate={endDate}\n              className=\"date-input\"\n            />\n            <DatePicker\n              selected={endDate}\n              onChange={(date) => setEndDate(date)}\n              selectsEnd\n              startDate={startDate}\n              endDate={endDate}\n              minDate={startDate}\n              className=\"date-input\"\n            />\n          </div>\n        </div>\n        <div className=\"main-panel\">\n          <HighchartsReact\n            className=\"chart-actual\"\n            highcharts={Highcharts}\n            options={{\n              chart: {\n                type: \"line\",\n                zoomType: \"x\",\n                backgroundColor: {\n                  linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n                  stops: isDarkMode\n                    ? [\n                        [0, \"#2e2e2e\"],\n                        [1, \"#1a1a1a\"],\n                      ]\n                    : [\n                        [0, \"#ffffff\"],\n                        [1, \"#f0f0f0\"],\n                      ],\n                },\n                borderRadius: 10, // Rounded corners\n                style: {\n                  fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n                },\n                plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n                plotBorderWidth: 1,\n                events: {\n                  load: function () {\n                    this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n                  },\n                },\n                boost: {\n                  useGPUTranslations: true,\n                  usePreAllocated: true,\n                },\n              },\n              title: {\n                text: \"\",\n                style: {\n                  color: isDarkMode ? \"#ffffff\" : \"#000000\",\n                  fontSize: \"22px\",\n                  fontWeight: \"bold\",\n                },\n              },\n              xAxis: {\n                type: \"datetime\",\n                title: {\n                  text: \"Date\",\n                  style: {\n                    color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                    fontSize: \"14px\",\n                    fontWeight: \"bold\",\n                  },\n                },\n                lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n                tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n                labels: {\n                  style: {\n                    color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                    fontSize: \"12px\",\n                  },\n                },\n              },\n              yAxis: {\n                title: {\n                  text: \"Notional (USD)\",\n                  style: {\n                    color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                    fontSize: \"14px\",\n                    fontWeight: \"bold\",\n                  },\n                },\n                gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n                labels: {\n                  style: {\n                    color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                    fontSize: \"12px\",\n                  },\n                },\n              },\n              legend: {\n                layout: \"horizontal\",\n                align: \"center\",\n                verticalAlign: \"bottom\",\n                itemStyle: {\n                  color: isDarkMode ? \"#ffffff\" : \"#000000\",\n                  fontSize: \"14px\",\n                  fontWeight: \"bold\",\n                },\n                itemHoverStyle: {\n                  color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                },\n                itemHiddenStyle: {\n                  color: isDarkMode ? \"#666666\" : \"#999999\",\n                },\n              },\n              tooltip: {\n                shared: true,\n                backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n                borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n                style: {\n                  color: isDarkMode ? \"#ffffff\" : \"#000000\",\n                },\n                formatter: function () {\n                  const points = this.points;\n                  let targetValue = null;\n                  let totalValue = null;\n\n                  points.forEach((point) => {\n                    if (point.series.name === \"Target\") {\n                      targetValue = point.y;\n                    }\n                    if (point.series.name === \"Total\") {\n                      totalValue = point.y;\n                    }\n                  });\n\n                  if (targetValue !== null && totalValue !== null) {\n                    const difference = (totalValue - targetValue).toFixed(2);\n                    const totalBreakdown = selectedCurrencies\n                      .map((currency) => {\n                        const point = points.find((p) => p.series.name === currency.value);\n                        return point\n                          ? `${currency.value}: ${point.y.toFixed(2)}`\n                          : `${currency.value}: N/A`;\n                      })\n                      .join(\"<br>\");\n\n                    let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n                    summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n                    summaryHTML += `Difference: ${difference}<br><br>`;\n                    summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n                    latestSummaryRef.current = summaryHTML;\n\n                    return points.reduce((s, point) => {\n                      return (\n                        s +\n                        `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n                      );\n                    }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n                  }\n                  return points.reduce((s, point) => {\n                    return (\n                      s +\n                      `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n                    );\n                  }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n                },\n              },\n              series: getData(),\n              navigation: {\n                buttonOptions: {\n                  enabled: true,\n                  theme: {\n                    fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n                    stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n                    style: {\n                      color: isDarkMode ? \"#ffffff\" : \"#000000\",\n                    },\n                  },\n                },\n              },\n              exporting: {\n                buttons: {\n                  contextButton: {\n                    symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n                    theme: {\n                      fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n                    },\n                  },\n                },\n              },\n            }}\n            containerProps={{ className: \"chart-container\" }}\n            updateArgs={[true, true, true]}\n            ref={chartRef}\n          />\n          {compareWithTarget && (\n            <div className=\"summary-box\">\n              <div className=\"summary-content\">\n                <span>Total: {parseFloat(summary.split('Total: ')[1]?.split('<br>')[0])}</span>\n                <span>Target: {parseFloat(summary.split('Target: ')[1]?.split('<br>')[0])}</span>\n                <span>Difference: {parseFloat(summary.split('Difference: ')[1]?.split('<br>')[0])}</span>\n                <span\n                  className=\"dropdown-arrow\"\n                  onClick={() => setShowBreakdown(!showBreakdown)}\n                  title=\"Show currency breakdown\"\n                >\n                  &#9660;\n                </span>\n              </div>\n              {showBreakdown && (\n                <div className=\"currency-breakdown\">\n                  <div dangerouslySetInnerHTML={{ __html: summary.split('<br><br>')[1] }} />\n                </div>\n              )}\n            </div>\n          )}\n          <div className=\"bottom-right-buttons\">\n            <button\n              onClick={() => setCompareWithTarget(!compareWithTarget)}\n              className=\"toggle-button\"\n            >\n              {compareWithTarget ? \"Disable Compare with Target\" : \"Enable Compare with Target\"}\n            </button>\n            <div className=\"download-section\">\n              <button className=\"toggle-button\">Download</button>\n              <div className=\"dropdown-content\">\n                <button\n                  onClick={() =>\n                    chartRef.current.chart.exportChart({ type: \"image/png\" })\n                  }\n                >\n                  PNG\n                </button>\n                <button\n                  onClick={() =>\n                    chartRef.current.chart.exportChart({ type: \"image/jpeg\" })\n                  }\n                >\n                  JPEG\n                </button>\n                <button\n                  onClick={() =>\n                    chartRef.current.chart.exportChart({ type: \"application/pdf\" })\n                  }\n                >\n                  PDF\n                </button>\n                <button\n                  onClick={() =>\n                    chartRef.current.chart.exportChart({ type: \"image/svg+xml\" })\n                  }\n                >\n                  SVG\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"data-table-section\">\n        <DataTable\n          title=\"LCH Notional | Summary Table\"\n          columns={[\n            { name: \"Date\", selector: (row) => row.Date, sortable: true },\n            { name: \"Target\", selector: (row) => row.Target, sortable: true },\n            ...selectedCurrencies.map((currency) => ({\n              name: currency.label,\n              selector: (row) => row[currency.value],\n              sortable: true,\n            })),\n            { name: \"Total\", selector: (row) => row.Total, sortable: true },\n          ]}\n          data={filteredData.map((d) => {\n            const rowData = {\n              Date: d.Date,\n              Target: d.Target,\n              Total: d.Total,\n            };\n            selectedCurrencies.forEach((currency) => {\n              rowData[currency.value] = d[currency.value];\n            });\n            return rowData;\n          })}\n          pagination\n          highlightOnHover\n          pointerOnHover\n          customStyles={{\n            header: {\n              style: {\n                fontSize: '22px',\n                fontWeight: 'bold',\n                color: 'var(--text-color)',\n                backgroundColor: 'var(--control-bg-color)',\n              },\n            },\n            rows: {\n              style: {\n                fontSize: '16px',\n                color: 'var(--text-color)',\n                backgroundColor: 'var(--input-bg-color)',\n                '&:not(:last-of-type)': {\n                  borderBottomStyle: 'solid',\n                  borderBottomWidth: '1px',\n                  borderBottomColor: 'var(--control-bg-color)',\n                },\n              },\n            },\n            headCells: {\n              style: {\n                fontSize: '18px',\n                fontWeight: 'bold',\n                color: 'var(--text-color)',\n                backgroundColor: 'var(--control-bg-color)',\n              },\n            },\n            cells: {\n              style: {\n                fontSize: '16px',\n                color: 'var(--text-color)',\n                backgroundColor: 'var(--input-bg-color)',\n              },\n            },\n          }}\n        />\n      </div>\n    </div>\n    </div>\n  );\n};\n\nexport default Graph;\n\n\n\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}