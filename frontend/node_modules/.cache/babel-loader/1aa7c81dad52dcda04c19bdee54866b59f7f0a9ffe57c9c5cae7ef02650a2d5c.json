{"ast":null,"code":"var _jsxFileName = \"/Users/harshmishra/Desktop/dashboard/frontend/src/Components/Selector.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useCallback } from 'react';\n// import { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\n// const Selector = ({ options, selectedCurrencies, setSelectedCurrencies }) => {\n//   const [dropdownOpen, setDropdownOpen] = useState(false);\n//   const [shiftSelected, setShiftSelected] = useState([]);\n//   const toggle = () => setDropdownOpen(prevState => !prevState);\n\n//   const handleCheckboxChange = useCallback((e, currency) => {\n//     let updatedSelected = [...selectedCurrencies];\n//     if (e.nativeEvent.shiftKey && shiftSelected.length > 0) {\n//       const lastSelected = shiftSelected[shiftSelected.length - 1];\n//       const start = options.findIndex(opt => opt.value === lastSelected);\n//       const end = options.findIndex(opt => opt.value === currency);\n//       const range = options.slice(Math.min(start, end), Math.max(start, end) + 1).map(opt => opt.value);\n//       if (e.target.checked) {\n//         updatedSelected = [...new Set([...updatedSelected, ...range])];\n//       } else {\n//         updatedSelected = updatedSelected.filter(sel => !range.includes(sel));\n//       }\n//       setShiftSelected(range);\n//     } else {\n//       if (e.target.checked) {\n//         updatedSelected.push(currency);\n//       } else {\n//         updatedSelected = updatedSelected.filter(sel => sel !== currency);\n//       }\n//       setShiftSelected([currency]);\n//     }\n//     setSelectedCurrencies(updatedSelected);\n//   }, [selectedCurrencies, shiftSelected, setSelectedCurrencies, options]);\n\n//   return (\n//     <Dropdown isOpen={dropdownOpen} toggle={toggle}>\n//       <DropdownToggle caret>\n//         Select Currencies\n//       </DropdownToggle>\n//       <DropdownMenu>\n//         {options.map(option => (\n//           <DropdownItem key={option.value} toggle={false}>\n//             <input\n//               type=\"checkbox\"\n//               checked={selectedCurrencies.includes(option.value)}\n//               onChange={(e) => handleCheckboxChange(e, option.value)}\n//             /> {option.label}\n//           </DropdownItem>\n//         ))}\n//       </DropdownMenu>\n//     </Dropdown>\n//   );\n// };\n\n// export default Selector;\n\nimport React, { useState } from \"react\";\nimport { Dropdown, DropdownToggle, DropdownMenu, FormGroup, Input, Label } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../Styles/Selector.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Selector = ({\n  options,\n  selectedCurrencies,\n  setSelectedCurrencies\n}) => {\n  _s();\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [previousSelected, setPreviousSelected] = useState(null);\n  const [previousChecked, setPreviousChecked] = useState(false);\n  const toggleDropdown = () => setDropdownOpen(prevState => !prevState);\n  const handleCurrencyChange = (event, option) => {\n    const isChecked = event.target.checked;\n\n    // If Shift key is pressed\n    if (event.nativeEvent.shiftKey && previousSelected !== null) {\n      const currentIndex = options.findIndex(opt => opt.value === option.value);\n      const prevIndex = options.findIndex(opt => opt.value === previousSelected.value);\n      const [start, end] = [currentIndex, prevIndex].sort((a, b) => a - b);\n      const selectedRange = options.slice(start, end + 1);\n      const newSelections = isChecked ? [...selectedCurrencies, ...selectedRange.filter(opt => !selectedCurrencies.includes(opt))] : selectedCurrencies.filter(currency => !selectedRange.includes(currency));\n      setSelectedCurrencies(newSelections);\n    } else {\n      const newSelections = isChecked ? [...selectedCurrencies, option] : selectedCurrencies.filter(currency => currency.value !== option.value);\n      setPreviousSelected(option);\n      setPreviousChecked(isChecked);\n      setSelectedCurrencies(newSelections);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Dropdown, {\n    isOpen: dropdownOpen,\n    toggle: toggleDropdown,\n    className: \"currency-selector-dropdown\",\n    children: [/*#__PURE__*/_jsxDEV(DropdownToggle, {\n      caret: true,\n      children: selectedCurrencies.length > 0 ? selectedCurrencies.map(curr => curr.label).join(\", \") : \"Select Currencies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DropdownMenu, {\n      children: /*#__PURE__*/_jsxDEV(FormGroup, {\n        check: true,\n        children: options.map(option => /*#__PURE__*/_jsxDEV(Label, {\n          check: true,\n          className: \"currency-option\",\n          onClick: e => handleCurrencyChange(e, option),\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            type: \"checkbox\",\n            checked: selectedCurrencies.some(curr => curr.value === option.value),\n            onChange: e => handleCurrencyChange(e, option),\n            onClick: e => e.stopPropagation() // Prevents dropdown closing\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this), option.label]\n        }, option.value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(Selector, \"XUjaP+Bub/eHZIawKc1O7gd5gx0=\");\n_c = Selector;\nexport default Selector;\nvar _c;\n$RefreshReg$(_c, \"Selector\");","map":{"version":3,"names":["React","useState","Dropdown","DropdownToggle","DropdownMenu","FormGroup","Input","Label","jsxDEV","_jsxDEV","Selector","options","selectedCurrencies","setSelectedCurrencies","_s","dropdownOpen","setDropdownOpen","previousSelected","setPreviousSelected","previousChecked","setPreviousChecked","toggleDropdown","prevState","handleCurrencyChange","event","option","isChecked","target","checked","nativeEvent","shiftKey","currentIndex","findIndex","opt","value","prevIndex","start","end","sort","a","b","selectedRange","slice","newSelections","filter","includes","currency","isOpen","toggle","className","children","caret","length","map","curr","label","join","fileName","_jsxFileName","lineNumber","columnNumber","check","onClick","e","type","some","onChange","stopPropagation","_c","$RefreshReg$"],"sources":["/Users/harshmishra/Desktop/dashboard/frontend/src/Components/Selector.jsx"],"sourcesContent":["// import React, { useState, useCallback } from 'react';\n// import { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\n// const Selector = ({ options, selectedCurrencies, setSelectedCurrencies }) => {\n//   const [dropdownOpen, setDropdownOpen] = useState(false);\n//   const [shiftSelected, setShiftSelected] = useState([]);\n//   const toggle = () => setDropdownOpen(prevState => !prevState);\n\n//   const handleCheckboxChange = useCallback((e, currency) => {\n//     let updatedSelected = [...selectedCurrencies];\n//     if (e.nativeEvent.shiftKey && shiftSelected.length > 0) {\n//       const lastSelected = shiftSelected[shiftSelected.length - 1];\n//       const start = options.findIndex(opt => opt.value === lastSelected);\n//       const end = options.findIndex(opt => opt.value === currency);\n//       const range = options.slice(Math.min(start, end), Math.max(start, end) + 1).map(opt => opt.value);\n//       if (e.target.checked) {\n//         updatedSelected = [...new Set([...updatedSelected, ...range])];\n//       } else {\n//         updatedSelected = updatedSelected.filter(sel => !range.includes(sel));\n//       }\n//       setShiftSelected(range);\n//     } else {\n//       if (e.target.checked) {\n//         updatedSelected.push(currency);\n//       } else {\n//         updatedSelected = updatedSelected.filter(sel => sel !== currency);\n//       }\n//       setShiftSelected([currency]);\n//     }\n//     setSelectedCurrencies(updatedSelected);\n//   }, [selectedCurrencies, shiftSelected, setSelectedCurrencies, options]);\n\n//   return (\n//     <Dropdown isOpen={dropdownOpen} toggle={toggle}>\n//       <DropdownToggle caret>\n//         Select Currencies\n//       </DropdownToggle>\n//       <DropdownMenu>\n//         {options.map(option => (\n//           <DropdownItem key={option.value} toggle={false}>\n//             <input\n//               type=\"checkbox\"\n//               checked={selectedCurrencies.includes(option.value)}\n//               onChange={(e) => handleCheckboxChange(e, option.value)}\n//             /> {option.label}\n//           </DropdownItem>\n//         ))}\n//       </DropdownMenu>\n//     </Dropdown>\n//   );\n// };\n\n// export default Selector;\n\nimport React, { useState } from \"react\";\nimport { Dropdown, DropdownToggle, DropdownMenu, FormGroup, Input, Label } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"../Styles/Selector.css\";\n\nconst Selector = ({ options, selectedCurrencies, setSelectedCurrencies }) => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [previousSelected, setPreviousSelected] = useState(null);\n  const [previousChecked, setPreviousChecked] = useState(false);\n\n  const toggleDropdown = () => setDropdownOpen((prevState) => !prevState);\n\n  const handleCurrencyChange = (event, option) => {\n    const isChecked = event.target.checked;\n\n    // If Shift key is pressed\n    if (event.nativeEvent.shiftKey && previousSelected !== null) {\n      const currentIndex = options.findIndex((opt) => opt.value === option.value);\n      const prevIndex = options.findIndex((opt) => opt.value === previousSelected.value);\n\n      const [start, end] = [currentIndex, prevIndex].sort((a, b) => a - b);\n      const selectedRange = options.slice(start, end + 1);\n\n      const newSelections = isChecked\n        ? [...selectedCurrencies, ...selectedRange.filter((opt) => !selectedCurrencies.includes(opt))]\n        : selectedCurrencies.filter((currency) => !selectedRange.includes(currency));\n\n      setSelectedCurrencies(newSelections);\n    } else {\n      const newSelections = isChecked\n        ? [...selectedCurrencies, option]\n        : selectedCurrencies.filter((currency) => currency.value !== option.value);\n\n      setPreviousSelected(option);\n      setPreviousChecked(isChecked);\n      setSelectedCurrencies(newSelections);\n    }\n  };\n\n  return (\n    <Dropdown isOpen={dropdownOpen} toggle={toggleDropdown} className=\"currency-selector-dropdown\">\n      <DropdownToggle caret>\n        {selectedCurrencies.length > 0\n          ? selectedCurrencies.map((curr) => curr.label).join(\", \")\n          : \"Select Currencies\"}\n      </DropdownToggle>\n      <DropdownMenu>\n        <FormGroup check>\n          {options.map((option) => (\n            <Label\n              key={option.value}\n              check\n              className=\"currency-option\"\n              onClick={(e) => handleCurrencyChange(e, option)}\n            >\n              <Input\n                type=\"checkbox\"\n                checked={selectedCurrencies.some((curr) => curr.value === option.value)}\n                onChange={(e) => handleCurrencyChange(e, option)}\n                onClick={(e) => e.stopPropagation()} // Prevents dropdown closing\n              />\n              {option.label}\n            </Label>\n          ))}\n        </FormGroup>\n      </DropdownMenu>\n    </Dropdown>\n  );\n};\n\nexport default Selector;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}