{"ast":null,"code":"var _jsxFileName = \"/Users/harshmishra/Desktop/dashboard/frontend/src/Components/Graph.jsx\",\n  _s = $RefreshSig$();\n// // // import React, { useState, useEffect, useRef } from \"react\";\n// // // import Highcharts from \"highcharts\";\n// // // import HighchartsReact from \"highcharts-react-official\";\n// // // import HighchartsBoost from \"highcharts/modules/boost\";\n// // // import HighchartsExporting from \"highcharts/modules/exporting\";\n// // // import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// // // import HighchartsMore from \"highcharts/highcharts-more\";\n// // // import DataTable from \"react-data-table-component\";\n// // // import DatePicker from \"react-datepicker\";\n// // // import \"react-datepicker/dist/react-datepicker.css\";\n// // // import Topbar from \"./Topbar\";\n// // // import \"../Styles/Graph.css\";\n// // // import Selector from \"./Selector\";  // Ensure to import the new component\n\n// // // HighchartsBoost(Highcharts);\n// // // HighchartsExporting(Highcharts);\n// // // HighchartsAnnotations(Highcharts);\n// // // HighchartsMore(Highcharts);\n\n// // // const Graph = () => {\n// // //   const [compareWithTarget, setCompareWithTarget] = useState(false);\n// // //   const [selectedCurrencies, setSelectedCurrencies] = useState([\n// // //     { value: \"AUD\", label: \"AUD\" },\n// // //     { value: \"EUR\", label: \"EUR\" },\n// // //     { value: \"GBP\", label: \"GBP\" },\n// // //     { value: \"JPY\", label: \"JPY\" },\n// // //     { value: \"USD\", label: \"USD\" },\n// // //   ]);\n// // //   const [summary, setSummary] = useState(\"\");\n// // //   const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n// // //   const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n// // //   const [data, setData] = useState([]);\n// // //   const [loading, setLoading] = useState(true);\n// // //   const [isDarkMode, setIsDarkMode] = useState(true);\n// // //   const latestSummaryRef = useRef(\"\");\n// // //   const chartRef = useRef(null);\n\n// // //   useEffect(() => {\n// // //     const fetchData = async () => {\n// // //       try {\n// // //         const response = await fetch(\"http://localhost:5000/xva\");\n// // //         const result = await response.json();\n// // //         setData(result);\n// // //         setLoading(false);\n// // //       } catch (error) {\n// // //         console.error('Error fetching data:', error);\n// // //         setLoading(false);\n// // //       }\n// // //     };\n// // //     fetchData();\n// // //   }, []);\n\n// // //   const getFilteredData = () => {\n// // //     return data.filter((d) => {\n// // //       const date = new Date(d.Date).getTime();\n// // //       return date >= startDate.getTime() && date <= endDate.getTime();\n// // //     });\n// // //   };\n\n// // //   const filteredData = getFilteredData();\n\n// // //   useEffect(() => {\n// // //     if (!loading && data.length > 0) {\n// // //       const updateSummary = () => {\n// // //         if (summary !== latestSummaryRef.current) {\n// // //           setSummary(latestSummaryRef.current);\n// // //         }\n// // //       };\n// // //       const interval = setInterval(updateSummary, 1000);\n// // //       return () => clearInterval(interval);\n// // //     }\n// // //   }, [loading, data, summary]);\n\n// // //   const totalLine = {\n// // //     name: \"Total\",\n// // //     data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n// // //     color: isDarkMode ? \"#007bff\" : \"#343a40\",\n// // //     marker: { enabled: false },\n// // //     zIndex: 1,\n// // //     boostThreshold: 1,\n// // //   };\n\n// // //   const shadeData = {\n// // //     name: \"Shaded Area\",\n// // //     data: filteredData.map((d) => ({\n// // //       x: new Date(d.Date).getTime(),\n// // //       low: Math.min(d.Total, d.Target),\n// // //       high: Math.max(d.Total, d.Target),\n// // //     })),\n// // //     type: \"arearange\",\n// // //     lineWidth: 0,\n// // //     linkedTo: \"Total\",\n// // //     color: \"#2E8C39\",\n// // //     fillOpacity: 0.3,\n// // //     zIndex: 0,\n// // //     marker: { enabled: false },\n// // //     boostThreshold: 0,\n// // //     boost: false,\n// // //   };\n\n// // //   const handleCurrencyChange = (selectedOptions) => {\n// // //     setSelectedCurrencies(selectedOptions);\n// // //   };\n\n// // //   const getData = () => {\n// // //     if (!filteredData || filteredData.length === 0) return [];\n\n// // //     const compareData = [\n// // //       ...selectedCurrencies.map((currency) => ({\n// // //         name: currency.value,\n// // //         data: filteredData.map((d) => [\n// // //           new Date(d.Date).getTime(),\n// // //           d[currency.value],\n// // //         ]),\n// // //         color: getCurrencyColor(currency.value),\n// // //         marker: { enabled: false },\n// // //         boostThreshold: 1,\n// // //       })),\n// // //       totalLine,\n// // //       {\n// // //         name: \"Target\",\n// // //         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n// // //         color: \"#007bff\",\n// // //         marker: { enabled: false },\n// // //         zIndex: 1,\n// // //         boostThreshold: 1,\n// // //       },\n// // //       shadeData,\n// // //     ];\n// // //     return compareWithTarget ? compareData : compareData.slice(0, -1);\n// // //   };\n\n// // //   const getCurrencyColor = (currency) => {\n// // //     switch (currency) {\n// // //       case \"AUD\":\n// // //         return \"#FFD700\";\n// // //       case \"EUR\":\n// // //         return \"#FF6347\";\n// // //       case \"GBP\":\n// // //         return \"#4682B4\";\n// // //       case \"JPY\":\n// // //         return \"#32CD32\";\n// // //       case \"USD\":\n// // //         return \"#FFA07A\";\n// // //       case \"BRL\":\n// // //         return \"#9400D3\";\n// // //       case \"CAD\":\n// // //         return \"#00FF00\";\n// // //       case \"CHF\":\n// // //         return \"#FF00FF\";\n// // //       case \"CLP\":\n// // //         return \"#00FFFF\";\n// // //       case \"CNY\":\n// // //         return \"#FF4500\";\n// // //       case \"CZK\":\n// // //         return \"#FF1493\";\n// // //       case \"DKK\":\n// // //         return \"#1E90FF\";\n// // //       case \"HKD\":\n// // //         return \"#FF69B4\";\n// // //       case \"HUF\":\n// // //         return \"#8A2BE2\";\n// // //       case \"INR\":\n// // //         return \"#00BFFF\";\n// // //       case \"KRW\":\n// // //         return \"#7B68EE\";\n// // //       case \"MXN\":\n// // //         return \"#F4C145\";\n// // //       case \"NOK\":\n// // //         return \"#FFD700\";\n// // //       case \"NZD\":\n// // //         return \"#FF6347\";\n// // //       case \"PLN\":\n// // //         return \"#4682B4\";\n// // //       case \"SEK\":\n// // //         return \"#32CD32\";\n// // //       case \"SGD\":\n// // //         return \"#FFA07A\";\n// // //       case \"THB\":\n// // //         return \"#9400D3\";\n// // //       case \"TWD\":\n// // //         return \"#00FF00\";\n// // //       case \"ZAR\":\n// // //         return \"#FF00FF\";\n// // //       default:\n// // //         return \"#FF4500\";\n// // //     }\n// // //   };\n\n// // //   const getColumns = () => {\n// // //     const baseColumns = [\n// // //       { name: \"Date\", selector: (row) => row.Date, sortable: true },\n// // //       { name: \"Target\", selector: (row) => row.Target, sortable: true },\n// // //     ];\n\n// // //     const currencyColumns = selectedCurrencies.map((currency) => ({\n// // //       name: currency.label,\n// // //       selector: (row) => row[currency.value],\n// // //       sortable: true,\n// // //     }));\n\n// // //     return [\n// // //       ...baseColumns,\n// // //       ...currencyColumns,\n// // //       { name: \"Total\", selector: (row) => row.Total, sortable: true },\n// // //     ];\n// // //   };\n\n// // //   const getFilteredTableData = () => {\n// // //     return filteredData.map((d) => {\n// // //       const rowData = {\n// // //         Date: d.Date,\n// // //         Target: d.Target,\n// // //         Total: d.Total,\n// // //       };\n// // //       selectedCurrencies.forEach((currency) => {\n// // //         rowData[currency.value] = d[currency.value];\n// // //       });\n// // //       return rowData;\n// // //     });\n// // //   };\n\n// // //   const handleTooltipFormatter = function () {\n// // //     const points = this.points;\n// // //     let targetValue = null;\n// // //     let totalValue = null;\n\n// // //     points.forEach((point) => {\n// // //       if (point.series.name === \"Target\") {\n// // //         targetValue = point.y;\n// // //       }\n// // //       if (point.series.name === \"Total\") {\n// // //         totalValue = point.y;\n// // //       }\n// // //     });\n\n// // //     if (targetValue !== null && totalValue !== null) {\n// // //       const difference = (totalValue - targetValue).toFixed(2);\n// // //       const totalBreakdown = selectedCurrencies\n// // //         .map((currency) => {\n// // //           const point = points.find((p) => p.series.name === currency.value);\n// // //           return point\n// // //             ? `${currency.value}: ${point.y.toFixed(2)}`\n// // //             : `${currency.value}: N/A`;\n// // //         })\n// // //         .join(\"<br>\");\n\n// // //       let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n// // //       summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n// // //       summaryHTML += `Difference: ${difference}<br><br>`;\n// // //       summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n// // //       latestSummaryRef.current = summaryHTML;\n\n// // //       return points.reduce((s, point) => {\n// // //         return (\n// // //           s +\n// // //           `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// // //         );\n// // //       }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// // //     }\n// // //     return points.reduce((s, point) => {\n// // //       return (\n// // //         s +\n// // //         `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// // //       );\n// // //     }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// // //   };\n\n// // //   const options = {\n// // //     chart: {\n// // //       type: \"line\",\n// // //       zoomType: \"x\",\n// // //       backgroundColor: {\n// // //         linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n// // //         stops: isDarkMode\n// // //           ? [\n// // //               [0, \"#2e2e2e\"],\n// // //               [1, \"#1a1a1a\"],\n// // //             ]\n// // //           : [\n// // //               [0, \"#ffffff\"],\n// // //               [1, \"#f0f0f0\"],\n// // //             ],\n// // //       },\n// // //       borderRadius: 10, // Rounded corners\n// // //       style: {\n// // //         fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n// // //       },\n// // //       plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// // //       plotBorderWidth: 1,\n// // //       events: {\n// // //         load: function () {\n// // //           this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n// // //         },\n// // //       },\n// // //       boost: {\n// // //         useGPUTranslations: true,\n// // //         usePreAllocated: true,\n// // //       },\n// // //     },\n// // //     title: {\n// // //       text: \"LCH Notional\",\n// // //       style: {\n// // //         color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// // //         fontSize: \"22px\",\n// // //         fontWeight: \"bold\",\n// // //       },\n// // //     },\n// // //     xAxis: {\n// // //       type: \"datetime\",\n// // //       title: {\n// // //         text: \"Date\",\n// // //         style: {\n// // //           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //           fontSize: \"14px\",\n// // //           fontWeight: \"bold\",\n// // //         },\n// // //       },\n// // //       lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// // //       tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// // //       labels: {\n// // //         style: {\n// // //           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //           fontSize: \"12px\",\n// // //         },\n// // //       },\n// // //     },\n// // //     yAxis: {\n// // //       title: {\n// // //         text: \"Notional (USD)\",\n// // //         style: {\n// // //           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //           fontSize: \"14px\",\n// // //           fontWeight: \"bold\",\n// // //         },\n// // //       },\n// // //       gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// // //       labels: {\n// // //         style: {\n// // //           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //           fontSize: \"12px\",\n// // //         },\n// // //       },\n// // //     },\n// // //     legend: {\n// // //       layout: \"horizontal\",\n// // //       align: \"center\",\n// // //       verticalAlign: \"bottom\",\n// // //       itemStyle: {\n// // //         color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// // //         fontSize: \"14px\",\n// // //         fontWeight: \"bold\",\n// // //       },\n// // //       itemHoverStyle: {\n// // //         color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //       },\n// // //       itemHiddenStyle: {\n// // //         color: isDarkMode ? \"#666666\" : \"#999999\",\n// // //       },\n// // //     },\n// // //     tooltip: {\n// // //       shared: true,\n// // //       backgroundColor: isDarkMode\n// // //         ? \"rgba(33, 33, 33, 0.85)\"\n// // //         : \"rgba(255, 255, 255, 0.85)\",\n// // //       borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n// // //       style: {\n// // //         color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// // //       },\n// // //       formatter: handleTooltipFormatter,\n// // //     },\n// // //     series: getData(),\n// // //     navigation: {\n// // //       buttonOptions: {\n// // //         enabled: true,\n// // //         theme: {\n// // //           fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// // //           stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n// // //           style: {\n// // //             color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// // //           },\n// // //         },\n// // //       },\n// // //     },\n// // //     exporting: {\n// // //       buttons: {\n// // //         contextButton: {\n// // //           symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //           theme: {\n// // //             fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// // //           },\n// // //         },\n// // //       },\n// // //     },\n// // //   };\n\n// // //   useEffect(() => {\n// // //     if (!loading && data.length > 0) {\n// // //       Highcharts.charts.forEach((chart) => {\n// // //         if (chart) {\n// // //           chart.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n// // //           chart.series.forEach((series) => {\n// // //             const seriesData = getData().find((s) => s.name === series.name);\n// // //             if (seriesData) {\n// // //               series.setData(seriesData.data);\n// // //             }\n// // //           });\n// // //         }\n// // //       });\n// // //     }\n// // //   }, [startDate, endDate, selectedCurrencies, loading, data, isDarkMode]);\n\n// // //   return (\n// // //     <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n// // //       <div className=\"app-container\">\n// // //         <Topbar />\n// // //         <div className=\"floating-box-container\">\n// // //           <div className=\"translucent-box\">\n// // //             <div className=\"control-group\">\n// // //               <div className=\"currency-selector\">\n// // //                 <h2>Select Currencies to Include in Total:</h2>\n// // //                 <Selector\n// // //                   options={[\n// // //                     { value: \"AUD\", label: \"AUD\" },\n// // //                     { value: \"EUR\", label: \"EUR\" },\n// // //                     { value: \"GBP\", label: \"GBP\" },\n// // //                     { value: \"JPY\", label: \"JPY\" },\n// // //                     { value: \"USD\", label: \"USD\" },\n// // //                     { value: \"BRL\", label: \"BRL\" },\n// // //                     { value: \"CAD\", label: \"CAD\" },\n// // //                     { value: \"CHF\", label: \"CHF\" },\n// // //                     { value: \"CLP\", label: \"CLP\" },\n// // //                     { value: \"CNY\", label: \"CNY\" },\n// // //                     { value: \"CZK\", label: \"CZK\" },\n// // //                     { value: \"DKK\", label: \"DKK\" },\n// // //                     { value: \"HKD\", label: \"HKD\" },\n// // //                     { value: \"HUF\", label: \"HUF\" },\n// // //                     { value: \"INR\", label: \"INR\" },\n// // //                     { value: \"KRW\", label: \"KRW\" },\n// // //                     { value: \"MXN\", label: \"MXN\" },\n// // //                     { value: \"NOK\", label: \"NOK\" },\n// // //                     { value: \"NZD\", label: \"NZD\" },\n// // //                     { value: \"PLN\", label: \"PLN\" },\n// // //                     { value: \"SEK\", label: \"SEK\" },\n// // //                     { value: \"SGD\", label: \"SGD\" },\n// // //                     { value: \"THB\", label: \"THB\" },\n// // //                     { value: \"TWD\", label: \"TWD\" },\n// // //                     { value: \"ZAR\", label: \"ZAR\" },\n// // //                   ]}\n// // //                   selectedCurrencies={selectedCurrencies}\n// // //                   setSelectedCurrencies={handleCurrencyChange}\n// // //                 />\n// // //               </div>\n// // //             </div>\n\n// // //             <div className=\"control-group\">\n// // //               <div className=\"date-picker\">\n// // //                 <h2>Select a date range</h2>\n// // //                 <DatePicker\n// // //                   selected={startDate}\n// // //                   onChange={(date) => setStartDate(date)}\n// // //                   selectsStart\n// // //                   startDate={startDate}\n// // //                   endDate={endDate}\n// // //                   className=\"date-input\"\n// // //                 />\n// // //                 <DatePicker\n// // //                   selected={endDate}\n// // //                   onChange={(date) => setEndDate(date)}\n// // //                   selectsEnd\n// // //                   startDate={startDate}\n// // //                   endDate={endDate}\n// // //                   minDate={startDate}\n// // //                   className=\"date-input\"\n// // //                 />\n// // //               </div>\n// // //             </div>\n// // //           </div>\n// // //           <div className=\"translucent-box2\">\n// // //             <h2>Graph Options</h2>\n// // //             <button\n// // //               onClick={() => setCompareWithTarget(!compareWithTarget)}\n// // //               className=\"toggle-button\"\n// // //             >\n// // //               {compareWithTarget\n// // //                 ? \"Disable Compare with Target\"\n// // //                 : \"Enable Compare with Target\"}\n// // //             </button>\n\n// // //             <div className=\"download-section\">\n// // //               <button className=\"toggle-button\">Download</button>\n// // //               <div className=\"dropdown-content\">\n// // //                 <button\n// // //                   onClick={() =>\n// // //                     chartRef.current.chart.exportChart({ type: \"image/png\" })\n// // //                   }\n// // //                 >\n// // //                   PNG\n// // //                 </button>\n// // //                 <button\n// // //                   onClick={() =>\n// // //                     chartRef.current.chart.exportChart({ type: \"image/jpeg\" })\n// // //                   }\n// // //                 >\n// // //                   JPEG\n// // //                 </button>\n// // //                 <button\n// // //                   onClick={() =>\n// // //                     chartRef.current.chart.exportChart({ type: \"application/pdf\" })\n// // //                   }\n// // //                 >\n// // //                   PDF\n// // //                 </button>\n// // //                 <button\n// // //                   onClick={() =>\n// // //                     chartRef.current.chart.exportChart({ type: \"image/svg+xml\" })\n// // //                   }\n// // //                 >\n// // //                   SVG\n// // //                 </button>\n// // //               </div>\n// // //             </div>\n// // //             <button\n// // //               onClick={() => setIsDarkMode(!isDarkMode)}\n// // //               className=\"toggle-button\"\n// // //             >\n// // //               Toggle Dark Mode\n// // //             </button>\n// // //           </div>\n// // //         </div>\n// // //         <div className=\"main-panel\">\n// // //           <HighchartsReact\n// // //             className=\"chart-actual\"\n// // //             highcharts={Highcharts}\n// // //             options={options}\n// // //             containerProps={{ className: \"chart-container\" }}\n// // //             updateArgs={[true, true, true]}\n// // //             ref={chartRef}\n// // //           />\n// // //           {compareWithTarget && (\n// // //             <div className=\"summary-box\">\n// // //               <h3>Summary</h3>\n// // //               <div dangerouslySetInnerHTML={{ __html: summary }} />\n// // //             </div>\n// // //           )}\n\n// // //           <div className=\"data-table-section\">\n// // //             <DataTable\n// // //               title=\"LCH Notional | Summary Table\"\n// // //               columns={getColumns()}\n// // //               data={getFilteredTableData()}\n// // //               pagination\n// // //               highlightOnHover\n// // //               pointerOnHover\n// // //               customStyles={customTableStyles}\n// // //             />\n// // //           </div>\n// // //         </div>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // const customTableStyles = {\n// // //   header: {\n// // //     style: {\n// // //       fontSize: '22px',\n// // //       fontWeight: 'bold',\n// // //       color: 'var(--text-color)',\n// // //       backgroundColor: 'var(--control-bg-color)',\n// // //     },\n// // //   },\n// // //   rows: {\n// // //     style: {\n// // //       fontSize: '16px',\n// // //       color: 'var(--text-color)',\n// // //       backgroundColor: 'var(--input-bg-color)',\n// // //       '&:not(:last-of-type)': {\n// // //         borderBottomStyle: 'solid',\n// // //         borderBottomWidth: '1px',\n// // //         borderBottomColor: 'var(--control-bg-color)',\n// // //       },\n// // //     },\n// // //   },\n// // //   headCells: {\n// // //     style: {\n// // //       fontSize: '18px',\n// // //       fontWeight: 'bold',\n// // //       color: 'var(--text-color)',\n// // //       backgroundColor: 'var(--control-bg-color)',\n// // //     },\n// // //   },\n// // //   cells: {\n// // //     style: {\n// // //       fontSize: '16px',\n// // //       color: 'var(--text-color)',\n// // //       backgroundColor: 'var(--input-bg-color)',\n// // //     },\n// // //   },\n// // // };\n\n// // // export default Graph;\n\n// // import React, { useState, useEffect, useRef } from \"react\";\n// // import Highcharts from \"highcharts\";\n// // import HighchartsReact from \"highcharts-react-official\";\n// // import HighchartsBoost from \"highcharts/modules/boost\";\n// // import HighchartsExporting from \"highcharts/modules/exporting\";\n// // import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// // import HighchartsMore from \"highcharts/highcharts-more\";\n// // import DataTable from \"react-data-table-component\";\n// // import DatePicker from \"react-datepicker\";\n// // import \"react-datepicker/dist/react-datepicker.css\";\n// // import Topbar from \"./Topbar\";\n// // import Selector from \"./Selector\";\n// // import \"../Styles/Graph.css\";\n\n// // HighchartsBoost(Highcharts);\n// // HighchartsExporting(Highcharts);\n// // HighchartsAnnotations(Highcharts);\n// // HighchartsMore(Highcharts);\n\n// // const Graph = () => {\n// //   const [compareWithTarget, setCompareWithTarget] = useState(false);\n// //   const [selectedCurrencies, setSelectedCurrencies] = useState([\n// //     { value: \"AUD\", label: \"AUD\" },\n// //     { value: \"EUR\", label: \"EUR\" },\n// //     { value: \"GBP\", label: \"GBP\" },\n// //     { value: \"JPY\", label: \"JPY\" },\n// //     { value: \"USD\", label: \"USD\" }\n// //   ]);\n// //   const [summary, setSummary] = useState(\"\");\n// //   const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n// //   const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n// //   const [data, setData] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [isDarkMode, setIsDarkMode] = useState(true);\n// //   const latestSummaryRef = useRef(\"\");\n// //   const chartRef = useRef(null);\n\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       try {\n// //         const response = await fetch(\"http://localhost:5000/xva\");\n// //         const result = await response.json();\n// //         setData(result);\n// //         setLoading(false);\n// //       } catch (error) {\n// //         console.error(\"Error fetching data:\", error);\n// //         setLoading(false);\n// //       }\n// //     };\n// //     fetchData();\n// //   }, []);\n\n// //   const getFilteredData = () => {\n// //     return data.filter((d) => {\n// //       const date = new Date(d.Date).getTime();\n// //       return date >= startDate.getTime() && date <= endDate.getTime();\n// //     });\n// //   };\n\n// //   useEffect(() => {\n// //     if (!loading && data.length > 0) {\n// //       const updateSummary = () => {\n// //         if (summary !== latestSummaryRef.current) {\n// //           setSummary(latestSummaryRef.current);\n// //         }\n// //       };\n// //       const interval = setInterval(updateSummary, 1000);\n// //       return () => clearInterval(interval);\n// //     }\n// //   }, [loading, data, summary]);\n\n// //   const filteredData = getFilteredData();\n\n// //   const totalLine = {\n// //     name: \"Total\",\n// //     data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n// //     color: isDarkMode ? \"#007bff\" : \"#343a40\",\n// //     marker: { enabled: false },\n// //     zIndex: 1,\n// //     boostThreshold: 1,\n// //   };\n\n// //   const shadeData = {\n// //     name: \"Shaded Area\",\n// //     data: filteredData.map((d) => ({\n// //       x: new Date(d.Date).getTime(),\n// //       low: Math.min(d.Total, d.Target),\n// //       high: Math.max(d.Total, d.Target),\n// //     })),\n// //     type: \"arearange\",\n// //     lineWidth: 0,\n// //     linkedTo: \"Total\",\n// //     color: \"#2E8C39\",\n// //     fillOpacity: 0.3,\n// //     zIndex: 0,\n// //     marker: { enabled: false },\n// //     boostThreshold: 0,\n// //     boost: false,\n// //   };\n\n// //   const getData = () => {\n// //     const compareData = [\n// //       ...selectedCurrencies.map((currency) => ({\n// //         name: currency.value,\n// //         data: filteredData.map((d) => [\n// //           new Date(d.Date).getTime(),\n// //           d[currency.value],\n// //         ]),\n// //         color: getCurrencyColor(currency.value),\n// //         marker: { enabled: false },\n// //         boostThreshold: 1,\n// //       })),\n// //       totalLine,\n// //       {\n// //         name: \"Target\",\n// //         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n// //         color: \"#007bff\",\n// //         marker: { enabled: false },\n// //         zIndex: 1,\n// //         boostThreshold: 1,\n// //       },\n// //       shadeData,\n// //     ];\n// //     return compareWithTarget ? compareData : compareData.slice(0, -1);\n// //   };\n\n// //   const getCurrencyColor = (currency) => {\n// //     switch (currency) {\n// //       case \"AUD\":\n// //         return \"#FFD700\";\n// //       case \"EUR\":\n// //         return \"#FF6347\";\n// //       case \"GBP\":\n// //         return \"#4682B4\";\n// //       case \"JPY\":\n// //         return \"#32CD32\";\n// //       case \"USD\":\n// //         return \"#FFA07A\";\n// //       case \"BRL\":\n// //         return \"#9400D3\";\n// //       case \"CAD\":\n// //         return \"#00FF00\";\n// //       case \"CHF\":\n// //         return \"#FF00FF\";\n// //       case \"CL\":\n// //         return \"#00FFFF\";\n// //       case \"CNY\":\n// //         return \"#FF4500\";\n// //       case \"CZK\":\n// //         return \"#FF1493\";\n// //       case \"DKK\":\n// //         return \"#1E90FF\";\n// //       case \"HKD\":\n// //         return \"#FF69B4\";\n// //       case \"HUF\":\n// //         return \"#8A2BE2\";\n// //       case \"INR\":\n// //         return \"#00BFFF\";\n// //       case \"KRW\":\n// //         return \"#7B68EE\";\n// //       case \"NOK\":\n// //         return \"#FFD700\";\n// //       case \"NZD\":\n// //         return \"#FF6347\";\n// //       case \"PLN\":\n// //         return \"#4682B4\";\n// //       case \"SEK\":\n// //         return \"#32CD32\";\n// //       case \"SGD\":\n// //         return \"#FFA07A\";\n// //       case \"THB\":\n// //         return \"#9400D3\";\n// //       case \"TWD\":\n// //         return \"#00FF00\";\n// //       case \"ZAR\":\n// //         return \"#FF00FF\";\n// //       default:\n// //         return \"#FF4500\";\n// //     }\n// //   };\n\n// //   return (\n// //     <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n// //       <Topbar />\n// //       <div className=\"selectors-container\">\n// //         <Selector\n// //           options={[\n// //             { value: \"AUD\", label: \"AUD\" },\n// //             { value: \"EUR\", label: \"EUR\" },\n// //             { value: \"GBP\", label: \"GBP\" },\n// //             { value: \"JPY\", label: \"JPY\" },\n// //             { value: \"USD\", label: \"USD\" },\n// //             { value: \"BRL\", label: \"BRL\" },\n// //             { value: \"CAD\", label: \"CAD\" },\n// //             { value: \"CHF\", label: \"CHF\" },\n// //             { value: \"CLP\", label: \"CLP\" },\n// //             { value: \"CNY\", label: \"CNY\" },\n// //             { value: \"CZK\", label: \"CZK\" },\n// //             { value: \"DKK\", label: \"DKK\" },\n// //             { value: \"HKD\", label: \"HKD\" },\n// //             { value: \"HUF\", label: \"HUF\" },\n// //             { value: \"INR\", label: \"INR\" },\n// //             { value: \"KRW\", label: \"KRW\" },\n// //             { value: \"MXN\", label: \"MXN\" },\n// //             { value: \"NOK\", label: \"NOK\" },\n// //             { value: \"NZD\", label: \"NZD\" },\n// //             { value: \"PLN\", label: \"PLN\" },\n// //             { value: \"SEK\", label: \"SEK\" },\n// //             { value: \"SGD\", label: \"SGD\" },\n// //             { value: \"THB\", label: \"THB\" },\n// //             { value: \"TWD\", label: \"TWD\" },\n// //             { value: \"ZAR\", label: \"ZAR\" },\n// //           ]}\n// //           selectedCurrencies={selectedCurrencies}\n// //           setSelectedCurrencies={setSelectedCurrencies}\n// //         />\n// //         <div className=\"date-picker\">\n// //           <DatePicker\n// //             selected={startDate}\n// //             onChange={(date) => setStartDate(date)}\n// //             selectsStart\n// //             startDate={startDate}\n// //             endDate={endDate}\n// //             className=\"date-input\"\n// //           />\n// //           <DatePicker\n// //             selected={endDate}\n// //             onChange={(date) => setEndDate(date)}\n// //             selectsEnd\n// //             startDate={startDate}\n// //             endDate={endDate}\n// //             minDate={startDate}\n// //             className=\"date-input\"\n// //           />\n// //         </div>\n// //       </div>\n// //       <div className=\"main-panel\">\n// //         <HighchartsReact\n// //           className=\"chart-actual\"\n// //           highcharts={Highcharts}\n// //           options={{\n// //             chart: {\n// //               type: \"line\",\n// //               zoomType: \"x\",\n// //               backgroundColor: {\n// //                 linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n// //                 stops: isDarkMode\n// //                   ? [\n// //                       [0, \"#2e2e2e\"],\n// //                       [1, \"#1a1a1a\"],\n// //                     ]\n// //                   : [\n// //                       [0, \"#ffffff\"],\n// //                       [1, \"#f0f0f0\"],\n// //                     ],\n// //               },\n// //               borderRadius: 10, // Rounded corners\n// //               style: {\n// //                 fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n// //               },\n// //               plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //               plotBorderWidth: 1,\n// //               events: {\n// //                 load: function () {\n// //                   this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n// //                 },\n// //               },\n// //               boost: {\n// //                 useGPUTranslations: true,\n// //                 usePreAllocated: true,\n// //               },\n// //             },\n// //             title: {\n// //               text: \"LCH Notional\",\n// //               style: {\n// //                 color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //                 fontSize: \"22px\",\n// //                 fontWeight: \"bold\",\n// //               },\n// //             },\n// //             xAxis: {\n// //               type: \"datetime\",\n// //               title: {\n// //                 text: \"Date\",\n// //                 style: {\n// //                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                   fontSize: \"14px\",\n// //                   fontWeight: \"bold\",\n// //                 },\n// //               },\n// //               lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //               tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //               labels: {\n// //                 style: {\n// //                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                   fontSize: \"12px\",\n// //                 },\n// //               },\n// //             },\n// //             yAxis: {\n// //               title: {\n// //                 text: \"Notional (USD)\",\n// //                 style: {\n// //                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                   fontSize: \"14px\",\n// //                   fontWeight: \"bold\",\n// //                 },\n// //               },\n// //               gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //               labels: {\n// //                 style: {\n// //                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                   fontSize: \"12px\",\n// //                 },\n// //               },\n// //             },\n// //             legend: {\n// //               layout: \"horizontal\",\n// //               align: \"center\",\n// //               verticalAlign: \"bottom\",\n// //               itemStyle: {\n// //                 color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //                 fontSize: \"14px\",\n// //                 fontWeight: \"bold\",\n// //               },\n// //               itemHoverStyle: {\n// //                 color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //               },\n// //               itemHiddenStyle: {\n// //                 color: isDarkMode ? \"#666666\" : \"#999999\",\n// //               },\n// //             },\n// //             tooltip: {\n// //               shared: true,\n// //               backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n// //               borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n// //               style: {\n// //                 color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //               },\n// //               formatter: function () {\n// //                 const points = this.points;\n// //                 let targetValue = null;\n// //                 let totalValue = null;\n\n// //                 points.forEach((point) => {\n// //                   if (point.series.name === \"Target\") {\n// //                     targetValue = point.y;\n// //                   }\n// //                   if (point.series.name === \"Total\") {\n// //                     totalValue = point.y;\n// //                   }\n// //                 });\n\n// //                 if (targetValue !== null && totalValue !== null) {\n// //                   const difference = (totalValue - targetValue).toFixed(2);\n// //                   const totalBreakdown = selectedCurrencies\n// //                     .map((currency) => {\n// //                       const point = points.find((p) => p.series.name === currency.value);\n// //                       return point\n// //                         ? `${currency.value}: ${point.y.toFixed(2)}`\n// //                         : `${currency.value}: N/A`;\n// //                     })\n// //                     .join(\"<br>\");\n\n// //                   let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n// //                   summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n// //                   summaryHTML += `Difference: ${difference}<br><br>`;\n// //                   summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n// //                   latestSummaryRef.current = summaryHTML;\n\n// //                   return points.reduce((s, point) => {\n// //                     return (\n// //                       s +\n// //                       `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// //                     );\n// //                   }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// //                 }\n// //                 return points.reduce((s, point) => {\n// //                   return (\n// //                     s +\n// //                     `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// //                   );\n// //                 }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// //               },\n// //             },\n// //             series: getData(),\n// //             navigation: {\n// //               buttonOptions: {\n// //                 enabled: true,\n// //                 theme: {\n// //                   fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// //                   stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n// //                   style: {\n// //                     color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //                   },\n// //                 },\n// //               },\n// //             },\n// //             exporting: {\n// //               buttons: {\n// //                 contextButton: {\n// //                   symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                   theme: {\n// //                     fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// //                   },\n// //                 },\n// //               },\n// //             },\n// //           }}\n// //           containerProps={{ className: \"chart-container\" }}\n// //           updateArgs={[true, true, true]}\n// //           ref={chartRef}\n// //         />\n// //         {compareWithTarget && (\n// //           <div className=\"summary-box\">\n// //             <h3>Summary</h3>\n// //             <div dangerouslySetInnerHTML={{ __html: summary }} />\n// //           </div>\n// //         )}\n// //         <div className=\"data-table-section\">\n// //           <DataTable\n// //             title=\"LCH Notional | Summary Table\"\n// //             columns={[\n// //               { name: \"Date\", selector: (row) => row.Date, sortable: true },\n// //               { name: \"Target\", selector: (row) => row.Target, sortable: true },\n// //               ...selectedCurrencies.map((currency) => ({\n// //                 name: currency.label,\n// //                 selector: (row) => row[currency.value],\n// //                 sortable: true,\n// //               })),\n// //               { name: \"Total\", selector: (row) => row.Total, sortable: true },\n// //             ]}\n// //             data={filteredData.map((d) => {\n// //               const rowData = {\n// //                 Date: d.Date,\n// //                 Target: d.Target,\n// //                 Total: d.Total,\n// //               };\n// //               selectedCurrencies.forEach((currency) => {\n// //                 rowData[currency.value] = d[currency.value];\n// //               });\n// //               return rowData;\n// //             })}\n// //             pagination\n// //             highlightOnHover\n// //             pointerOnHover\n// //             customStyles={{\n// //               header: {\n// //                 style: {\n// //                   fontSize: '22px',\n// //                   fontWeight: 'bold',\n// //                   color: 'var(--text-color)',\n// //                   backgroundColor: 'var(--control-bg-color)',\n// //                 },\n// //               },\n// //               rows: {\n// //                 style: {\n// //                   fontSize: '16px',\n// //                   color: 'var(--text-color)',\n// //                   backgroundColor: 'var(--input-bg-color)',\n// //                   '&:not(:last-of-type)': {\n// //                     borderBottomStyle: 'solid',\n// //                     borderBottomWidth: '1px',\n// //                     borderBottomColor: 'var(--control-bg-color)',\n// //                   },\n// //                 },\n// //               },\n// //               headCells: {\n// //                 style: {\n// //                   fontSize: '18px',\n// //                   fontWeight: 'bold',\n// //                   color: 'var(--text-color)',\n// //                   backgroundColor: 'var(--control-bg-color)',\n// //                 },\n// //               },\n// //               cells: {\n// //                 style: {\n// //                   fontSize: '16px',\n// //                   color: 'var(--text-color)',\n// //                   backgroundColor: 'var(--input-bg-color)',\n// //                 },\n// //               },\n// //             }}\n// //           />\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default Graph;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import Highcharts from \"highcharts\";\n// import HighchartsReact from \"highcharts-react-official\";\n// import HighchartsBoost from \"highcharts/modules/boost\";\n// import HighchartsExporting from \"highcharts/modules/exporting\";\n// import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// import HighchartsMore from \"highcharts/highcharts-more\";\n// import DataTable from \"react-data-table-component\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import Topbar from \"./Topbar\";\n// import Selector from \"./Selector\";\n// import \"../Styles/Graph.css\";\n\n// HighchartsBoost(Highcharts);\n// HighchartsExporting(Highcharts);\n// HighchartsAnnotations(Highcharts);\n// HighchartsMore(Highcharts);\n\n// const Graph = () => {\n//   const [compareWithTarget, setCompareWithTarget] = useState(false);\n//   const [selectedCurrencies, setSelectedCurrencies] = useState([\n//     { value: \"AUD\", label: \"AUD\" },\n//     { value: \"EUR\", label: \"EUR\" },\n//     { value: \"GBP\", label: \"GBP\" },\n//     { value: \"JPY\", label: \"JPY\" },\n//     { value: \"USD\", label: \"USD\" }\n//   ]);\n//   const [summary, setSummary] = useState(\"\");\n//   const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n//   const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n//   const [data, setData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [isDarkMode, setIsDarkMode] = useState(true);\n//   const latestSummaryRef = useRef(\"\");\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:5000/xva\");\n//         const result = await response.json();\n//         setData(result);\n//         setLoading(false);\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         setLoading(false);\n//       }\n//     };\n//     fetchData();\n//   }, []);\n\n//   const getFilteredData = () => {\n//     return data.filter((d) => {\n//       const date = new Date(d.Date).getTime();\n//       return date >= startDate.getTime() && date <= endDate.getTime();\n//     });\n//   };\n\n//   useEffect(() => {\n//     if (!loading && data.length > 0) {\n//       const updateSummary = () => {\n//         if (summary !== latestSummaryRef.current) {\n//           setSummary(latestSummaryRef.current);\n//         }\n//       };\n//       const interval = setInterval(updateSummary, 1000);\n//       return () => clearInterval(interval);\n//     }\n//   }, [loading, data, summary]);\n\n//   const filteredData = getFilteredData();\n\n//   const totalLine = {\n//     name: \"Total\",\n//     data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n//     color: isDarkMode ? \"#007bff\" : \"#343a40\",\n//     marker: { enabled: false },\n//     zIndex: 1,\n//     boostThreshold: 1,\n//   };\n\n//   const shadeData = {\n//     name: \"Shaded Area\",\n//     data: filteredData.map((d) => ({\n//       x: new Date(d.Date).getTime(),\n//       low: Math.min(d.Total, d.Target),\n//       high: Math.max(d.Total, d.Target),\n//     })),\n//     type: \"arearange\",\n//     lineWidth: 0,\n//     linkedTo: \"Total\",\n//     color: \"#2E8C39\",\n//     fillOpacity: 0.3,\n//     zIndex: 0,\n//     marker: { enabled: false },\n//     boostThreshold: 0,\n//     boost: false,\n//   };\n\n//   const getData = () => {\n//     const compareData = [\n//       ...selectedCurrencies.map((currency) => ({\n//         name: currency.value,\n//         data: filteredData.map((d) => [\n//           new Date(d.Date).getTime(),\n//           d[currency.value],\n//         ]),\n//         color: getCurrencyColor(currency.value),\n//         marker: { enabled: false },\n//         boostThreshold: 1,\n//       })),\n//       totalLine,\n//       {\n//         name: \"Target\",\n//         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n//         color: \"#007bff\",\n//         marker: { enabled: false },\n//         zIndex: 1,\n//         boostThreshold: 1,\n//       },\n//       shadeData,\n//     ];\n//     return compareWithTarget ? compareData : compareData.slice(0, -1);\n//   };\n\n//   const getCurrencyColor = (currency) => {\n//     switch (currency) {\n//       case \"AUD\":\n//         return \"#FFD700\";\n//       case \"EUR\":\n//         return \"#FF6347\";\n//       case \"GBP\":\n//         return \"#4682B4\";\n//       case \"JPY\":\n//         return \"#32CD32\";\n//       case \"USD\":\n//         return \"#FFA07A\";\n//       case \"BRL\":\n//         return \"#9400D3\";\n//       case \"CAD\":\n//         return \"#00FF00\";\n//       case \"CHF\":\n//         return \"#FF00FF\";\n//       case \"CLP\":\n//         return \"#00FFFF\";\n//       case \"CNY\":\n//         return \"#FF4500\";\n//       case \"CZK\":\n//         return \"#FF1493\";\n//       case \"DKK\":\n//         return \"#1E90FF\";\n//       case \"HKD\":\n//         return \"#FF69B4\";\n//       case \"HUF\":\n//         return \"#8A2BE2\";\n//       case \"INR\":\n//         return \"#00BFFF\";\n//       case \"KRW\":\n//         return \"#7B68EE\";\n//       case \"NOK\":\n//         return \"#FFD700\";\n//       case \"NZD\":\n//         return \"#FF6347\";\n//       case \"PLN\":\n//         return \"#4682B4\";\n//       case \"SEK\":\n//         return \"#32CD32\";\n//       case \"SGD\":\n//         return \"#FFA07A\";\n//       case \"THB\":\n//         return \"#9400D3\";\n//       case \"TWD\":\n//         return \"#00FF00\";\n//       case \"ZAR\":\n//         return \"#FF00FF\";\n//       default:\n//         return \"#FF4500\";\n//     }\n//   };\n\n//   return (\n//     <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n//       <Topbar />\n//       <div className=\"selectors-container\">\n//         <div className=\"currency-selector\">\n//           <label>Select Currencies:</label>\n//           <Selector\n//             options={[\n//               { value: \"AUD\", label: \"AUD\" },\n//               { value: \"EUR\", label: \"EUR\" },\n//               { value: \"GBP\", label: \"GBP\" },\n//               { value: \"JPY\", label: \"JPY\" },\n//               { value: \"USD\", label: \"USD\" },\n//               { value: \"BRL\", label: \"BRL\" },\n//               { value: \"CAD\", label: \"CAD\" },\n//               { value: \"CHF\", label: \"CHF\" },\n//               { value: \"CLP\", label: \"CLP\" },\n//               { value: \"CNY\", label: \"CNY\" },\n//               { value: \"CZK\", label: \"CZK\" },\n//               { value: \"DKK\", label: \"DKK\" },\n//               { value: \"HKD\", label: \"HKD\" },\n//               { value: \"HUF\", label: \"HUF\" },\n//               { value: \"INR\", label: \"INR\" },\n//               { value: \"KRW\", label: \"KRW\" },\n//               { value: \"MXN\", label: \"MXN\" },\n//               { value: \"NOK\", label: \"NOK\" },\n//               { value: \"NZD\", label: \"NZD\" },\n//               { value: \"PLN\", label: \"PLN\" },\n//               { value: \"SEK\", label: \"SEK\" },\n//               { value: \"SGD\", label: \"SGD\" },\n//               { value: \"THB\", label: \"THB\" },\n//               { value: \"TWD\", label: \"TWD\" },\n//               { value: \"ZAR\", label: \"ZAR\" },\n//             ]}\n//             selectedCurrencies={selectedCurrencies}\n//             setSelectedCurrencies={setSelectedCurrencies}\n//           />\n//         </div>\n//         <div className=\"date-picker\">\n//           <label>Select Date Range:</label>\n//           <DatePicker\n//             selected={startDate}\n//             onChange={(date) => setStartDate(date)}\n//             selectsStart\n//             startDate={startDate}\n//             endDate={endDate}\n//             className=\"date-input\"\n//           />\n//           <DatePicker\n//             selected={endDate}\n//             onChange={(date) => setEndDate(date)}\n//             selectsEnd\n//             startDate={startDate}\n//             endDate={endDate}\n//             minDate={startDate}\n//             className=\"date-input\"\n//           />\n//         </div>\n//       </div>\n//       <div className=\"main-panel\">\n//         <HighchartsReact\n//           className=\"chart-actual\"\n//           highcharts={Highcharts}\n//           options={{\n//             chart: {\n//               type: \"line\",\n//               zoomType: \"x\",\n//               backgroundColor: {\n//                 linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n//                 stops: isDarkMode\n//                   ? [\n//                       [0, \"#2e2e2e\"],\n//                       [1, \"#1a1a1a\"],\n//                     ]\n//                   : [\n//                       [0, \"#ffffff\"],\n//                       [1, \"#f0f0f0\"],\n//                     ],\n//               },\n//               borderRadius: 10, // Rounded corners\n//               style: {\n//                 fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n//               },\n//               plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//               plotBorderWidth: 1,\n//               events: {\n//                 load: function () {\n//                   this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n//                 },\n//               },\n//               boost: {\n//                 useGPUTranslations: true,\n//                 usePreAllocated: true,\n//               },\n//             },\n//             title: {\n//               text: \"LCH Notional\",\n//               style: {\n//                 color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                 fontSize: \"22px\",\n//                 fontWeight: \"bold\",\n//               },\n//             },\n//             xAxis: {\n//               type: \"datetime\",\n//               title: {\n//                 text: \"Date\",\n//                 style: {\n//                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                   fontSize: \"14px\",\n//                   fontWeight: \"bold\",\n//                 },\n//               },\n//               lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//               tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//               labels: {\n//                 style: {\n//                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                   fontSize: \"12px\",\n//                 },\n//               },\n//             },\n//             yAxis: {\n//               title: {\n//                 text: \"Notional (USD)\",\n//                 style: {\n//                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                   fontSize: \"14px\",\n//                   fontWeight: \"bold\",\n//                 },\n//               },\n//               gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//               labels: {\n//                 style: {\n//                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                   fontSize: \"12px\",\n//                 },\n//               },\n//             },\n//             legend: {\n//               layout: \"horizontal\",\n//               align: \"center\",\n//               verticalAlign: \"bottom\",\n//               itemStyle: {\n//                 color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                 fontSize: \"14px\",\n//                 fontWeight: \"bold\",\n//               },\n//               itemHoverStyle: {\n//                 color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//               },\n//               itemHiddenStyle: {\n//                 color: isDarkMode ? \"#666666\" : \"#999999\",\n//               },\n//             },\n//             tooltip: {\n//               shared: true,\n//               backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n//               borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n//               style: {\n//                 color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//               },\n//               formatter: function () {\n//                 const points = this.points;\n//                 let targetValue = null;\n//                 let totalValue = null;\n\n//                 points.forEach((point) => {\n//                   if (point.series.name === \"Target\") {\n//                     targetValue = point.y;\n//                   }\n//                   if (point.series.name === \"Total\") {\n//                     totalValue = point.y;\n//                   }\n//                 });\n\n//                 if (targetValue !== null && totalValue !== null) {\n//                   const difference = (totalValue - targetValue).toFixed(2);\n//                   const totalBreakdown = selectedCurrencies\n//                     .map((currency) => {\n//                       const point = points.find((p) => p.series.name === currency.value);\n//                       return point\n//                         ? `${currency.value}: ${point.y.toFixed(2)}`\n//                         : `${currency.value}: N/A`;\n//                     })\n//                     .join(\"<br>\");\n\n//                   let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n//                   summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n//                   summaryHTML += `Difference: ${difference}<br><br>`;\n//                   summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n//                   latestSummaryRef.current = summaryHTML;\n\n//                   return points.reduce((s, point) => {\n//                     return (\n//                       s +\n//                       `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//                     );\n//                   }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n//                 }\n//                 return points.reduce((s, point) => {\n//                   return (\n//                     s +\n//                     `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//                   );\n//                 }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n//               },\n//             },\n//             series: getData(),\n//             navigation: {\n//               buttonOptions: {\n//                 enabled: true,\n//                 theme: {\n//                   fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//                   stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n//                   style: {\n//                     color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                   },\n//                 },\n//               },\n//             },\n//             exporting: {\n//               buttons: {\n//                 contextButton: {\n//                   symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                   theme: {\n//                     fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//                   },\n//                 },\n//               },\n//             },\n//           }}\n//           containerProps={{ className: \"chart-container\" }}\n//           updateArgs={[true, true, true]}\n//           ref={chartRef}\n//         />\n//         {compareWithTarget && (\n//           <div className=\"summary-box\">\n//             <h3>Summary</h3>\n//             <div dangerouslySetInnerHTML={{ __html: summary }} />\n//           </div>\n//         )}\n//         <div className=\"data-table-section\">\n//           <DataTable\n//             title=\"LCH Notional | Summary Table\"\n//             columns={[\n//               { name: \"Date\", selector: (row) => row.Date, sortable: true },\n//               { name: \"Target\", selector: (row) => row.Target, sortable: true },\n//               ...selectedCurrencies.map((currency) => ({\n//                 name: currency.label,\n//                 selector: (row) => row[currency.value],\n//                 sortable: true,\n//               })),\n//               { name: \"Total\", selector: (row) => row.Total, sortable: true },\n//             ]}\n//             data={filteredData.map((d) => {\n//               const rowData = {\n//                 Date: d.Date,\n//                 Target: d.Target,\n//                 Total: d.Total,\n//               };\n//               selectedCurrencies.forEach((currency) => {\n//                 rowData[currency.value] = d[currency.value];\n//               });\n//               return rowData;\n//             })}\n//             pagination\n//             highlightOnHover\n//             pointerOnHover\n//             customStyles={{\n//               header: {\n//                 style: {\n//                   fontSize: '22px',\n//                   fontWeight: 'bold',\n//                   color: 'var(--text-color)',\n//                   backgroundColor: 'var(--control-bg-color)',\n//                 },\n//               },\n//               rows: {\n//                 style: {\n//                   fontSize: '16px',\n//                   color: 'var(--text-color)',\n//                   backgroundColor: 'var(--input-bg-color)',\n//                   '&:not(:last-of-type)': {\n//                     borderBottomStyle: 'solid',\n//                     borderBottomWidth: '1px',\n//                     borderBottomColor: 'var(--control-bg-color)',\n//                   },\n//                 },\n//               },\n//               headCells: {\n//                 style: {\n//                   fontSize: '18px',\n//                   fontWeight: 'bold',\n//                   color: 'var(--text-color)',\n//                   backgroundColor: 'var(--control-bg-color)',\n//                 },\n//               },\n//               cells: {\n//                 style: {\n//                   fontSize: '16px',\n//                   color: 'var(--text-color)',\n//                   backgroundColor: 'var(--input-bg-color)',\n//                 },\n//               },\n//             }}\n//           />\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Graph;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport HighchartsBoost from \"highcharts/modules/boost\";\nimport HighchartsExporting from \"highcharts/modules/exporting\";\nimport HighchartsAnnotations from \"highcharts/modules/annotations\";\nimport HighchartsMore from \"highcharts/highcharts-more\";\nimport DataTable from \"react-data-table-component\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Topbar from \"./Topbar\";\nimport Selector from \"./Selector\";\nimport \"../Styles/Graph.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nHighchartsBoost(Highcharts);\nHighchartsExporting(Highcharts);\nHighchartsAnnotations(Highcharts);\nHighchartsMore(Highcharts);\nconst Graph = () => {\n  _s();\n  const [compareWithTarget, setCompareWithTarget] = useState(false);\n  const [selectedCurrencies, setSelectedCurrencies] = useState([{\n    value: \"AUD\",\n    label: \"AUD\"\n  }, {\n    value: \"EUR\",\n    label: \"EUR\"\n  }, {\n    value: \"GBP\",\n    label: \"GBP\"\n  }, {\n    value: \"JPY\",\n    label: \"JPY\"\n  }, {\n    value: \"USD\",\n    label: \"USD\"\n  }]);\n  const [summary, setSummary] = useState(\"\");\n  const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n  const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const latestSummaryRef = useRef(\"\");\n  const chartRef = useRef(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/xva\");\n        const result = await response.json();\n        setData(result);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  const getFilteredData = () => {\n    return data.filter(d => {\n      const date = new Date(d.Date).getTime();\n      return date >= startDate.getTime() && date <= endDate.getTime();\n    });\n  };\n  useEffect(() => {\n    if (!loading && data.length > 0) {\n      const updateSummary = () => {\n        if (summary !== latestSummaryRef.current) {\n          setSummary(latestSummaryRef.current);\n        }\n      };\n      const interval = setInterval(updateSummary, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [loading, data, summary]);\n  const filteredData = getFilteredData();\n  const totalLine = {\n    name: \"Total\",\n    data: filteredData.map(d => [new Date(d.Date).getTime(), d.Total]),\n    color: isDarkMode ? \"#007bff\" : \"#343a40\",\n    marker: {\n      enabled: false\n    },\n    zIndex: 1,\n    boostThreshold: 1\n  };\n  const shadeData = {\n    name: \"Shaded Area\",\n    data: filteredData.map(d => ({\n      x: new Date(d.Date).getTime(),\n      low: Math.min(d.Total, d.Target),\n      high: Math.max(d.Total, d.Target)\n    })),\n    type: \"arearange\",\n    lineWidth: 0,\n    linkedTo: \"Total\",\n    color: \"#2E8C39\",\n    fillOpacity: 0.3,\n    zIndex: 0,\n    marker: {\n      enabled: false\n    },\n    boostThreshold: 0,\n    boost: false\n  };\n  const handleCurrencyChange = selectedOptions => {\n    setSelectedCurrencies(selectedOptions);\n  };\n  const getData = () => {\n    const compareData = [...selectedCurrencies.map(currency => ({\n      name: currency.value,\n      data: filteredData.map(d => [new Date(d.Date).getTime(), d[currency.value]]),\n      color: getCurrencyColor(currency.value),\n      marker: {\n        enabled: false\n      },\n      boostThreshold: 1\n    })), totalLine, {\n      name: \"Target\",\n      data: filteredData.map(d => [new Date(d.Date).getTime(), d.Target]),\n      color: \"#007bff\",\n      marker: {\n        enabled: false\n      },\n      zIndex: 1,\n      boostThreshold: 1\n    }, shadeData];\n    return compareWithTarget ? compareData : compareData.slice(0, -1);\n  };\n  const getCurrencyColor = currency => {\n    switch (currency) {\n      case \"AUD\":\n        return \"#FFD700\";\n      case \"EUR\":\n        return \"#FF6347\";\n      case \"GBP\":\n        return \"#4682B4\";\n      case \"JPY\":\n        return \"#32CD32\";\n      case \"USD\":\n        return \"#FFA07A\";\n      case \"BRL\":\n        return \"#9400D3\";\n      case \"CAD\":\n        return \"#00FF00\";\n      case \"CHF\":\n        return \"#FF00FF\";\n      case \"CLP\":\n        return \"#00FFFF\";\n      case \"CNY\":\n        return \"#FF4500\";\n      case \"CZK\":\n        return \"#FF1493\";\n      case \"DKK\":\n        return \"#1E90FF\";\n      case \"HKD\":\n        return \"#FF69B4\";\n      case \"HUF\":\n        return \"#8A2BE2\";\n      case \"INR\":\n        return \"#00BFFF\";\n      case \"KRW\":\n        return \"#7B68EE\";\n      case \"NOK\":\n        return \"#FFD700\";\n      case \"NZD\":\n        return \"#FF6347\";\n      case \"PLN\":\n        return \"#4682B4\";\n      case \"SEK\":\n        return \"#32CD32\";\n      case \"SGD\":\n        return \"#FFA07A\";\n      case \"THB\":\n        return \"#9400D3\";\n      case \"TWD\":\n        return \"#00FF00\";\n      case \"ZAR\":\n        return \"#FF00FF\";\n      default:\n        return \"#FF4500\";\n    }\n  };\n  const getColumns = () => {\n    const baseColumns = [{\n      name: \"Date\",\n      selector: row => row.Date,\n      sortable: true\n    }, {\n      name: \"Target\",\n      selector: row => row.Target,\n      sortable: true\n    }];\n    const currencyColumns = selectedCurrencies.map(currency => ({\n      name: currency.label,\n      selector: row => row[currency.value],\n      sortable: true\n    }));\n    return [...baseColumns, ...currencyColumns, {\n      name: \"Total\",\n      selector: row => row.Total,\n      sortable: true\n    }];\n  };\n  const getFilteredTableData = () => {\n    return filteredData.map(d => {\n      const rowData = {\n        Data: d.Date,\n        Target: d.Target,\n        Total: d.Total\n      };\n      selectedCurrencies.forEach(currency => {\n        rowData[currency.value] = d[currency.value];\n      });\n      return rowData;\n    });\n  };\n  const handleTooltipFormatter = function () {\n    const points = this.points;\n    let targetValue = null;\n    let totalValue = null;\n    points.forEach(point => {\n      if (point.series.name === \"Target\") {\n        targetValue = point.y;\n      }\n      if (point.series.name === \"Total\") {\n        totalValue = point.y;\n      }\n    });\n    if (targetValue !== null && totalValue !== null) {\n      const difference = (totalValue - targetValue).toFixed(2);\n      const totalBreakdown = selectedCurrencies.map(currency => {\n        const point = points.find(p => p.series.name === currency.value);\n        return point ? `${currency.value}: ${point.y.toFixed(2)}` : `${currency.value}: N/A`;\n      }).join(\"<br>\");\n      let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n      summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n      summaryHTML += `Difference: ${difference}<br><br>`;\n      summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n      latestSummaryRef.current = summaryHTML;\n      return points.reduce((s, point) => {\n        return s + `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`;\n      }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n    }\n    return points.reduce((s, point) => {\n      return s + `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`;\n    }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n  };\n  const options = {\n    chart: {\n      type: \"line\",\n      zoomType: \"x\",\n      backgroundColor: {\n        linearGradient: {\n          x1: 0,\n          y1: 0,\n          x2: 1,\n          y2: 1\n        },\n        stops: isDarkMode ? [[0, \"#2e2e2e\"], [1, \"#1a1a1a\"]] : [[0, \"#ffffff\"], [1, \"#f0f0f0\"]]\n      },\n      borderRadius: 10,\n      // Rounded corners\n      style: {\n        fontFamily: \"Helvetica, Arial, sans-serif\" // Font style for the chart\n      },\n      plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n      plotBorderWidth: 1,\n      events: {\n        load: function () {\n          this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n        }\n      },\n      boost: {\n        useGPUTranslations: true,\n        usePreAllocated: true\n      }\n    },\n    title: {\n      text: \"LCH Notional\",\n      style: {\n        color: isDarkMode ? \"#ffffff\" : \"#000000\",\n        fontSize: \"22px\",\n        fontWeight: \"bold\"\n      }\n    },\n    xAxis: {\n      type: \"datetime\",\n      title: {\n        text: \"Date\",\n        style: {\n          color: isDarkMode ? \"#cccccc\" : \"#000000\",\n          fontSize: \"14px\",\n          fontWeight: \"bold\"\n        }\n      },\n      lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n      tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n      labels: {\n        style: {\n          color: isDarkMode ? \"#cccccc\" : \"#000000\",\n          fontSize: \"12px\"\n        }\n      }\n    },\n    yAxis: {\n      title: {\n        text: \"Notional (USD)\",\n        style: {\n          color: isDarkMode ? \"#cccccc\" : \"#000000\",\n          fontSize: \"14px\",\n          fontWeight: \"bold\"\n        }\n      },\n      gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n      labels: {\n        style: {\n          color: isDarkMode ? \"#cccccc\" : \"#000000\",\n          fontSize: \"12px\"\n        }\n      }\n    },\n    legend: {\n      layout: \"horizontal\",\n      align: \"center\",\n      verticalAlign: \"bottom\",\n      itemStyle: {\n        color: isDarkMode ? \"#ffffff\" : \"#000000\",\n        fontSize: \"14px\",\n        fontWeight: \"bold\"\n      },\n      itemHoverStyle: {\n        color: isDarkMode ? \"#cccccc\" : \"#000000\"\n      },\n      itemHiddenStyle: {\n        color: isDarkMode ? \"#666666\" : \"#999999\"\n      }\n    },\n    tooltip: {\n      shared: true,\n      backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n      borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n      style: {\n        color: isDarkMode ? \"#ffffff\" : \"#000000\"\n      },\n      formatter: handleTooltipFormatter\n    },\n    series: getData(),\n    navigation: {\n      buttonOptions: {\n        enabled: true,\n        theme: {\n          fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n          stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n          style: {\n            color: isDarkMode ? \"#ffffff\" : \"#000000\"\n          }\n        }\n      }\n    },\n    exporting: {\n      buttons: {\n        contextButton: {\n          symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n          theme: {\n            fill: isDarkMode ? \"#444444\" : \"#f0f0f0\"\n          }\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    if (!loading && data.length > 0) {\n      Highcharts.charts.forEach(chart => {\n        if (chart) {\n          chart.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n          chart.series.forEach(series => {\n            series.setData(getData().find(s => s.name === series.name).data);\n          });\n        }\n      });\n    }\n  }, [startDate, endDate, selectedCurrencies, loading, data, isDarkMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(Topbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2002,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selectors-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"currency-selector\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Currencies:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2005,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Selector, {\n            selectedCurrencies: selectedCurrencies,\n            onChange: handleCurrencyChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2006,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2004,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"date-picker\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Date Range:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2009,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n            selected: startDate,\n            onChange: date => setStartDate(date),\n            selectsStart: true,\n            startDate: startDate,\n            endDate: endDate,\n            className: \"date-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2010,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n            selected: endDate,\n            onChange: date => setEndDate(date),\n            selectsEnd: true,\n            startDate: startDate,\n            endDate: endDate,\n            minDate: startDate,\n            className: \"date-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2018,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2008,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2003,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-panel\",\n        children: [/*#__PURE__*/_jsxDEV(HighchartsReact, {\n          className: \"chart-actual\",\n          highcharts: Highcharts,\n          options: options,\n          containerProps: {\n            className: \"chart-container\"\n          },\n          updateArgs: [true, true, true],\n          ref: chartRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2030,\n          columnNumber: 11\n        }, this), compareWithTarget && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Summary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2040,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: summary\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2041,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2039,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data-table-section\",\n          children: /*#__PURE__*/_jsxDEV(DataTable, {\n            title: \"LCH Notional | Summary Table\",\n            columns: getColumns(),\n            data: getFilteredTableData(),\n            pagination: true,\n            highlightOnHover: true,\n            pointerOnHover: true,\n            customStyles: customTableStyles\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2046,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 2045,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setCompareWithTarget(!compareWithTarget),\n            className: \"toggle-button\",\n            children: compareWithTarget ? \"Disable Compare with Target\" : \"Enable Compare with Target\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2058,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"toggle-button\",\n              children: \"Download\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2065,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dropdown-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => chartRef.current.chart.exportChart({\n                  type: \"image/png\"\n                }),\n                children: \"PNG\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2067,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => chartRef.current.chart.exportChart({\n                  type: \"image/jpeg\"\n                }),\n                children: \"JPEG\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2068,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => chartRef.current.chart.exportChart({\n                  type: \"application/pdf\"\n                }),\n                children: \"PDF\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2069,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => chartRef.current.chart.exportChart({\n                  type: \"image/svg+xml\"\n                }),\n                children: \"SVG\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2070,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2066,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2064,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2057,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 2029,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 2001,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 2000,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"sSvbbdz1vohRrXUt8z8ESpiC0Cc=\");\n_c = Graph;\nconst customTableStyles = {\n  header: {\n    style: {\n      fontSize: '22px',\n      fontWeight: 'bold',\n      color: 'var(--text-color)',\n      backgroundColor: 'var(--control-bg-color)'\n    }\n  },\n  rows: {\n    style: {\n      fontSize: '16px',\n      color: 'var(--text-color)',\n      backgroundColor: 'var(--input-bg-color)',\n      '&:not(:last-of-type)': {\n        borderBottomStyle: 'solid',\n        borderBottomWidth: '1px',\n        borderBottomColor: 'var(--control-bg-color)'\n      }\n    }\n  },\n  headCells: {\n    style: {\n      fontSize: '18px',\n      fontWeight: 'bold',\n      color: 'var(--text-color)',\n      backgroundColor: 'var(--control-bg-color)'\n    }\n  },\n  cells: {\n    style: {\n      fontSize: '16px',\n      color: 'var(--text-color)',\n      backgroundColor: 'var(--input-bg-color)'\n    }\n  }\n};\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Highcharts","HighchartsReact","HighchartsBoost","HighchartsExporting","HighchartsAnnotations","HighchartsMore","DataTable","DatePicker","Topbar","Selector","jsxDEV","_jsxDEV","Graph","_s","compareWithTarget","setCompareWithTarget","selectedCurrencies","setSelectedCurrencies","value","label","summary","setSummary","startDate","setStartDate","Date","endDate","setEndDate","data","setData","loading","setLoading","isDarkMode","setIsDarkMode","latestSummaryRef","chartRef","fetchData","response","fetch","result","json","error","console","getFilteredData","filter","d","date","getTime","length","updateSummary","current","interval","setInterval","clearInterval","filteredData","totalLine","name","map","Total","color","marker","enabled","zIndex","boostThreshold","shadeData","x","low","Math","min","Target","high","max","type","lineWidth","linkedTo","fillOpacity","boost","handleCurrencyChange","selectedOptions","getData","compareData","currency","getCurrencyColor","slice","getColumns","baseColumns","selector","row","sortable","currencyColumns","getFilteredTableData","rowData","Data","forEach","handleTooltipFormatter","points","targetValue","totalValue","point","series","y","difference","toFixed","totalBreakdown","find","p","join","summaryHTML","reduce","s","dateFormat","options","chart","zoomType","backgroundColor","linearGradient","x1","y1","x2","y2","stops","borderRadius","style","fontFamily","plotBorderColor","plotBorderWidth","events","load","xAxis","setExtremes","useGPUTranslations","usePreAllocated","title","text","fontSize","fontWeight","lineColor","tickColor","labels","yAxis","gridLineColor","legend","layout","align","verticalAlign","itemStyle","itemHoverStyle","itemHiddenStyle","tooltip","shared","borderColor","formatter","navigation","buttonOptions","theme","fill","stroke","exporting","buttons","contextButton","symbolStroke","charts","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","selected","selectsStart","selectsEnd","minDate","highcharts","containerProps","updateArgs","ref","dangerouslySetInnerHTML","__html","columns","pagination","highlightOnHover","pointerOnHover","customStyles","customTableStyles","onClick","exportChart","_c","header","rows","borderBottomStyle","borderBottomWidth","borderBottomColor","headCells","cells","$RefreshReg$"],"sources":["/Users/harshmishra/Desktop/dashboard/frontend/src/Components/Graph.jsx"],"sourcesContent":["// // // import React, { useState, useEffect, useRef } from \"react\";\n// // // import Highcharts from \"highcharts\";\n// // // import HighchartsReact from \"highcharts-react-official\";\n// // // import HighchartsBoost from \"highcharts/modules/boost\";\n// // // import HighchartsExporting from \"highcharts/modules/exporting\";\n// // // import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// // // import HighchartsMore from \"highcharts/highcharts-more\";\n// // // import DataTable from \"react-data-table-component\";\n// // // import DatePicker from \"react-datepicker\";\n// // // import \"react-datepicker/dist/react-datepicker.css\";\n// // // import Topbar from \"./Topbar\";\n// // // import \"../Styles/Graph.css\";\n// // // import Selector from \"./Selector\";  // Ensure to import the new component\n\n// // // HighchartsBoost(Highcharts);\n// // // HighchartsExporting(Highcharts);\n// // // HighchartsAnnotations(Highcharts);\n// // // HighchartsMore(Highcharts);\n\n// // // const Graph = () => {\n// // //   const [compareWithTarget, setCompareWithTarget] = useState(false);\n// // //   const [selectedCurrencies, setSelectedCurrencies] = useState([\n// // //     { value: \"AUD\", label: \"AUD\" },\n// // //     { value: \"EUR\", label: \"EUR\" },\n// // //     { value: \"GBP\", label: \"GBP\" },\n// // //     { value: \"JPY\", label: \"JPY\" },\n// // //     { value: \"USD\", label: \"USD\" },\n// // //   ]);\n// // //   const [summary, setSummary] = useState(\"\");\n// // //   const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n// // //   const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n// // //   const [data, setData] = useState([]);\n// // //   const [loading, setLoading] = useState(true);\n// // //   const [isDarkMode, setIsDarkMode] = useState(true);\n// // //   const latestSummaryRef = useRef(\"\");\n// // //   const chartRef = useRef(null);\n\n// // //   useEffect(() => {\n// // //     const fetchData = async () => {\n// // //       try {\n// // //         const response = await fetch(\"http://localhost:5000/xva\");\n// // //         const result = await response.json();\n// // //         setData(result);\n// // //         setLoading(false);\n// // //       } catch (error) {\n// // //         console.error('Error fetching data:', error);\n// // //         setLoading(false);\n// // //       }\n// // //     };\n// // //     fetchData();\n// // //   }, []);\n\n// // //   const getFilteredData = () => {\n// // //     return data.filter((d) => {\n// // //       const date = new Date(d.Date).getTime();\n// // //       return date >= startDate.getTime() && date <= endDate.getTime();\n// // //     });\n// // //   };\n\n// // //   const filteredData = getFilteredData();\n\n// // //   useEffect(() => {\n// // //     if (!loading && data.length > 0) {\n// // //       const updateSummary = () => {\n// // //         if (summary !== latestSummaryRef.current) {\n// // //           setSummary(latestSummaryRef.current);\n// // //         }\n// // //       };\n// // //       const interval = setInterval(updateSummary, 1000);\n// // //       return () => clearInterval(interval);\n// // //     }\n// // //   }, [loading, data, summary]);\n\n// // //   const totalLine = {\n// // //     name: \"Total\",\n// // //     data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n// // //     color: isDarkMode ? \"#007bff\" : \"#343a40\",\n// // //     marker: { enabled: false },\n// // //     zIndex: 1,\n// // //     boostThreshold: 1,\n// // //   };\n\n// // //   const shadeData = {\n// // //     name: \"Shaded Area\",\n// // //     data: filteredData.map((d) => ({\n// // //       x: new Date(d.Date).getTime(),\n// // //       low: Math.min(d.Total, d.Target),\n// // //       high: Math.max(d.Total, d.Target),\n// // //     })),\n// // //     type: \"arearange\",\n// // //     lineWidth: 0,\n// // //     linkedTo: \"Total\",\n// // //     color: \"#2E8C39\",\n// // //     fillOpacity: 0.3,\n// // //     zIndex: 0,\n// // //     marker: { enabled: false },\n// // //     boostThreshold: 0,\n// // //     boost: false,\n// // //   };\n\n// // //   const handleCurrencyChange = (selectedOptions) => {\n// // //     setSelectedCurrencies(selectedOptions);\n// // //   };\n\n// // //   const getData = () => {\n// // //     if (!filteredData || filteredData.length === 0) return [];\n\n// // //     const compareData = [\n// // //       ...selectedCurrencies.map((currency) => ({\n// // //         name: currency.value,\n// // //         data: filteredData.map((d) => [\n// // //           new Date(d.Date).getTime(),\n// // //           d[currency.value],\n// // //         ]),\n// // //         color: getCurrencyColor(currency.value),\n// // //         marker: { enabled: false },\n// // //         boostThreshold: 1,\n// // //       })),\n// // //       totalLine,\n// // //       {\n// // //         name: \"Target\",\n// // //         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n// // //         color: \"#007bff\",\n// // //         marker: { enabled: false },\n// // //         zIndex: 1,\n// // //         boostThreshold: 1,\n// // //       },\n// // //       shadeData,\n// // //     ];\n// // //     return compareWithTarget ? compareData : compareData.slice(0, -1);\n// // //   };\n\n// // //   const getCurrencyColor = (currency) => {\n// // //     switch (currency) {\n// // //       case \"AUD\":\n// // //         return \"#FFD700\";\n// // //       case \"EUR\":\n// // //         return \"#FF6347\";\n// // //       case \"GBP\":\n// // //         return \"#4682B4\";\n// // //       case \"JPY\":\n// // //         return \"#32CD32\";\n// // //       case \"USD\":\n// // //         return \"#FFA07A\";\n// // //       case \"BRL\":\n// // //         return \"#9400D3\";\n// // //       case \"CAD\":\n// // //         return \"#00FF00\";\n// // //       case \"CHF\":\n// // //         return \"#FF00FF\";\n// // //       case \"CLP\":\n// // //         return \"#00FFFF\";\n// // //       case \"CNY\":\n// // //         return \"#FF4500\";\n// // //       case \"CZK\":\n// // //         return \"#FF1493\";\n// // //       case \"DKK\":\n// // //         return \"#1E90FF\";\n// // //       case \"HKD\":\n// // //         return \"#FF69B4\";\n// // //       case \"HUF\":\n// // //         return \"#8A2BE2\";\n// // //       case \"INR\":\n// // //         return \"#00BFFF\";\n// // //       case \"KRW\":\n// // //         return \"#7B68EE\";\n// // //       case \"MXN\":\n// // //         return \"#F4C145\";\n// // //       case \"NOK\":\n// // //         return \"#FFD700\";\n// // //       case \"NZD\":\n// // //         return \"#FF6347\";\n// // //       case \"PLN\":\n// // //         return \"#4682B4\";\n// // //       case \"SEK\":\n// // //         return \"#32CD32\";\n// // //       case \"SGD\":\n// // //         return \"#FFA07A\";\n// // //       case \"THB\":\n// // //         return \"#9400D3\";\n// // //       case \"TWD\":\n// // //         return \"#00FF00\";\n// // //       case \"ZAR\":\n// // //         return \"#FF00FF\";\n// // //       default:\n// // //         return \"#FF4500\";\n// // //     }\n// // //   };\n\n// // //   const getColumns = () => {\n// // //     const baseColumns = [\n// // //       { name: \"Date\", selector: (row) => row.Date, sortable: true },\n// // //       { name: \"Target\", selector: (row) => row.Target, sortable: true },\n// // //     ];\n\n// // //     const currencyColumns = selectedCurrencies.map((currency) => ({\n// // //       name: currency.label,\n// // //       selector: (row) => row[currency.value],\n// // //       sortable: true,\n// // //     }));\n\n// // //     return [\n// // //       ...baseColumns,\n// // //       ...currencyColumns,\n// // //       { name: \"Total\", selector: (row) => row.Total, sortable: true },\n// // //     ];\n// // //   };\n\n// // //   const getFilteredTableData = () => {\n// // //     return filteredData.map((d) => {\n// // //       const rowData = {\n// // //         Date: d.Date,\n// // //         Target: d.Target,\n// // //         Total: d.Total,\n// // //       };\n// // //       selectedCurrencies.forEach((currency) => {\n// // //         rowData[currency.value] = d[currency.value];\n// // //       });\n// // //       return rowData;\n// // //     });\n// // //   };\n\n// // //   const handleTooltipFormatter = function () {\n// // //     const points = this.points;\n// // //     let targetValue = null;\n// // //     let totalValue = null;\n\n// // //     points.forEach((point) => {\n// // //       if (point.series.name === \"Target\") {\n// // //         targetValue = point.y;\n// // //       }\n// // //       if (point.series.name === \"Total\") {\n// // //         totalValue = point.y;\n// // //       }\n// // //     });\n\n// // //     if (targetValue !== null && totalValue !== null) {\n// // //       const difference = (totalValue - targetValue).toFixed(2);\n// // //       const totalBreakdown = selectedCurrencies\n// // //         .map((currency) => {\n// // //           const point = points.find((p) => p.series.name === currency.value);\n// // //           return point\n// // //             ? `${currency.value}: ${point.y.toFixed(2)}`\n// // //             : `${currency.value}: N/A`;\n// // //         })\n// // //         .join(\"<br>\");\n\n// // //       let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n// // //       summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n// // //       summaryHTML += `Difference: ${difference}<br><br>`;\n// // //       summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n// // //       latestSummaryRef.current = summaryHTML;\n\n// // //       return points.reduce((s, point) => {\n// // //         return (\n// // //           s +\n// // //           `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// // //         );\n// // //       }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// // //     }\n// // //     return points.reduce((s, point) => {\n// // //       return (\n// // //         s +\n// // //         `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// // //       );\n// // //     }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// // //   };\n\n// // //   const options = {\n// // //     chart: {\n// // //       type: \"line\",\n// // //       zoomType: \"x\",\n// // //       backgroundColor: {\n// // //         linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n// // //         stops: isDarkMode\n// // //           ? [\n// // //               [0, \"#2e2e2e\"],\n// // //               [1, \"#1a1a1a\"],\n// // //             ]\n// // //           : [\n// // //               [0, \"#ffffff\"],\n// // //               [1, \"#f0f0f0\"],\n// // //             ],\n// // //       },\n// // //       borderRadius: 10, // Rounded corners\n// // //       style: {\n// // //         fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n// // //       },\n// // //       plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// // //       plotBorderWidth: 1,\n// // //       events: {\n// // //         load: function () {\n// // //           this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n// // //         },\n// // //       },\n// // //       boost: {\n// // //         useGPUTranslations: true,\n// // //         usePreAllocated: true,\n// // //       },\n// // //     },\n// // //     title: {\n// // //       text: \"LCH Notional\",\n// // //       style: {\n// // //         color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// // //         fontSize: \"22px\",\n// // //         fontWeight: \"bold\",\n// // //       },\n// // //     },\n// // //     xAxis: {\n// // //       type: \"datetime\",\n// // //       title: {\n// // //         text: \"Date\",\n// // //         style: {\n// // //           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //           fontSize: \"14px\",\n// // //           fontWeight: \"bold\",\n// // //         },\n// // //       },\n// // //       lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// // //       tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// // //       labels: {\n// // //         style: {\n// // //           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //           fontSize: \"12px\",\n// // //         },\n// // //       },\n// // //     },\n// // //     yAxis: {\n// // //       title: {\n// // //         text: \"Notional (USD)\",\n// // //         style: {\n// // //           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //           fontSize: \"14px\",\n// // //           fontWeight: \"bold\",\n// // //         },\n// // //       },\n// // //       gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// // //       labels: {\n// // //         style: {\n// // //           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //           fontSize: \"12px\",\n// // //         },\n// // //       },\n// // //     },\n// // //     legend: {\n// // //       layout: \"horizontal\",\n// // //       align: \"center\",\n// // //       verticalAlign: \"bottom\",\n// // //       itemStyle: {\n// // //         color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// // //         fontSize: \"14px\",\n// // //         fontWeight: \"bold\",\n// // //       },\n// // //       itemHoverStyle: {\n// // //         color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //       },\n// // //       itemHiddenStyle: {\n// // //         color: isDarkMode ? \"#666666\" : \"#999999\",\n// // //       },\n// // //     },\n// // //     tooltip: {\n// // //       shared: true,\n// // //       backgroundColor: isDarkMode\n// // //         ? \"rgba(33, 33, 33, 0.85)\"\n// // //         : \"rgba(255, 255, 255, 0.85)\",\n// // //       borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n// // //       style: {\n// // //         color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// // //       },\n// // //       formatter: handleTooltipFormatter,\n// // //     },\n// // //     series: getData(),\n// // //     navigation: {\n// // //       buttonOptions: {\n// // //         enabled: true,\n// // //         theme: {\n// // //           fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// // //           stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n// // //           style: {\n// // //             color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// // //           },\n// // //         },\n// // //       },\n// // //     },\n// // //     exporting: {\n// // //       buttons: {\n// // //         contextButton: {\n// // //           symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //           theme: {\n// // //             fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// // //           },\n// // //         },\n// // //       },\n// // //     },\n// // //   };\n\n// // //   useEffect(() => {\n// // //     if (!loading && data.length > 0) {\n// // //       Highcharts.charts.forEach((chart) => {\n// // //         if (chart) {\n// // //           chart.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n// // //           chart.series.forEach((series) => {\n// // //             const seriesData = getData().find((s) => s.name === series.name);\n// // //             if (seriesData) {\n// // //               series.setData(seriesData.data);\n// // //             }\n// // //           });\n// // //         }\n// // //       });\n// // //     }\n// // //   }, [startDate, endDate, selectedCurrencies, loading, data, isDarkMode]);\n\n// // //   return (\n// // //     <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n// // //       <div className=\"app-container\">\n// // //         <Topbar />\n// // //         <div className=\"floating-box-container\">\n// // //           <div className=\"translucent-box\">\n// // //             <div className=\"control-group\">\n// // //               <div className=\"currency-selector\">\n// // //                 <h2>Select Currencies to Include in Total:</h2>\n// // //                 <Selector\n// // //                   options={[\n// // //                     { value: \"AUD\", label: \"AUD\" },\n// // //                     { value: \"EUR\", label: \"EUR\" },\n// // //                     { value: \"GBP\", label: \"GBP\" },\n// // //                     { value: \"JPY\", label: \"JPY\" },\n// // //                     { value: \"USD\", label: \"USD\" },\n// // //                     { value: \"BRL\", label: \"BRL\" },\n// // //                     { value: \"CAD\", label: \"CAD\" },\n// // //                     { value: \"CHF\", label: \"CHF\" },\n// // //                     { value: \"CLP\", label: \"CLP\" },\n// // //                     { value: \"CNY\", label: \"CNY\" },\n// // //                     { value: \"CZK\", label: \"CZK\" },\n// // //                     { value: \"DKK\", label: \"DKK\" },\n// // //                     { value: \"HKD\", label: \"HKD\" },\n// // //                     { value: \"HUF\", label: \"HUF\" },\n// // //                     { value: \"INR\", label: \"INR\" },\n// // //                     { value: \"KRW\", label: \"KRW\" },\n// // //                     { value: \"MXN\", label: \"MXN\" },\n// // //                     { value: \"NOK\", label: \"NOK\" },\n// // //                     { value: \"NZD\", label: \"NZD\" },\n// // //                     { value: \"PLN\", label: \"PLN\" },\n// // //                     { value: \"SEK\", label: \"SEK\" },\n// // //                     { value: \"SGD\", label: \"SGD\" },\n// // //                     { value: \"THB\", label: \"THB\" },\n// // //                     { value: \"TWD\", label: \"TWD\" },\n// // //                     { value: \"ZAR\", label: \"ZAR\" },\n// // //                   ]}\n// // //                   selectedCurrencies={selectedCurrencies}\n// // //                   setSelectedCurrencies={handleCurrencyChange}\n// // //                 />\n// // //               </div>\n// // //             </div>\n\n// // //             <div className=\"control-group\">\n// // //               <div className=\"date-picker\">\n// // //                 <h2>Select a date range</h2>\n// // //                 <DatePicker\n// // //                   selected={startDate}\n// // //                   onChange={(date) => setStartDate(date)}\n// // //                   selectsStart\n// // //                   startDate={startDate}\n// // //                   endDate={endDate}\n// // //                   className=\"date-input\"\n// // //                 />\n// // //                 <DatePicker\n// // //                   selected={endDate}\n// // //                   onChange={(date) => setEndDate(date)}\n// // //                   selectsEnd\n// // //                   startDate={startDate}\n// // //                   endDate={endDate}\n// // //                   minDate={startDate}\n// // //                   className=\"date-input\"\n// // //                 />\n// // //               </div>\n// // //             </div>\n// // //           </div>\n// // //           <div className=\"translucent-box2\">\n// // //             <h2>Graph Options</h2>\n// // //             <button\n// // //               onClick={() => setCompareWithTarget(!compareWithTarget)}\n// // //               className=\"toggle-button\"\n// // //             >\n// // //               {compareWithTarget\n// // //                 ? \"Disable Compare with Target\"\n// // //                 : \"Enable Compare with Target\"}\n// // //             </button>\n\n// // //             <div className=\"download-section\">\n// // //               <button className=\"toggle-button\">Download</button>\n// // //               <div className=\"dropdown-content\">\n// // //                 <button\n// // //                   onClick={() =>\n// // //                     chartRef.current.chart.exportChart({ type: \"image/png\" })\n// // //                   }\n// // //                 >\n// // //                   PNG\n// // //                 </button>\n// // //                 <button\n// // //                   onClick={() =>\n// // //                     chartRef.current.chart.exportChart({ type: \"image/jpeg\" })\n// // //                   }\n// // //                 >\n// // //                   JPEG\n// // //                 </button>\n// // //                 <button\n// // //                   onClick={() =>\n// // //                     chartRef.current.chart.exportChart({ type: \"application/pdf\" })\n// // //                   }\n// // //                 >\n// // //                   PDF\n// // //                 </button>\n// // //                 <button\n// // //                   onClick={() =>\n// // //                     chartRef.current.chart.exportChart({ type: \"image/svg+xml\" })\n// // //                   }\n// // //                 >\n// // //                   SVG\n// // //                 </button>\n// // //               </div>\n// // //             </div>\n// // //             <button\n// // //               onClick={() => setIsDarkMode(!isDarkMode)}\n// // //               className=\"toggle-button\"\n// // //             >\n// // //               Toggle Dark Mode\n// // //             </button>\n// // //           </div>\n// // //         </div>\n// // //         <div className=\"main-panel\">\n// // //           <HighchartsReact\n// // //             className=\"chart-actual\"\n// // //             highcharts={Highcharts}\n// // //             options={options}\n// // //             containerProps={{ className: \"chart-container\" }}\n// // //             updateArgs={[true, true, true]}\n// // //             ref={chartRef}\n// // //           />\n// // //           {compareWithTarget && (\n// // //             <div className=\"summary-box\">\n// // //               <h3>Summary</h3>\n// // //               <div dangerouslySetInnerHTML={{ __html: summary }} />\n// // //             </div>\n// // //           )}\n\n// // //           <div className=\"data-table-section\">\n// // //             <DataTable\n// // //               title=\"LCH Notional | Summary Table\"\n// // //               columns={getColumns()}\n// // //               data={getFilteredTableData()}\n// // //               pagination\n// // //               highlightOnHover\n// // //               pointerOnHover\n// // //               customStyles={customTableStyles}\n// // //             />\n// // //           </div>\n// // //         </div>\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // const customTableStyles = {\n// // //   header: {\n// // //     style: {\n// // //       fontSize: '22px',\n// // //       fontWeight: 'bold',\n// // //       color: 'var(--text-color)',\n// // //       backgroundColor: 'var(--control-bg-color)',\n// // //     },\n// // //   },\n// // //   rows: {\n// // //     style: {\n// // //       fontSize: '16px',\n// // //       color: 'var(--text-color)',\n// // //       backgroundColor: 'var(--input-bg-color)',\n// // //       '&:not(:last-of-type)': {\n// // //         borderBottomStyle: 'solid',\n// // //         borderBottomWidth: '1px',\n// // //         borderBottomColor: 'var(--control-bg-color)',\n// // //       },\n// // //     },\n// // //   },\n// // //   headCells: {\n// // //     style: {\n// // //       fontSize: '18px',\n// // //       fontWeight: 'bold',\n// // //       color: 'var(--text-color)',\n// // //       backgroundColor: 'var(--control-bg-color)',\n// // //     },\n// // //   },\n// // //   cells: {\n// // //     style: {\n// // //       fontSize: '16px',\n// // //       color: 'var(--text-color)',\n// // //       backgroundColor: 'var(--input-bg-color)',\n// // //     },\n// // //   },\n// // // };\n\n// // // export default Graph;\n\n// // import React, { useState, useEffect, useRef } from \"react\";\n// // import Highcharts from \"highcharts\";\n// // import HighchartsReact from \"highcharts-react-official\";\n// // import HighchartsBoost from \"highcharts/modules/boost\";\n// // import HighchartsExporting from \"highcharts/modules/exporting\";\n// // import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// // import HighchartsMore from \"highcharts/highcharts-more\";\n// // import DataTable from \"react-data-table-component\";\n// // import DatePicker from \"react-datepicker\";\n// // import \"react-datepicker/dist/react-datepicker.css\";\n// // import Topbar from \"./Topbar\";\n// // import Selector from \"./Selector\";\n// // import \"../Styles/Graph.css\";\n\n// // HighchartsBoost(Highcharts);\n// // HighchartsExporting(Highcharts);\n// // HighchartsAnnotations(Highcharts);\n// // HighchartsMore(Highcharts);\n\n// // const Graph = () => {\n// //   const [compareWithTarget, setCompareWithTarget] = useState(false);\n// //   const [selectedCurrencies, setSelectedCurrencies] = useState([\n// //     { value: \"AUD\", label: \"AUD\" },\n// //     { value: \"EUR\", label: \"EUR\" },\n// //     { value: \"GBP\", label: \"GBP\" },\n// //     { value: \"JPY\", label: \"JPY\" },\n// //     { value: \"USD\", label: \"USD\" }\n// //   ]);\n// //   const [summary, setSummary] = useState(\"\");\n// //   const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n// //   const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n// //   const [data, setData] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [isDarkMode, setIsDarkMode] = useState(true);\n// //   const latestSummaryRef = useRef(\"\");\n// //   const chartRef = useRef(null);\n\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       try {\n// //         const response = await fetch(\"http://localhost:5000/xva\");\n// //         const result = await response.json();\n// //         setData(result);\n// //         setLoading(false);\n// //       } catch (error) {\n// //         console.error(\"Error fetching data:\", error);\n// //         setLoading(false);\n// //       }\n// //     };\n// //     fetchData();\n// //   }, []);\n\n// //   const getFilteredData = () => {\n// //     return data.filter((d) => {\n// //       const date = new Date(d.Date).getTime();\n// //       return date >= startDate.getTime() && date <= endDate.getTime();\n// //     });\n// //   };\n\n// //   useEffect(() => {\n// //     if (!loading && data.length > 0) {\n// //       const updateSummary = () => {\n// //         if (summary !== latestSummaryRef.current) {\n// //           setSummary(latestSummaryRef.current);\n// //         }\n// //       };\n// //       const interval = setInterval(updateSummary, 1000);\n// //       return () => clearInterval(interval);\n// //     }\n// //   }, [loading, data, summary]);\n\n// //   const filteredData = getFilteredData();\n\n// //   const totalLine = {\n// //     name: \"Total\",\n// //     data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n// //     color: isDarkMode ? \"#007bff\" : \"#343a40\",\n// //     marker: { enabled: false },\n// //     zIndex: 1,\n// //     boostThreshold: 1,\n// //   };\n\n// //   const shadeData = {\n// //     name: \"Shaded Area\",\n// //     data: filteredData.map((d) => ({\n// //       x: new Date(d.Date).getTime(),\n// //       low: Math.min(d.Total, d.Target),\n// //       high: Math.max(d.Total, d.Target),\n// //     })),\n// //     type: \"arearange\",\n// //     lineWidth: 0,\n// //     linkedTo: \"Total\",\n// //     color: \"#2E8C39\",\n// //     fillOpacity: 0.3,\n// //     zIndex: 0,\n// //     marker: { enabled: false },\n// //     boostThreshold: 0,\n// //     boost: false,\n// //   };\n\n// //   const getData = () => {\n// //     const compareData = [\n// //       ...selectedCurrencies.map((currency) => ({\n// //         name: currency.value,\n// //         data: filteredData.map((d) => [\n// //           new Date(d.Date).getTime(),\n// //           d[currency.value],\n// //         ]),\n// //         color: getCurrencyColor(currency.value),\n// //         marker: { enabled: false },\n// //         boostThreshold: 1,\n// //       })),\n// //       totalLine,\n// //       {\n// //         name: \"Target\",\n// //         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n// //         color: \"#007bff\",\n// //         marker: { enabled: false },\n// //         zIndex: 1,\n// //         boostThreshold: 1,\n// //       },\n// //       shadeData,\n// //     ];\n// //     return compareWithTarget ? compareData : compareData.slice(0, -1);\n// //   };\n\n// //   const getCurrencyColor = (currency) => {\n// //     switch (currency) {\n// //       case \"AUD\":\n// //         return \"#FFD700\";\n// //       case \"EUR\":\n// //         return \"#FF6347\";\n// //       case \"GBP\":\n// //         return \"#4682B4\";\n// //       case \"JPY\":\n// //         return \"#32CD32\";\n// //       case \"USD\":\n// //         return \"#FFA07A\";\n// //       case \"BRL\":\n// //         return \"#9400D3\";\n// //       case \"CAD\":\n// //         return \"#00FF00\";\n// //       case \"CHF\":\n// //         return \"#FF00FF\";\n// //       case \"CL\":\n// //         return \"#00FFFF\";\n// //       case \"CNY\":\n// //         return \"#FF4500\";\n// //       case \"CZK\":\n// //         return \"#FF1493\";\n// //       case \"DKK\":\n// //         return \"#1E90FF\";\n// //       case \"HKD\":\n// //         return \"#FF69B4\";\n// //       case \"HUF\":\n// //         return \"#8A2BE2\";\n// //       case \"INR\":\n// //         return \"#00BFFF\";\n// //       case \"KRW\":\n// //         return \"#7B68EE\";\n// //       case \"NOK\":\n// //         return \"#FFD700\";\n// //       case \"NZD\":\n// //         return \"#FF6347\";\n// //       case \"PLN\":\n// //         return \"#4682B4\";\n// //       case \"SEK\":\n// //         return \"#32CD32\";\n// //       case \"SGD\":\n// //         return \"#FFA07A\";\n// //       case \"THB\":\n// //         return \"#9400D3\";\n// //       case \"TWD\":\n// //         return \"#00FF00\";\n// //       case \"ZAR\":\n// //         return \"#FF00FF\";\n// //       default:\n// //         return \"#FF4500\";\n// //     }\n// //   };\n\n// //   return (\n// //     <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n// //       <Topbar />\n// //       <div className=\"selectors-container\">\n// //         <Selector\n// //           options={[\n// //             { value: \"AUD\", label: \"AUD\" },\n// //             { value: \"EUR\", label: \"EUR\" },\n// //             { value: \"GBP\", label: \"GBP\" },\n// //             { value: \"JPY\", label: \"JPY\" },\n// //             { value: \"USD\", label: \"USD\" },\n// //             { value: \"BRL\", label: \"BRL\" },\n// //             { value: \"CAD\", label: \"CAD\" },\n// //             { value: \"CHF\", label: \"CHF\" },\n// //             { value: \"CLP\", label: \"CLP\" },\n// //             { value: \"CNY\", label: \"CNY\" },\n// //             { value: \"CZK\", label: \"CZK\" },\n// //             { value: \"DKK\", label: \"DKK\" },\n// //             { value: \"HKD\", label: \"HKD\" },\n// //             { value: \"HUF\", label: \"HUF\" },\n// //             { value: \"INR\", label: \"INR\" },\n// //             { value: \"KRW\", label: \"KRW\" },\n// //             { value: \"MXN\", label: \"MXN\" },\n// //             { value: \"NOK\", label: \"NOK\" },\n// //             { value: \"NZD\", label: \"NZD\" },\n// //             { value: \"PLN\", label: \"PLN\" },\n// //             { value: \"SEK\", label: \"SEK\" },\n// //             { value: \"SGD\", label: \"SGD\" },\n// //             { value: \"THB\", label: \"THB\" },\n// //             { value: \"TWD\", label: \"TWD\" },\n// //             { value: \"ZAR\", label: \"ZAR\" },\n// //           ]}\n// //           selectedCurrencies={selectedCurrencies}\n// //           setSelectedCurrencies={setSelectedCurrencies}\n// //         />\n// //         <div className=\"date-picker\">\n// //           <DatePicker\n// //             selected={startDate}\n// //             onChange={(date) => setStartDate(date)}\n// //             selectsStart\n// //             startDate={startDate}\n// //             endDate={endDate}\n// //             className=\"date-input\"\n// //           />\n// //           <DatePicker\n// //             selected={endDate}\n// //             onChange={(date) => setEndDate(date)}\n// //             selectsEnd\n// //             startDate={startDate}\n// //             endDate={endDate}\n// //             minDate={startDate}\n// //             className=\"date-input\"\n// //           />\n// //         </div>\n// //       </div>\n// //       <div className=\"main-panel\">\n// //         <HighchartsReact\n// //           className=\"chart-actual\"\n// //           highcharts={Highcharts}\n// //           options={{\n// //             chart: {\n// //               type: \"line\",\n// //               zoomType: \"x\",\n// //               backgroundColor: {\n// //                 linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n// //                 stops: isDarkMode\n// //                   ? [\n// //                       [0, \"#2e2e2e\"],\n// //                       [1, \"#1a1a1a\"],\n// //                     ]\n// //                   : [\n// //                       [0, \"#ffffff\"],\n// //                       [1, \"#f0f0f0\"],\n// //                     ],\n// //               },\n// //               borderRadius: 10, // Rounded corners\n// //               style: {\n// //                 fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n// //               },\n// //               plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //               plotBorderWidth: 1,\n// //               events: {\n// //                 load: function () {\n// //                   this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n// //                 },\n// //               },\n// //               boost: {\n// //                 useGPUTranslations: true,\n// //                 usePreAllocated: true,\n// //               },\n// //             },\n// //             title: {\n// //               text: \"LCH Notional\",\n// //               style: {\n// //                 color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //                 fontSize: \"22px\",\n// //                 fontWeight: \"bold\",\n// //               },\n// //             },\n// //             xAxis: {\n// //               type: \"datetime\",\n// //               title: {\n// //                 text: \"Date\",\n// //                 style: {\n// //                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                   fontSize: \"14px\",\n// //                   fontWeight: \"bold\",\n// //                 },\n// //               },\n// //               lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //               tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //               labels: {\n// //                 style: {\n// //                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                   fontSize: \"12px\",\n// //                 },\n// //               },\n// //             },\n// //             yAxis: {\n// //               title: {\n// //                 text: \"Notional (USD)\",\n// //                 style: {\n// //                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                   fontSize: \"14px\",\n// //                   fontWeight: \"bold\",\n// //                 },\n// //               },\n// //               gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //               labels: {\n// //                 style: {\n// //                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                   fontSize: \"12px\",\n// //                 },\n// //               },\n// //             },\n// //             legend: {\n// //               layout: \"horizontal\",\n// //               align: \"center\",\n// //               verticalAlign: \"bottom\",\n// //               itemStyle: {\n// //                 color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //                 fontSize: \"14px\",\n// //                 fontWeight: \"bold\",\n// //               },\n// //               itemHoverStyle: {\n// //                 color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //               },\n// //               itemHiddenStyle: {\n// //                 color: isDarkMode ? \"#666666\" : \"#999999\",\n// //               },\n// //             },\n// //             tooltip: {\n// //               shared: true,\n// //               backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n// //               borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n// //               style: {\n// //                 color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //               },\n// //               formatter: function () {\n// //                 const points = this.points;\n// //                 let targetValue = null;\n// //                 let totalValue = null;\n  \n// //                 points.forEach((point) => {\n// //                   if (point.series.name === \"Target\") {\n// //                     targetValue = point.y;\n// //                   }\n// //                   if (point.series.name === \"Total\") {\n// //                     totalValue = point.y;\n// //                   }\n// //                 });\n  \n// //                 if (targetValue !== null && totalValue !== null) {\n// //                   const difference = (totalValue - targetValue).toFixed(2);\n// //                   const totalBreakdown = selectedCurrencies\n// //                     .map((currency) => {\n// //                       const point = points.find((p) => p.series.name === currency.value);\n// //                       return point\n// //                         ? `${currency.value}: ${point.y.toFixed(2)}`\n// //                         : `${currency.value}: N/A`;\n// //                     })\n// //                     .join(\"<br>\");\n  \n// //                   let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n// //                   summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n// //                   summaryHTML += `Difference: ${difference}<br><br>`;\n// //                   summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n  \n// //                   latestSummaryRef.current = summaryHTML;\n  \n// //                   return points.reduce((s, point) => {\n// //                     return (\n// //                       s +\n// //                       `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// //                     );\n// //                   }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// //                 }\n// //                 return points.reduce((s, point) => {\n// //                   return (\n// //                     s +\n// //                     `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// //                   );\n// //                 }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// //               },\n// //             },\n// //             series: getData(),\n// //             navigation: {\n// //               buttonOptions: {\n// //                 enabled: true,\n// //                 theme: {\n// //                   fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// //                   stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n// //                   style: {\n// //                     color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //                   },\n// //                 },\n// //               },\n// //             },\n// //             exporting: {\n// //               buttons: {\n// //                 contextButton: {\n// //                   symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                   theme: {\n// //                     fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// //                   },\n// //                 },\n// //               },\n// //             },\n// //           }}\n// //           containerProps={{ className: \"chart-container\" }}\n// //           updateArgs={[true, true, true]}\n// //           ref={chartRef}\n// //         />\n// //         {compareWithTarget && (\n// //           <div className=\"summary-box\">\n// //             <h3>Summary</h3>\n// //             <div dangerouslySetInnerHTML={{ __html: summary }} />\n// //           </div>\n// //         )}\n// //         <div className=\"data-table-section\">\n// //           <DataTable\n// //             title=\"LCH Notional | Summary Table\"\n// //             columns={[\n// //               { name: \"Date\", selector: (row) => row.Date, sortable: true },\n// //               { name: \"Target\", selector: (row) => row.Target, sortable: true },\n// //               ...selectedCurrencies.map((currency) => ({\n// //                 name: currency.label,\n// //                 selector: (row) => row[currency.value],\n// //                 sortable: true,\n// //               })),\n// //               { name: \"Total\", selector: (row) => row.Total, sortable: true },\n// //             ]}\n// //             data={filteredData.map((d) => {\n// //               const rowData = {\n// //                 Date: d.Date,\n// //                 Target: d.Target,\n// //                 Total: d.Total,\n// //               };\n// //               selectedCurrencies.forEach((currency) => {\n// //                 rowData[currency.value] = d[currency.value];\n// //               });\n// //               return rowData;\n// //             })}\n// //             pagination\n// //             highlightOnHover\n// //             pointerOnHover\n// //             customStyles={{\n// //               header: {\n// //                 style: {\n// //                   fontSize: '22px',\n// //                   fontWeight: 'bold',\n// //                   color: 'var(--text-color)',\n// //                   backgroundColor: 'var(--control-bg-color)',\n// //                 },\n// //               },\n// //               rows: {\n// //                 style: {\n// //                   fontSize: '16px',\n// //                   color: 'var(--text-color)',\n// //                   backgroundColor: 'var(--input-bg-color)',\n// //                   '&:not(:last-of-type)': {\n// //                     borderBottomStyle: 'solid',\n// //                     borderBottomWidth: '1px',\n// //                     borderBottomColor: 'var(--control-bg-color)',\n// //                   },\n// //                 },\n// //               },\n// //               headCells: {\n// //                 style: {\n// //                   fontSize: '18px',\n// //                   fontWeight: 'bold',\n// //                   color: 'var(--text-color)',\n// //                   backgroundColor: 'var(--control-bg-color)',\n// //                 },\n// //               },\n// //               cells: {\n// //                 style: {\n// //                   fontSize: '16px',\n// //                   color: 'var(--text-color)',\n// //                   backgroundColor: 'var(--input-bg-color)',\n// //                 },\n// //               },\n// //             }}\n// //           />\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default Graph;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import Highcharts from \"highcharts\";\n// import HighchartsReact from \"highcharts-react-official\";\n// import HighchartsBoost from \"highcharts/modules/boost\";\n// import HighchartsExporting from \"highcharts/modules/exporting\";\n// import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// import HighchartsMore from \"highcharts/highcharts-more\";\n// import DataTable from \"react-data-table-component\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import Topbar from \"./Topbar\";\n// import Selector from \"./Selector\";\n// import \"../Styles/Graph.css\";\n\n// HighchartsBoost(Highcharts);\n// HighchartsExporting(Highcharts);\n// HighchartsAnnotations(Highcharts);\n// HighchartsMore(Highcharts);\n\n// const Graph = () => {\n//   const [compareWithTarget, setCompareWithTarget] = useState(false);\n//   const [selectedCurrencies, setSelectedCurrencies] = useState([\n//     { value: \"AUD\", label: \"AUD\" },\n//     { value: \"EUR\", label: \"EUR\" },\n//     { value: \"GBP\", label: \"GBP\" },\n//     { value: \"JPY\", label: \"JPY\" },\n//     { value: \"USD\", label: \"USD\" }\n//   ]);\n//   const [summary, setSummary] = useState(\"\");\n//   const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n//   const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n//   const [data, setData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [isDarkMode, setIsDarkMode] = useState(true);\n//   const latestSummaryRef = useRef(\"\");\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:5000/xva\");\n//         const result = await response.json();\n//         setData(result);\n//         setLoading(false);\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         setLoading(false);\n//       }\n//     };\n//     fetchData();\n//   }, []);\n\n//   const getFilteredData = () => {\n//     return data.filter((d) => {\n//       const date = new Date(d.Date).getTime();\n//       return date >= startDate.getTime() && date <= endDate.getTime();\n//     });\n//   };\n\n//   useEffect(() => {\n//     if (!loading && data.length > 0) {\n//       const updateSummary = () => {\n//         if (summary !== latestSummaryRef.current) {\n//           setSummary(latestSummaryRef.current);\n//         }\n//       };\n//       const interval = setInterval(updateSummary, 1000);\n//       return () => clearInterval(interval);\n//     }\n//   }, [loading, data, summary]);\n\n//   const filteredData = getFilteredData();\n\n//   const totalLine = {\n//     name: \"Total\",\n//     data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n//     color: isDarkMode ? \"#007bff\" : \"#343a40\",\n//     marker: { enabled: false },\n//     zIndex: 1,\n//     boostThreshold: 1,\n//   };\n\n//   const shadeData = {\n//     name: \"Shaded Area\",\n//     data: filteredData.map((d) => ({\n//       x: new Date(d.Date).getTime(),\n//       low: Math.min(d.Total, d.Target),\n//       high: Math.max(d.Total, d.Target),\n//     })),\n//     type: \"arearange\",\n//     lineWidth: 0,\n//     linkedTo: \"Total\",\n//     color: \"#2E8C39\",\n//     fillOpacity: 0.3,\n//     zIndex: 0,\n//     marker: { enabled: false },\n//     boostThreshold: 0,\n//     boost: false,\n//   };\n\n//   const getData = () => {\n//     const compareData = [\n//       ...selectedCurrencies.map((currency) => ({\n//         name: currency.value,\n//         data: filteredData.map((d) => [\n//           new Date(d.Date).getTime(),\n//           d[currency.value],\n//         ]),\n//         color: getCurrencyColor(currency.value),\n//         marker: { enabled: false },\n//         boostThreshold: 1,\n//       })),\n//       totalLine,\n//       {\n//         name: \"Target\",\n//         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n//         color: \"#007bff\",\n//         marker: { enabled: false },\n//         zIndex: 1,\n//         boostThreshold: 1,\n//       },\n//       shadeData,\n//     ];\n//     return compareWithTarget ? compareData : compareData.slice(0, -1);\n//   };\n\n//   const getCurrencyColor = (currency) => {\n//     switch (currency) {\n//       case \"AUD\":\n//         return \"#FFD700\";\n//       case \"EUR\":\n//         return \"#FF6347\";\n//       case \"GBP\":\n//         return \"#4682B4\";\n//       case \"JPY\":\n//         return \"#32CD32\";\n//       case \"USD\":\n//         return \"#FFA07A\";\n//       case \"BRL\":\n//         return \"#9400D3\";\n//       case \"CAD\":\n//         return \"#00FF00\";\n//       case \"CHF\":\n//         return \"#FF00FF\";\n//       case \"CLP\":\n//         return \"#00FFFF\";\n//       case \"CNY\":\n//         return \"#FF4500\";\n//       case \"CZK\":\n//         return \"#FF1493\";\n//       case \"DKK\":\n//         return \"#1E90FF\";\n//       case \"HKD\":\n//         return \"#FF69B4\";\n//       case \"HUF\":\n//         return \"#8A2BE2\";\n//       case \"INR\":\n//         return \"#00BFFF\";\n//       case \"KRW\":\n//         return \"#7B68EE\";\n//       case \"NOK\":\n//         return \"#FFD700\";\n//       case \"NZD\":\n//         return \"#FF6347\";\n//       case \"PLN\":\n//         return \"#4682B4\";\n//       case \"SEK\":\n//         return \"#32CD32\";\n//       case \"SGD\":\n//         return \"#FFA07A\";\n//       case \"THB\":\n//         return \"#9400D3\";\n//       case \"TWD\":\n//         return \"#00FF00\";\n//       case \"ZAR\":\n//         return \"#FF00FF\";\n//       default:\n//         return \"#FF4500\";\n//     }\n//   };\n\n//   return (\n//     <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n//       <Topbar />\n//       <div className=\"selectors-container\">\n//         <div className=\"currency-selector\">\n//           <label>Select Currencies:</label>\n//           <Selector\n//             options={[\n//               { value: \"AUD\", label: \"AUD\" },\n//               { value: \"EUR\", label: \"EUR\" },\n//               { value: \"GBP\", label: \"GBP\" },\n//               { value: \"JPY\", label: \"JPY\" },\n//               { value: \"USD\", label: \"USD\" },\n//               { value: \"BRL\", label: \"BRL\" },\n//               { value: \"CAD\", label: \"CAD\" },\n//               { value: \"CHF\", label: \"CHF\" },\n//               { value: \"CLP\", label: \"CLP\" },\n//               { value: \"CNY\", label: \"CNY\" },\n//               { value: \"CZK\", label: \"CZK\" },\n//               { value: \"DKK\", label: \"DKK\" },\n//               { value: \"HKD\", label: \"HKD\" },\n//               { value: \"HUF\", label: \"HUF\" },\n//               { value: \"INR\", label: \"INR\" },\n//               { value: \"KRW\", label: \"KRW\" },\n//               { value: \"MXN\", label: \"MXN\" },\n//               { value: \"NOK\", label: \"NOK\" },\n//               { value: \"NZD\", label: \"NZD\" },\n//               { value: \"PLN\", label: \"PLN\" },\n//               { value: \"SEK\", label: \"SEK\" },\n//               { value: \"SGD\", label: \"SGD\" },\n//               { value: \"THB\", label: \"THB\" },\n//               { value: \"TWD\", label: \"TWD\" },\n//               { value: \"ZAR\", label: \"ZAR\" },\n//             ]}\n//             selectedCurrencies={selectedCurrencies}\n//             setSelectedCurrencies={setSelectedCurrencies}\n//           />\n//         </div>\n//         <div className=\"date-picker\">\n//           <label>Select Date Range:</label>\n//           <DatePicker\n//             selected={startDate}\n//             onChange={(date) => setStartDate(date)}\n//             selectsStart\n//             startDate={startDate}\n//             endDate={endDate}\n//             className=\"date-input\"\n//           />\n//           <DatePicker\n//             selected={endDate}\n//             onChange={(date) => setEndDate(date)}\n//             selectsEnd\n//             startDate={startDate}\n//             endDate={endDate}\n//             minDate={startDate}\n//             className=\"date-input\"\n//           />\n//         </div>\n//       </div>\n//       <div className=\"main-panel\">\n//         <HighchartsReact\n//           className=\"chart-actual\"\n//           highcharts={Highcharts}\n//           options={{\n//             chart: {\n//               type: \"line\",\n//               zoomType: \"x\",\n//               backgroundColor: {\n//                 linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n//                 stops: isDarkMode\n//                   ? [\n//                       [0, \"#2e2e2e\"],\n//                       [1, \"#1a1a1a\"],\n//                     ]\n//                   : [\n//                       [0, \"#ffffff\"],\n//                       [1, \"#f0f0f0\"],\n//                     ],\n//               },\n//               borderRadius: 10, // Rounded corners\n//               style: {\n//                 fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n//               },\n//               plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//               plotBorderWidth: 1,\n//               events: {\n//                 load: function () {\n//                   this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n//                 },\n//               },\n//               boost: {\n//                 useGPUTranslations: true,\n//                 usePreAllocated: true,\n//               },\n//             },\n//             title: {\n//               text: \"LCH Notional\",\n//               style: {\n//                 color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                 fontSize: \"22px\",\n//                 fontWeight: \"bold\",\n//               },\n//             },\n//             xAxis: {\n//               type: \"datetime\",\n//               title: {\n//                 text: \"Date\",\n//                 style: {\n//                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                   fontSize: \"14px\",\n//                   fontWeight: \"bold\",\n//                 },\n//               },\n//               lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//               tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//               labels: {\n//                 style: {\n//                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                   fontSize: \"12px\",\n//                 },\n//               },\n//             },\n//             yAxis: {\n//               title: {\n//                 text: \"Notional (USD)\",\n//                 style: {\n//                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                   fontSize: \"14px\",\n//                   fontWeight: \"bold\",\n//                 },\n//               },\n//               gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//               labels: {\n//                 style: {\n//                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                   fontSize: \"12px\",\n//                 },\n//               },\n//             },\n//             legend: {\n//               layout: \"horizontal\",\n//               align: \"center\",\n//               verticalAlign: \"bottom\",\n//               itemStyle: {\n//                 color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                 fontSize: \"14px\",\n//                 fontWeight: \"bold\",\n//               },\n//               itemHoverStyle: {\n//                 color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//               },\n//               itemHiddenStyle: {\n//                 color: isDarkMode ? \"#666666\" : \"#999999\",\n//               },\n//             },\n//             tooltip: {\n//               shared: true,\n//               backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n//               borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n//               style: {\n//                 color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//               },\n//               formatter: function () {\n//                 const points = this.points;\n//                 let targetValue = null;\n//                 let totalValue = null;\n  \n//                 points.forEach((point) => {\n//                   if (point.series.name === \"Target\") {\n//                     targetValue = point.y;\n//                   }\n//                   if (point.series.name === \"Total\") {\n//                     totalValue = point.y;\n//                   }\n//                 });\n  \n//                 if (targetValue !== null && totalValue !== null) {\n//                   const difference = (totalValue - targetValue).toFixed(2);\n//                   const totalBreakdown = selectedCurrencies\n//                     .map((currency) => {\n//                       const point = points.find((p) => p.series.name === currency.value);\n//                       return point\n//                         ? `${currency.value}: ${point.y.toFixed(2)}`\n//                         : `${currency.value}: N/A`;\n//                     })\n//                     .join(\"<br>\");\n  \n//                   let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n//                   summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n//                   summaryHTML += `Difference: ${difference}<br><br>`;\n//                   summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n  \n//                   latestSummaryRef.current = summaryHTML;\n  \n//                   return points.reduce((s, point) => {\n//                     return (\n//                       s +\n//                       `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//                     );\n//                   }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n//                 }\n//                 return points.reduce((s, point) => {\n//                   return (\n//                     s +\n//                     `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//                   );\n//                 }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n//               },\n//             },\n//             series: getData(),\n//             navigation: {\n//               buttonOptions: {\n//                 enabled: true,\n//                 theme: {\n//                   fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//                   stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n//                   style: {\n//                     color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                   },\n//                 },\n//               },\n//             },\n//             exporting: {\n//               buttons: {\n//                 contextButton: {\n//                   symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                   theme: {\n//                     fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//                   },\n//                 },\n//               },\n//             },\n//           }}\n//           containerProps={{ className: \"chart-container\" }}\n//           updateArgs={[true, true, true]}\n//           ref={chartRef}\n//         />\n//         {compareWithTarget && (\n//           <div className=\"summary-box\">\n//             <h3>Summary</h3>\n//             <div dangerouslySetInnerHTML={{ __html: summary }} />\n//           </div>\n//         )}\n//         <div className=\"data-table-section\">\n//           <DataTable\n//             title=\"LCH Notional | Summary Table\"\n//             columns={[\n//               { name: \"Date\", selector: (row) => row.Date, sortable: true },\n//               { name: \"Target\", selector: (row) => row.Target, sortable: true },\n//               ...selectedCurrencies.map((currency) => ({\n//                 name: currency.label,\n//                 selector: (row) => row[currency.value],\n//                 sortable: true,\n//               })),\n//               { name: \"Total\", selector: (row) => row.Total, sortable: true },\n//             ]}\n//             data={filteredData.map((d) => {\n//               const rowData = {\n//                 Date: d.Date,\n//                 Target: d.Target,\n//                 Total: d.Total,\n//               };\n//               selectedCurrencies.forEach((currency) => {\n//                 rowData[currency.value] = d[currency.value];\n//               });\n//               return rowData;\n//             })}\n//             pagination\n//             highlightOnHover\n//             pointerOnHover\n//             customStyles={{\n//               header: {\n//                 style: {\n//                   fontSize: '22px',\n//                   fontWeight: 'bold',\n//                   color: 'var(--text-color)',\n//                   backgroundColor: 'var(--control-bg-color)',\n//                 },\n//               },\n//               rows: {\n//                 style: {\n//                   fontSize: '16px',\n//                   color: 'var(--text-color)',\n//                   backgroundColor: 'var(--input-bg-color)',\n//                   '&:not(:last-of-type)': {\n//                     borderBottomStyle: 'solid',\n//                     borderBottomWidth: '1px',\n//                     borderBottomColor: 'var(--control-bg-color)',\n//                   },\n//                 },\n//               },\n//               headCells: {\n//                 style: {\n//                   fontSize: '18px',\n//                   fontWeight: 'bold',\n//                   color: 'var(--text-color)',\n//                   backgroundColor: 'var(--control-bg-color)',\n//                 },\n//               },\n//               cells: {\n//                 style: {\n//                   fontSize: '16px',\n//                   color: 'var(--text-color)',\n//                   backgroundColor: 'var(--input-bg-color)',\n//                 },\n//               },\n//             }}\n//           />\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Graph;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport HighchartsBoost from \"highcharts/modules/boost\";\nimport HighchartsExporting from \"highcharts/modules/exporting\";\nimport HighchartsAnnotations from \"highcharts/modules/annotations\";\nimport HighchartsMore from \"highcharts/highcharts-more\";\nimport DataTable from \"react-data-table-component\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Topbar from \"./Topbar\";\nimport Selector from \"./Selector\";\nimport \"../Styles/Graph.css\";\n\nHighchartsBoost(Highcharts);\nHighchartsExporting(Highcharts);\nHighchartsAnnotations(Highcharts);\nHighchartsMore(Highcharts);\n\nconst Graph = () => {\n  const [compareWithTarget, setCompareWithTarget] = useState(false);\n  const [selectedCurrencies, setSelectedCurrencies] = useState([\n    { value: \"AUD\", label: \"AUD\" },\n    { value: \"EUR\", label: \"EUR\" },\n    { value: \"GBP\", label: \"GBP\" },\n    { value: \"JPY\", label: \"JPY\" },\n    { value: \"USD\", label: \"USD\" }\n  ]);\n  const [summary, setSummary] = useState(\"\");\n  const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n  const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const latestSummaryRef = useRef(\"\");\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/xva\");\n        const result = await response.json();\n        setData(result);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  const getFilteredData = () => {\n    return data.filter((d) => {\n      const date = new Date(d.Date).getTime();\n      return date >= startDate.getTime() && date <= endDate.getTime();\n    });\n  };\n\n  useEffect(() => {\n    if (!loading && data.length > 0) {\n      const updateSummary = () => {\n        if (summary !== latestSummaryRef.current) {\n          setSummary(latestSummaryRef.current);\n        }\n      };\n      const interval = setInterval(updateSummary, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [loading, data, summary]);\n\n  const filteredData = getFilteredData();\n\n  const totalLine = {\n    name: \"Total\",\n    data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n    color: isDarkMode ? \"#007bff\" : \"#343a40\",\n    marker: { enabled: false },\n    zIndex: 1,\n    boostThreshold: 1,\n  };\n\n  const shadeData = {\n    name: \"Shaded Area\",\n    data: filteredData.map((d) => ({\n      x: new Date(d.Date).getTime(),\n      low: Math.min(d.Total, d.Target),\n      high: Math.max(d.Total, d.Target),\n    })),\n    type: \"arearange\",\n    lineWidth: 0,\n    linkedTo: \"Total\",\n    color: \"#2E8C39\",\n    fillOpacity: 0.3,\n    zIndex: 0,\n    marker: { enabled: false },\n    boostThreshold: 0,\n    boost: false,\n  };\n\n  const handleCurrencyChange = (selectedOptions) => {\n    setSelectedCurrencies(selectedOptions);\n  };\n\n  const getData = () => {\n    const compareData = [\n      ...selectedCurrencies.map((currency) => ({\n        name: currency.value,\n        data: filteredData.map((d) => [\n          new Date(d.Date).getTime(),\n          d[currency.value],\n        ]),\n        color: getCurrencyColor(currency.value),\n        marker: { enabled: false },\n        boostThreshold: 1,\n      })),\n      totalLine,\n      {\n        name: \"Target\",\n        data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n        color: \"#007bff\",\n        marker: { enabled: false },\n        zIndex: 1,\n        boostThreshold: 1,\n      },\n      shadeData,\n    ];\n    return compareWithTarget ? compareData : compareData.slice(0, -1);\n  };\n\n  const getCurrencyColor = (currency) => {\n    switch (currency) {\n      case \"AUD\":\n        return \"#FFD700\";\n      case \"EUR\":\n        return \"#FF6347\";\n      case \"GBP\":\n        return \"#4682B4\";\n      case \"JPY\":\n        return \"#32CD32\";\n      case \"USD\":\n        return \"#FFA07A\";\n      case \"BRL\":\n        return \"#9400D3\";\n      case \"CAD\":\n        return \"#00FF00\";\n      case \"CHF\":\n        return \"#FF00FF\";\n      case \"CLP\":\n        return \"#00FFFF\";\n      case \"CNY\":\n        return \"#FF4500\";\n      case \"CZK\":\n        return \"#FF1493\";\n      case \"DKK\":\n        return \"#1E90FF\";\n      case \"HKD\":\n        return \"#FF69B4\";\n      case \"HUF\":\n        return \"#8A2BE2\";\n      case \"INR\":\n        return \"#00BFFF\";\n      case \"KRW\":\n        return \"#7B68EE\";\n      case \"NOK\":\n        return \"#FFD700\";\n      case \"NZD\":\n        return \"#FF6347\";\n      case \"PLN\":\n        return \"#4682B4\";\n      case \"SEK\":\n        return \"#32CD32\";\n      case \"SGD\":\n        return \"#FFA07A\";\n      case \"THB\":\n        return \"#9400D3\";\n      case \"TWD\":\n        return \"#00FF00\";\n      case \"ZAR\":\n        return \"#FF00FF\";\n      default:\n        return \"#FF4500\";\n    }\n  };\n\n  const getColumns = () => {\n    const baseColumns = [\n      { name: \"Date\", selector: (row) => row.Date, sortable: true },\n      { name: \"Target\", selector: (row) => row.Target, sortable: true },\n    ];\n\n    const currencyColumns = selectedCurrencies.map((currency) => ({\n      name: currency.label,\n      selector: (row) => row[currency.value],\n      sortable: true,\n    }));\n\n    return [\n      ...baseColumns,\n      ...currencyColumns,\n      { name: \"Total\", selector: (row) => row.Total, sortable: true },\n    ];\n  };\n\n  const getFilteredTableData = () => {\n    return filteredData.map((d) => {\n      const rowData = {\n        Data: d.Date,\n        Target: d.Target,\n        Total: d.Total,\n      };\n      selectedCurrencies.forEach((currency) => {\n        rowData[currency.value] = d[currency.value];\n      });\n      return rowData;\n    });\n  };\n\n  const handleTooltipFormatter = function () {\n    const points = this.points;\n    let targetValue = null;\n    let totalValue = null;\n\n    points.forEach((point) => {\n      if (point.series.name === \"Target\") {\n        targetValue = point.y;\n      }\n      if (point.series.name === \"Total\") {\n        totalValue = point.y;\n      }\n    });\n\n    if (targetValue !== null && totalValue !== null) {\n      const difference = (totalValue - targetValue).toFixed(2);\n      const totalBreakdown = selectedCurrencies\n        .map((currency) => {\n          const point = points.find((p) => p.series.name === currency.value);\n          return point\n            ? `${currency.value}: ${point.y.toFixed(2)}`\n            : `${currency.value}: N/A`;\n        })\n        .join(\"<br>\");\n\n      let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n      summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n      summaryHTML += `Difference: ${difference}<br><br>`;\n      summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n      latestSummaryRef.current = summaryHTML;\n\n      return points.reduce((s, point) => {\n        return (\n          s +\n          `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n        );\n      }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n    }\n    return points.reduce((s, point) => {\n      return (\n        s +\n        `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n      );\n    }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n  };\n\n  const options = {\n    chart: {\n      type: \"line\",\n      zoomType: \"x\",\n      backgroundColor: {\n        linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n        stops: isDarkMode\n          ? [\n              [0, \"#2e2e2e\"],\n              [1, \"#1a1a1a\"],\n            ]\n          : [\n              [0, \"#ffffff\"],\n              [1, \"#f0f0f0\"],\n            ],\n      },\n      borderRadius: 10, // Rounded corners\n      style: {\n        fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n      },\n      plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n      plotBorderWidth: 1,\n      events: {\n        load: function () {\n          this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n        },\n      },\n      boost: {\n        useGPUTranslations: true,\n        usePreAllocated: true,\n      },\n    },\n    title: {\n      text: \"LCH Notional\",\n      style: {\n        color: isDarkMode ? \"#ffffff\" : \"#000000\",\n        fontSize: \"22px\",\n        fontWeight: \"bold\",\n      },\n    },\n    xAxis: {\n      type: \"datetime\",\n      title: {\n        text: \"Date\",\n        style: {\n          color: isDarkMode ? \"#cccccc\" : \"#000000\",\n          fontSize: \"14px\",\n          fontWeight: \"bold\",\n        },\n      },\n      lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n      tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n      labels: {\n        style: {\n          color: isDarkMode ? \"#cccccc\" : \"#000000\",\n          fontSize: \"12px\",\n        },\n      },\n    },\n    yAxis: {\n      title: {\n        text: \"Notional (USD)\",\n        style: {\n          color: isDarkMode ? \"#cccccc\" : \"#000000\",\n          fontSize: \"14px\",\n          fontWeight: \"bold\",\n        },\n      },\n      gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n      labels: {\n        style: {\n          color: isDarkMode ? \"#cccccc\" : \"#000000\",\n          fontSize: \"12px\",\n        },\n      },\n    },\n    legend: {\n      layout: \"horizontal\",\n      align: \"center\",\n      verticalAlign: \"bottom\",\n      itemStyle: {\n        color: isDarkMode ? \"#ffffff\" : \"#000000\",\n        fontSize: \"14px\",\n        fontWeight: \"bold\",\n      },\n      itemHoverStyle: {\n        color: isDarkMode ? \"#cccccc\" : \"#000000\",\n      },\n      itemHiddenStyle: {\n        color: isDarkMode ? \"#666666\" : \"#999999\",\n      },\n    },\n    tooltip: {\n      shared: true,\n      backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n      borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n      style: {\n        color: isDarkMode ? \"#ffffff\" : \"#000000\",\n      },\n      formatter: handleTooltipFormatter,\n    },\n    series: getData(),\n    navigation: {\n      buttonOptions: {\n        enabled: true,\n        theme: {\n          fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n          stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n          style: {\n            color: isDarkMode ? \"#ffffff\" : \"#000000\",\n          },\n        },\n      },\n    },\n    exporting: {\n      buttons: {\n        contextButton: {\n          symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n          theme: {\n            fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n          },\n        },\n      },\n    },\n  };\n\n  useEffect(() => {\n    if (!loading && data.length > 0) {\n      Highcharts.charts.forEach((chart) => {\n        if (chart) {\n          chart.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n          chart.series.forEach((series) => {\n            series.setData(getData().find((s) => s.name === series.name).data);\n          });\n        }\n      });\n    }\n  }, [startDate, endDate, selectedCurrencies, loading, data, isDarkMode]);\n\n  return (\n    <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n      <div className=\"app-container\">\n        <Topbar />\n        <div className=\"selectors-container\">\n          <div className=\"currency-selector\">\n            <label>Select Currencies:</label>\n            <Selector selectedCurrencies={selectedCurrencies} onChange={handleCurrencyChange} />\n          </div>\n          <div className=\"date-picker\">\n            <label>Select Date Range:</label>\n            <DatePicker\n              selected={startDate}\n              onChange={(date) => setStartDate(date)}\n              selectsStart\n              startDate={startDate}\n              endDate={endDate}\n              className=\"date-input\"\n            />\n            <DatePicker\n              selected={endDate}\n              onChange={(date) => setEndDate(date)}\n              selectsEnd\n              startDate={startDate}\n              endDate={endDate}\n              minDate={startDate}\n              className=\"date-input\"\n            />\n          </div>\n        </div>\n        <div className=\"main-panel\">\n          <HighchartsReact\n            className=\"chart-actual\"\n            highcharts={Highcharts}\n            options={options}\n            containerProps={{ className: \"chart-container\" }}\n            updateArgs={[true, true, true]}\n            ref={chartRef}\n          />\n          {compareWithTarget && (\n            <div className=\"summary-box\">\n              <h3>Summary</h3>\n              <div dangerouslySetInnerHTML={{ __html: summary }} />\n            </div>\n          )}\n\n          <div className=\"data-table-section\">\n            <DataTable\n              title=\"LCH Notional | Summary Table\"\n              columns={getColumns()}\n              data={getFilteredTableData()}\n              pagination\n              highlightOnHover\n              pointerOnHover\n              customStyles={customTableStyles}\n            />\n          </div>\n\n          <div className=\"buttons-container\">\n            <button\n              onClick={() => setCompareWithTarget(!compareWithTarget)}\n              className=\"toggle-button\"\n            >\n              {compareWithTarget ? \"Disable Compare with Target\" : \"Enable Compare with Target\"}\n            </button>\n            <div className=\"dropdown\">\n              <button className=\"toggle-button\">Download</button>\n              <div className=\"dropdown-content\">\n                <button onClick={() => chartRef.current.chart.exportChart({ type: \"image/png\" })}>PNG</button>\n                <button onClick={() => chartRef.current.chart.exportChart({ type: \"image/jpeg\" })}>JPEG</button>\n                <button onClick={() => chartRef.current.chart.exportChart({ type: \"application/pdf\" })}>PDF</button>\n                <button onClick={() => chartRef.current.chart.exportChart({ type: \"image/svg+xml\" })}>SVG</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst customTableStyles = {\n  header: {\n    style: {\n      fontSize: '22px',\n      fontWeight: 'bold',\n      color: 'var(--text-color)',\n      backgroundColor: 'var(--control-bg-color)',\n    },\n  },\n  rows: {\n    style: {\n      fontSize: '16px',\n      color: 'var(--text-color)',\n      backgroundColor: 'var(--input-bg-color)',\n      '&:not(:last-of-type)': {\n        borderBottomStyle: 'solid',\n        borderBottomWidth: '1px',\n        borderBottomColor: 'var(--control-bg-color)',\n      },\n    },\n  },\n  headCells: {\n    style: {\n      fontSize: '18px',\n      fontWeight: 'bold',\n      color: 'var(--text-color)',\n      backgroundColor: 'var(--control-bg-color)',\n    },\n  },\n  cells: {\n    style: {\n      fontSize: '16px',\n      color: 'var(--text-color)',\n      backgroundColor: 'var(--input-bg-color)',\n    },\n  },\n};\n\nexport default Graph;\n\n"],"mappingsnC,OAAOC,eAAe,MAAM,2BAA2B;AACvD,OAAOC,eAAe,MAAM,0BAA0B;AACtD,OAAOC,mBAAmB,MAAM,8BAA8B;AAC9D,OAAOC,qBAAqB,MAAM,gCAAgC;AAClE,OAAOC,cAAc,MAAM,4BAA4B;AACvD,OAAOC,SAAS,MAAM,4BAA4B;AAClD,OAAOC,UAAU,MAAM,kBAAkB;AACzC,OAAO,4CAA4C;AACnD,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7BT,eAAe,CAACF,UAAU,CAAC;AAC3BG,mBAAmB,CAACH,UAAU,CAAC;AAC/BI,qBAAqB,CAACJ,UAAU,CAAC;AACjCK,cAAc,CAACL,UAAU,CAAC;AAE1B,MAAMY,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAACmB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGpB,QAAQ,CAAC,CAC3D;IAAEqB,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAM,CAAC,EAC9B;IAAED,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAM,CAAC,EAC9B;IAAED,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAM,CAAC,EAC9B;IAAED,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAM,CAAC,EAC9B;IAAED,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAM,CAAC,CAC/B,CAAC;EACF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACyB,SAAS,EAAEC,YAAY,CAAC,GAAG1B,QAAQ,CAAC,IAAI2B,IAAI,CAAC,YAAY,CAAC,CAAC;EAClE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAG7B,QAAQ,CAAC,IAAI2B,IAAI,CAAC,YAAY,CAAC,CAAC;EAC9D,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACgC,OAAO,EAAEC,UAAU,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACkC,UAAU,EAAEC,aAAa,CAAC,GAAGnC,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAMoC,gBAAgB,GAAGlC,MAAM,CAAC,EAAE,CAAC;EACnC,MAAMmC,QAAQ,GAAGnC,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,MAAMqC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2BAA2B,CAAC;QACzD,MAAMC,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QACpCX,OAAO,CAACU,MAAM,CAAC;QACfR,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5CV,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IACDK,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,eAAe,GAAGA,CAAA,KAAM;IAC5B,OAAOf,IAAI,CAACgB,MAAM,CAAEC,CAAC,IAAK;MACxB,MAAMC,IAAI,GAAG,IAAIrB,IAAI,CAACoB,CAAC,CAACpB,IAAI,CAAC,CAACsB,OAAO,CAAC,CAAC;MACvC,OAAOD,IAAI,IAAIvB,SAAS,CAACwB,OAAO,CAAC,CAAC,IAAID,IAAI,IAAIpB,OAAO,CAACqB,OAAO,CAAC,CAAC;IACjE,CAAC,CAAC;EACJ,CAAC;EAEDhD,SAAS,CAAC,MAAM;IACd,IAAI,CAAC+B,OAAO,IAAIF,IAAI,CAACoB,MAAM,GAAG,CAAC,EAAE;MAC/B,MAAMC,aAAa,GAAGA,CAAA,KAAM;QAC1B,IAAI5B,OAAO,KAAKa,gBAAgB,CAACgB,OAAO,EAAE;UACxC5B,UAAU,CAACY,gBAAgB,CAACgB,OAAO,CAAC;QACtC;MACF,CAAC;MACD,MAAMC,QAAQ,GAAGC,WAAW,CAACH,aAAa,EAAE,IAAI,CAAC;MACjD,OAAO,MAAMI,aAAa,CAACF,QAAQ,CAAC;IACtC;EACF,CAAC,EAAE,CAACrB,OAAO,EAAEF,IAAI,EAAEP,OAAO,CAAC,CAAC;EAE5B,MAAMiC,YAAY,GAAGX,eAAe,CAAC,CAAC;EAEtC,MAAMY,SAAS,GAAG;IAChBC,IAAI,EAAE,OAAO;IACb5B,IAAI,EAAE0B,YAAY,CAACG,GAAG,CAAEZ,CAAC,IAAK,CAAC,IAAIpB,IAAI,CAACoB,CAAC,CAACpB,IAAI,CAAC,CAACsB,OAAO,CAAC,CAAC,EAAEF,CAAC,CAACa,KAAK,CAAC,CAAC;IACpEC,KAAK,EAAE3B,UAAU,GAAG,SAAS,GAAG,SAAS;IACzC4B,MAAM,EAAE;MAAEC,OAAO,EAAE;IAAM,CAAC;IAC1BC,MAAM,EAAE,CAAC;IACTC,cAAc,EAAE;EAClB,CAAC;EAED,MAAMC,SAAS,GAAG;IAChBR,IAAI,EAAE,aAAa;IACnB5B,IAAI,EAAE0B,YAAY,CAACG,GAAG,CAAEZ,CAAC,KAAM;MAC7BoB,CAAC,EAAE,IAAIxC,IAAI,CAACoB,CAAC,CAACpB,IAAI,CAAC,CAACsB,OAAO,CAAC,CAAC;MAC7BmB,GAAG,EAAEC,IAAI,CAACC,GAAG,CAACvB,CAAC,CAACa,KAAK,EAAEb,CAAC,CAACwB,MAAM,CAAC;MAChCC,IAAI,EAAEH,IAAI,CAACI,GAAG,CAAC1B,CAAC,CAACa,KAAK,EAAEb,CAAC,CAACwB,MAAM;IAClC,CAAC,CAAC,CAAC;IACHG,IAAI,EAAE,WAAW;IACjBC,SAAS,EAAE,CAAC;IACZC,QAAQ,EAAE,OAAO;IACjBf,KAAK,EAAE,SAAS;IAChBgB,WAAW,EAAE,GAAG;IAChBb,MAAM,EAAE,CAAC;IACTF,MAAM,EAAE;MAAEC,OAAO,EAAE;IAAM,CAAC;IAC1BE,cAAc,EAAE,CAAC;IACjBa,KAAK,EAAE;EACT,CAAC;EAED,MAAMC,oBAAoB,GAAIC,eAAe,IAAK;IAChD5D,qBAAqB,CAAC4D,eAAe,CAAC;EACxC,CAAC;EAED,MAAMC,OAAO,GAAGA,CAAA,KAAM;IACpB,MAAMC,WAAW,GAAG,CAClB,GAAG/D,kBAAkB,CAACwC,GAAG,CAAEwB,QAAQ,KAAM;MACvCzB,IAAI,EAAEyB,QAAQ,CAAC9D,KAAK;MACpBS,IAAI,EAAE0B,YAAY,CAACG,GAAG,CAAEZ,CAAC,IAAK,CAC5B,IAAIpB,IAAI,CAACoB,CAAC,CAACpB,IAAI,CAAC,CAACsB,OAAO,CAAC,CAAC,EAC1BF,CAAC,CAACoC,QAAQ,CAAC9D,KAAK,CAAC,CAClB,CAAC;MACFwC,KAAK,EAAEuB,gBAAgB,CAACD,QAAQ,CAAC9D,KAAK,CAAC;MACvCyC,MAAM,EAAE;QAAEC,OAAO,EAAE;MAAM,CAAC;MAC1BE,cAAc,EAAE;IAClB,CAAC,CAAC,CAAC,EACHR,SAAS,EACT;MACEC,IAAI,EAAE,QAAQ;MACd5B,IAAI,EAAE0B,YAAY,CAACG,GAAG,CAAEZ,CAAC,IAAK,CAAC,IAAIpB,IAAI,CAACoB,CAAC,CAACpB,IAAI,CAAC,CAACsB,OAAO,CAAC,CAAC,EAAEF,CAAC,CAACwB,MAAM,CAAC,CAAC;MACrEV,KAAK,EAAE,SAAS;MAChBC,MAAM,EAAE;QAAEC,OAAO,EAAE;MAAM,CAAC;MAC1BC,MAAM,EAAE,CAAC;MACTC,cAAc,EAAE;IAClB,CAAC,EACDC,SAAS,CACV;IACD,OAAOjD,iBAAiB,GAAGiE,WAAW,GAAGA,WAAW,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACnE,CAAC;EAED,MAAMD,gBAAgB,GAAID,QAAQ,IAAK;IACrC,QAAQA,QAAQ;MACd,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB,KAAK,KAAK;QACR,OAAO,SAAS;MAClB;QACE,OAAO,SAAS;IACpB;EACF,CAAC;EAED,MAAMG,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,WAAW,GAAG,CAClB;MAAE7B,IAAI,EAAE,MAAM;MAAE8B,QAAQ,EAAGC,GAAG,IAAKA,GAAG,CAAC9D,IAAI;MAAE+D,QAAQ,EAAE;IAAK,CAAC,EAC7D;MAAEhC,IAAI,EAAE,QAAQ;MAAE8B,QAAQ,EAAGC,GAAG,IAAKA,GAAG,CAAClB,MAAM;MAAEmB,QAAQ,EAAE;IAAK,CAAC,CAClE;IAED,MAAMC,eAAe,GAAGxE,kBAAkB,CAACwC,GAAG,CAAEwB,QAAQ,KAAM;MAC5DzB,IAAI,EAAEyB,QAAQ,CAAC7D,KAAK;MACpBkE,QAAQ,EAAGC,GAAG,IAAKA,GAAG,CAACN,QAAQ,CAAC9D,KAAK,CAAC;MACtCqE,QAAQ,EAAE;IACZ,CAAC,CAAC,CAAC;IAEH,OAAO,CACL,GAAGH,WAAW,EACd,GAAGI,eAAe,EAClB;MAAEjC,IAAI,EAAE,OAAO;MAAE8B,QAAQ,EAAGC,GAAG,IAAKA,GAAG,CAAC7B,KAAK;MAAE8B,QAAQ,EAAE;IAAK,CAAC,CAChE;EACH,CAAC;EAED,MAAME,oBAAoB,GAAGA,CAAA,KAAM;IACjC,OAAOpC,YAAY,CAACG,GAAG,CAAEZ,CAAC,IAAK;MAC7B,MAAM8C,OAAO,GAAG;QACdC,IAAI,EAAE/C,CAAC,CAACpB,IAAI;QACZ4C,MAAM,EAAExB,CAAC,CAACwB,MAAM;QAChBX,KAAK,EAAEb,CAAC,CAACa;MACX,CAAC;MACDzC,kBAAkB,CAAC4E,OAAO,CAAEZ,QAAQ,IAAK;QACvCU,OAAO,CAACV,QAAQ,CAAC9D,KAAK,CAAC,GAAG0B,CAAC,CAACoC,QAAQ,CAAC9D,KAAK,CAAC;MAC7C,CAAC,CAAC;MACF,OAAOwE,OAAO;IAChB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMG,sBAAsB,GAAG,SAAAA,CAAA,EAAY;IACzC,MAAMC,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,IAAIC,WAAW,GAAG,IAAI;IACtB,IAAIC,UAAU,GAAG,IAAI;IAErBF,MAAM,CAACF,OAAO,CAAEK,KAAK,IAAK;MACxB,IAAIA,KAAK,CAACC,MAAM,CAAC3C,IAAI,KAAK,QAAQ,EAAE;QAClCwC,WAAW,GAAGE,KAAK,CAACE,CAAC;MACvB;MACA,IAAIF,KAAK,CAACC,MAAM,CAAC3C,IAAI,KAAK,OAAO,EAAE;QACjCyC,UAAU,GAAGC,KAAK,CAACE,CAAC;MACtB;IACF,CAAC,CAAC;IAEF,IAAIJ,WAAW,KAAK,IAAI,IAAIC,UAAU,KAAK,IAAI,EAAE;MAC/C,MAAMI,UAAU,GAAG,CAACJ,UAAU,GAAGD,WAAW,EAAEM,OAAO,CAAC,CAAC,CAAC;MACxD,MAAMC,cAAc,GAAGtF,kBAAkB,CACtCwC,GAAG,CAAEwB,QAAQ,IAAK;QACjB,MAAMiB,KAAK,GAAGH,MAAM,CAACS,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACN,MAAM,CAAC3C,IAAI,KAAKyB,QAAQ,CAAC9D,KAAK,CAAC;QAClE,OAAO+E,KAAK,GACR,GAAGjB,QAAQ,CAAC9D,KAAK,KAAK+E,KAAK,CAACE,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE,GAC1C,GAAGrB,QAAQ,CAAC9D,KAAK,OAAO;MAC9B,CAAC,CAAC,CACDuF,IAAI,CAAC,MAAM,CAAC;MAEf,IAAIC,WAAW,GAAG,kBAAkBV,UAAU,CAACK,OAAO,CAAC,CAAC,CAAC,eAAe;MACxEK,WAAW,IAAI,mBAAmBX,WAAW,CAACM,OAAO,CAAC,CAAC,CAAC,eAAe;MACvEK,WAAW,IAAI,eAAeN,UAAU,UAAU;MAClDM,WAAW,IAAI,yDAAyDJ,cAAc,EAAE;MAExFrE,gBAAgB,CAACgB,OAAO,GAAGyD,WAAW;MAEtC,OAAOZ,MAAM,CAACa,MAAM,CAAC,CAACC,CAAC,EAAEX,KAAK,KAAK;QACjC,OACEW,CAAC,GACD,0BAA0BX,KAAK,CAACC,MAAM,CAACxC,KAAK,KAAKuC,KAAK,CAACC,MAAM,CAAC3C,IAAI,YAAY0C,KAAK,CAACE,CAAC,EAAE;MAE3F,CAAC,EAAE,MAAMnG,UAAU,CAAC6G,UAAU,CAAC,eAAe,EAAE,IAAI,CAAC7C,CAAC,CAAC,MAAM,CAAC;IAChE;IACA,OAAO8B,MAAM,CAACa,MAAM,CAAC,CAACC,CAAC,EAAEX,KAAK,KAAK;MACjC,OACEW,CAAC,GACD,0BAA0BX,KAAK,CAACC,MAAM,CAACxC,KAAK,KAAKuC,KAAK,CAACC,MAAM,CAAC3C,IAAI,YAAY0C,KAAK,CAACE,CAAC,EAAE;IAE3F,CAAC,EAAE,MAAMnG,UAAU,CAAC6G,UAAU,CAAC,eAAe,EAAE,IAAI,CAAC7C,CAAC,CAAC,MAAM,CAAC;EAChE,CAAC;EAED,MAAM8C,OAAO,GAAG;IACdC,KAAK,EAAE;MACLxC,IAAI,EAAE,MAAM;MACZyC,QAAQ,EAAE,GAAG;MACbC,eAAe,EAAE;QACfC,cAAc,EAAE;UAAEC,EAAE,EAAE,CAAC;UAAEC,EAAE,EAAE,CAAC;UAAEC,EAAE,EAAE,CAAC;UAAEC,EAAE,EAAE;QAAE,CAAC;QAC9CC,KAAK,EAAExF,UAAU,GACb,CACE,CAAC,CAAC,EAAE,SAAS,CAAC,EACd,CAAC,CAAC,EAAE,SAAS,CAAC,CACf,GACD,CACE,CAAC,CAAC,EAAE,SAAS,CAAC,EACd,CAAC,CAAC,EAAE,SAAS,CAAC;MAEtB,CAAC;MACDyF,YAAY,EAAE,EAAE;MAAE;MAClBC,KAAK,EAAE;QACLC,UAAU,EAAE,8BAA8B,CAAE;MAC9C,CAAC;MACDC,eAAe,EAAE5F,UAAU,GAAG,SAAS,GAAG,SAAS;MACnD6F,eAAe,EAAE,CAAC;MAClBC,MAAM,EAAE;QACNC,IAAI,EAAE,SAAAA,CAAA,EAAY;UAChB,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC1G,SAAS,CAACwB,OAAO,CAAC,CAAC,EAAErB,OAAO,CAACqB,OAAO,CAAC,CAAC,CAAC;QACnE;MACF,CAAC;MACD6B,KAAK,EAAE;QACLsD,kBAAkB,EAAE,IAAI;QACxBC,eAAe,EAAE;MACnB;IACF,CAAC;IACDC,KAAK,EAAE;MACLC,IAAI,EAAE,cAAc;MACpBX,KAAK,EAAE;QACL/D,KAAK,EAAE3B,UAAU,GAAG,SAAS,GAAG,SAAS;QACzCsG,QAAQ,EAAE,MAAM;QAChBC,UAAU,EAAE;MACd;IACF,CAAC;IACDP,KAAK,EAAE;MACLxD,IAAI,EAAE,UAAU;MAChB4D,KAAK,EAAE;QACLC,IAAI,EAAE,MAAM;QACZX,KAAK,EAAE;UACL/D,KAAK,EAAE3B,UAAU,GAAG,SAAS,GAAG,SAAS;UACzCsG,QAAQ,EAAE,MAAM;UAChBC,UAAU,EAAE;QACd;MACF,CAAC;MACDC,SAAS,EAAExG,UAAU,GAAG,SAAS,GAAG,SAAS;MAC7CyG,SAAS,EAAEzG,UAAU,GAAG,SAAS,GAAG,SAAS;MAC7C0G,MAAM,EAAE;QACNhB,KAAK,EAAE;UACL/D,KAAK,EAAE3B,UAAU,GAAG,SAAS,GAAG,SAAS;UACzCsG,QAAQ,EAAE;QACZ;MACF;IACF,CAAC;IACDK,KAAK,EAAE;MACLP,KAAK,EAAE;QACLC,IAAI,EAAE,gBAAgB;QACtBX,KAAK,EAAE;UACL/D,KAAK,EAAE3B,UAAU,GAAG,SAAS,GAAG,SAAS;UACzCsG,QAAQ,EAAE,MAAM;UAChBC,UAAU,EAAE;QACd;MACF,CAAC;MACDK,aAAa,EAAE5G,UAAU,GAAG,SAAS,GAAG,SAAS;MACjD0G,MAAM,EAAE;QACNhB,KAAK,EAAE;UACL/D,KAAK,EAAE3B,UAAU,GAAG,SAAS,GAAG,SAAS;UACzCsG,QAAQ,EAAE;QACZ;MACF;IACF,CAAC;IACDO,MAAM,EAAE;MACNC,MAAM,EAAE,YAAY;MACpBC,KAAK,EAAE,QAAQ;MACfC,aAAa,EAAE,QAAQ;MACvBC,SAAS,EAAE;QACTtF,KAAK,EAAE3B,UAAU,GAAG,SAAS,GAAG,SAAS;QACzCsG,QAAQ,EAAE,MAAM;QAChBC,UAAU,EAAE;MACd,CAAC;MACDW,cAAc,EAAE;QACdvF,KAAK,EAAE3B,UAAU,GAAG,SAAS,GAAG;MAClC,CAAC;MACDmH,eAAe,EAAE;QACfxF,KAAK,EAAE3B,UAAU,GAAG,SAAS,GAAG;MAClC;IACF,CAAC;IACDoH,OAAO,EAAE;MACPC,MAAM,EAAE,IAAI;MACZnC,eAAe,EAAElF,UAAU,GAAG,wBAAwB,GAAG,2BAA2B;MACpFsH,WAAW,EAAEtH,UAAU,GAAG,SAAS,GAAG,SAAS;MAC/C0F,KAAK,EAAE;QACL/D,KAAK,EAAE3B,UAAU,GAAG,SAAS,GAAG;MAClC,CAAC;MACDuH,SAAS,EAAEzD;IACb,CAAC;IACDK,MAAM,EAAEpB,OAAO,CAAC,CAAC;IACjByE,UAAU,EAAE;MACVC,aAAa,EAAE;QACb5F,OAAO,EAAE,IAAI;QACb6F,KAAK,EAAE;UACLC,IAAI,EAAE3H,UAAU,GAAG,SAAS,GAAG,SAAS;UACxC4H,MAAM,EAAE5H,UAAU,GAAG,SAAS,GAAG,SAAS;UAC1C0F,KAAK,EAAE;YACL/D,KAAK,EAAE3B,UAAU,GAAG,SAAS,GAAG;UAClC;QACF;MACF;IACF,CAAC;IACD6H,SAAS,EAAE;MACTC,OAAO,EAAE;QACPC,aAAa,EAAE;UACbC,YAAY,EAAEhI,UAAU,GAAG,SAAS,GAAG,SAAS;UAChD0H,KAAK,EAAE;YACLC,IAAI,EAAE3H,UAAU,GAAG,SAAS,GAAG;UACjC;QACF;MACF;IACF;EACF,CAAC;EAEDjC,SAAS,CAAC,MAAM;IACd,IAAI,CAAC+B,OAAO,IAAIF,IAAI,CAACoB,MAAM,GAAG,CAAC,EAAE;MAC/B/C,UAAU,CAACgK,MAAM,CAACpE,OAAO,CAAEmB,KAAK,IAAK;QACnC,IAAIA,KAAK,EAAE;UACTA,KAAK,CAACgB,KAAK,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC1G,SAAS,CAACwB,OAAO,CAAC,CAAC,EAAErB,OAAO,CAACqB,OAAO,CAAC,CAAC,CAAC;UAClEiE,KAAK,CAACb,MAAM,CAACN,OAAO,CAAEM,MAAM,IAAK;YAC/BA,MAAM,CAACtE,OAAO,CAACkD,OAAO,CAAC,CAAC,CAACyB,IAAI,CAAEK,CAAC,IAAKA,CAAC,CAACrD,IAAI,KAAK2C,MAAM,CAAC3C,IAAI,CAAC,CAAC5B,IAAI,CAAC;UACpE,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACL,SAAS,EAAEG,OAAO,EAAET,kBAAkB,EAAEa,OAAO,EAAEF,IAAI,EAAEI,UAAU,CAAC,CAAC;EAEvE,oBACEpB,OAAA;IAAKsJ,SAAS,EAAE,iBAAiBlI,UAAU,GAAG,YAAY,GAAG,aAAa,EAAG;IAAAmI,QAAA,eAC3EvJ,OAAA;MAAKsJ,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5BvJ,OAAA,CAACH,MAAM;QAAA2J,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACV3J,OAAA;QAAKsJ,SAAS,EAAC,qBAAqB;QAAAC,QAAA,gBAClCvJ,OAAA;UAAKsJ,SAAS,EAAC,mBAAmB;UAAAC,QAAA,gBAChCvJ,OAAA;YAAAuJ,QAAA,EAAO;UAAkB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACjC3J,OAAA,CAACF,QAAQ;YAACO,kBAAkB,EAAEA,kBAAmB;YAACuJ,QAAQ,EAAE3F;UAAqB;YAAAuF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjF,CAAC,eACN3J,OAAA;UAAKsJ,SAAS,EAAC,aAAa;UAAAC,QAAA,gBAC1BvJ,OAAA;YAAAuJ,QAAA,EAAO;UAAkB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACjC3J,OAAA,CAACJ,UAAU;YACTiK,QAAQ,EAAElJ,SAAU;YACpBiJ,QAAQ,EAAG1H,IAAI,IAAKtB,YAAY,CAACsB,IAAI,CAAE;YACvC4H,YAAY;YACZnJ,SAAS,EAAEA,SAAU;YACrBG,OAAO,EAAEA,OAAQ;YACjBwI,SAAS,EAAC;UAAY;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvB,CAAC,eACF3J,OAAA,CAACJ,UAAU;YACTiK,QAAQ,EAAE/I,OAAQ;YAClB8I,QAAQ,EAAG1H,IAAI,IAAKnB,UAAU,CAACmB,IAAI,CAAE;YACrC6H,UAAU;YACVpJ,SAAS,EAAEA,SAAU;YACrBG,OAAO,EAAEA,OAAQ;YACjBkJ,OAAO,EAAErJ,SAAU;YACnB2I,SAAS,EAAC;UAAY;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACN3J,OAAA;QAAKsJ,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzBvJ,OAAA,CAACV,eAAe;UACdgK,SAAS,EAAC,cAAc;UACxBW,UAAU,EAAE5K,UAAW;UACvB8G,OAAO,EAAEA,OAAQ;UACjB+D,cAAc,EAAE;YAAEZ,SAAS,EAAE;UAAkB,CAAE;UACjDa,UAAU,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAE;UAC/BC,GAAG,EAAE7I;QAAS;UAAAiI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACf,CAAC,EACDxJ,iBAAiB,iBAChBH,OAAA;UAAKsJ,SAAS,EAAC,aAAa;UAAAC,QAAA,gBAC1BvJ,OAAA;YAAAuJ,QAAA,EAAI;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAChB3J,OAAA;YAAKqK,uBAAuB,EAAE;cAAEC,MAAM,EAAE7J;YAAQ;UAAE;YAAA+I,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClD,CACN,eAED3J,OAAA;UAAKsJ,SAAS,EAAC,oBAAoB;UAAAC,QAAA,eACjCvJ,OAAA,CAACL,SAAS;YACR6H,KAAK,EAAC,8BAA8B;YACpC+C,OAAO,EAAE/F,UAAU,CAAC,CAAE;YACtBxD,IAAI,EAAE8D,oBAAoB,CAAC,CAAE;YAC7B0F,UAAU;YACVC,gBAAgB;YAChBC,cAAc;YACdC,YAAY,EAAEC;UAAkB;YAAApB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAEN3J,OAAA;UAAKsJ,SAAS,EAAC,mBAAmB;UAAAC,QAAA,gBAChCvJ,OAAA;YACE6K,OAAO,EAAEA,CAAA,KAAMzK,oBAAoB,CAAC,CAACD,iBAAiB,CAAE;YACxDmJ,SAAS,EAAC,eAAe;YAAAC,QAAA,EAExBpJ,iBAAiB,GAAG,6BAA6B,GAAG;UAA4B;YAAAqJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC3E,CAAC,eACT3J,OAAA;YAAKsJ,SAAS,EAAC,UAAU;YAAAC,QAAA,gBACvBvJ,OAAA;cAAQsJ,SAAS,EAAC,eAAe;cAAAC,QAAA,EAAC;YAAQ;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACnD3J,OAAA;cAAKsJ,SAAS,EAAC,kBAAkB;cAAAC,QAAA,gBAC/BvJ,OAAA;gBAAQ6K,OAAO,EAAEA,CAAA,KAAMtJ,QAAQ,CAACe,OAAO,CAAC8D,KAAK,CAAC0E,WAAW,CAAC;kBAAElH,IAAI,EAAE;gBAAY,CAAC,CAAE;gBAAA2F,QAAA,EAAC;cAAG;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAC9F3J,OAAA;gBAAQ6K,OAAO,EAAEA,CAAA,KAAMtJ,QAAQ,CAACe,OAAO,CAAC8D,KAAK,CAAC0E,WAAW,CAAC;kBAAElH,IAAI,EAAE;gBAAa,CAAC,CAAE;gBAAA2F,QAAA,EAAC;cAAI;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAChG3J,OAAA;gBAAQ6K,OAAO,EAAEA,CAAA,KAAMtJ,QAAQ,CAACe,OAAO,CAAC8D,KAAK,CAAC0E,WAAW,CAAC;kBAAElH,IAAI,EAAE;gBAAkB,CAAC,CAAE;gBAAA2F,QAAA,EAAC;cAAG;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACpG3J,OAAA;gBAAQ6K,OAAO,EAAEA,CAAA,KAAMtJ,QAAQ,CAACe,OAAO,CAAC8D,KAAK,CAAC0E,WAAW,CAAC;kBAAElH,IAAI,EAAE;gBAAgB,CAAC,CAAE;gBAAA2F,QAAA,EAAC;cAAG;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC/F,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACzJ,EAAA,CAhdID,KAAK;AAAA8K,EAAA,GAAL9K,KAAK;AAkdX,MAAM2K,iBAAiB,GAAG;EACxBI,MAAM,EAAE;IACNlE,KAAK,EAAE;MACLY,QAAQ,EAAE,MAAM;MAChBC,UAAU,EAAE,MAAM;MAClB5E,KAAK,EAAE,mBAAmB;MAC1BuD,eAAe,EAAE;IACnB;EACF,CAAC;EACD2E,IAAI,EAAE;IACJnE,KAAK,EAAE;MACLY,QAAQ,EAAE,MAAM;MAChB3E,KAAK,EAAE,mBAAmB;MAC1BuD,eAAe,EAAE,uBAAuB;MACxC,sBAAsB,EAAE;QACtB4E,iBAAiB,EAAE,OAAO;QAC1BC,iBAAiB,EAAE,KAAK;QACxBC,iBAAiB,EAAE;MACrB;IACF;EACF,CAAC;EACDC,SAAS,EAAE;IACTvE,KAAK,EAAE;MACLY,QAAQ,EAAE,MAAM;MAChBC,UAAU,EAAE,MAAM;MAClB5E,KAAK,EAAE,mBAAmB;MAC1BuD,eAAe,EAAE;IACnB;EACF,CAAC;EACDgF,KAAK,EAAE;IACLxE,KAAK,EAAE;MACLY,QAAQ,EAAE,MAAM;MAChB3E,KAAK,EAAE,mBAAmB;MAC1BuD,eAAe,EAAE;IACnB;EACF;AACF,CAAC;AAED,eAAerG,KAAK;AAAC,IAAA8K,EAAA;AAAAQ,YAAA,CAAAR,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}