{"ast":null,"code":"// import React, { useState, useEffect, useRef } from \"react\";\n// import Highcharts from \"highcharts\";\n// import HighchartsReact from \"highcharts-react-official\";\n// import HighchartsBoost from \"highcharts/modules/boost\";\n// import HighchartsExporting from \"highcharts/modules/exporting\";\n// import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// import HighchartsMore from \"highcharts/highcharts-more\";\n// import DataTable from \"react-data-table-component\";\n// import DatePicker from \"react-datepicker\";\n// import Select from \"react-select\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import Topbar from \"./Topbar\";\n// import \"../Styles/Graph.css\";\n// import Sidebar from \"./Sidebar\";\n// HighchartsBoost(Highcharts);\n// HighchartsExporting(Highcharts);\n// HighchartsAnnotations(Highcharts);\n// HighchartsMore(Highcharts);\n\n// const Graph = () => {\n//   const [compareWithTarget, setCompareWithTarget] = useState(false);\n//   const [selectedCurrencies, setSelectedCurrencies] = useState([\n//     { value: \"AUD\", label: \"AUD\" },\n//   ]);\n//   const [summary, setSummary] = useState(\"\");\n//   const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n//   const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n//   const [data, setData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [isDarkMode, setIsDarkMode] = useState(true);\n//   const latestSummaryRef = useRef(\"\");\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:5000/xva\");\n//         const result = await response.json();\n//         setData(result);\n//         setLoading(false);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//         setLoading(false);\n//       }\n//     };\n//     fetchData();\n//   }, []);\n\n//   const getFilteredData = () => {\n//     return data.filter((d) => {\n//       const date = new Date(d.Date).getTime();\n//       return date >= startDate.getTime() && date <= endDate.getTime();\n//     });\n//   };\n//   useEffect(() => {\n//     if (!loading && data.length > 0) {\n//       const updateSummary = () => {\n//         if (summary !== latestSummaryRef.current) {\n//           setSummary(latestSummaryRef.current);\n//         }\n//       };\n//       const interval = setInterval(updateSummary, 1000);\n//       return () => clearInterval(interval);\n//     }\n//   }, [loading, data, summary]);\n\n//   const filteredData = getFilteredData();\n\n//   const totalLine = {\n//     name: \"Total\",\n//     data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n//     color: isDarkMode ? \"#007bff\" : \"#343a40\",\n//     marker: { enabled: false },\n//     zIndex: 1,\n//     boostThreshold: 1,\n//   };\n\n//   const shadeData = {\n//     name: \"Shaded Area\",\n//     data: filteredData.map((d) => ({\n//       x: new Date(d.Date).getTime(),\n//       low: Math.min(d.Total, d.Target),\n//       high: Math.max(d.Total, d.Target),\n//     })),\n//     type: \"arearange\",\n//     lineWidth: 0,\n//     linkedTo: \"Total\",\n//     color: \"#2E8C39\",\n//     fillOpacity: 0.3,\n//     zIndex: 0,\n//     marker: { enabled: false },\n//     boostThreshold: 0,\n//     boost: false,\n//   };\n\n//   const handleCurrencyChange = (selectedOptions) => {\n//     setSelectedCurrencies(selectedOptions);\n//   };\n\n//   const getData = () => {\n//     const compareData = [\n//       ...selectedCurrencies.map((currency) => ({\n//         name: currency.value,\n//         data: filteredData.map((d) => [\n//           new Date(d.Date).getTime(),\n//           d[currency.value],\n//         ]),\n//         color: getCurrencyColor(currency.value),\n//         marker: { enabled: false },\n//         boostThreshold: 1,\n//       })),\n//     totalLine,\n//     {\n//         name: \"Target\",\n//         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n//         color: \"#007bff\",\n//         marker: { enabled: false },\n//         zIndex: 1,\n//         boostThreshold: 1,\n\n//     },\n//     shadeData,\n//     ];\n//     return compareWithTarget ? compareData : compareData.slice(0, -1);\n//     };\n\n//     const getCurrencyColor = (currency) => {\n//     switch (currency) {\n//         case \"AUD\":\n//         return \"#FFD700\";\n//         case \"EUR\":\n//         return \"#FF6347\";\n//         case \"GBP\":\n//         return \"#4682B4\";\n//         case \"JPY\":\n//         return \"#32CD32\";\n//         case \"USD\":\n//         return \"#FFA07A\";\n//         case \"BRL\":\n//         return \"#9400D3\";\n//         case \"CAD\":\n//         return \"#00FF00\";\n//         case \"CHF\":\n//         return \"#FF00FF\";\n//         case \"CLP\":\n//         return \"#00FFFF\";\n//         case \"CNY\":\n//         return \"#FF4500\";\n//         case \"CZK\":\n//         return \"#FF1493\";\n//         case \"DKK\":\n//         return \"#1E90FF\";\n//         case \"HKD\":\n//         return \"#FF69B4\";\n//         case \"HUF\":\n//         return \"#8A2BE2\";\n//         case \"INR\":\n//         return \"#00BFFF\";\n//         case \"KRW\":\n//         return \"#7B68EE\";\n//         case \"NOK\":\n//         return \"#FFD700\";\n//         case \"NZD\":\n//         return \"#FF6347\";\n//         case \"PLN\":\n//         return \"#4682B4\";\n//         case \"SEK\":\n//         return \"#32CD32\";\n//         case \"SGD\":\n//         return \"#FFA07A\";\n//         case \"THB\":\n//         return \"#9400D3\";\n//         case \"TWD\":\n//         return \"#00FF00\";\n//         case \"ZAR\":\n//         return \"#FF00FF\";\n//         default:\n//         return \"#FF4500\";\n//     };\n//     };\n\n//     const getColumns=()=>{\n//         const baseColumns = [\n//             {name: \"Date\", selector: (row)=> row.Date,sortable: true},\n//             {name: \"Target\", selector: (row)=> row.Target,sortable: true},\n//         ];\n\n//         const currencyColumns = selectedCurrencies.map((currency)=>({\n//             name: currency.label,\n//             selector: (row)=> row[currency.value],\n//             sortable: true,\n//         }));\n\n//         return [...baseColumns, ...currencyColumns,{name: \"Total\", selector: (row)=> row.Total,sortable: true},\n\n//         ];\n//     };\n//     const getFilteredTableData = ()=>{\n//         return filteredData.map((d)=>{\n//             const rowData={\n//                 Data: d.Date,\n//                 Target: d.Target,\n//                 Total: d.Total,\n//             };\n//             selectedCurrencies.forEach((currency)=>{\n//                 rowData[currency.value] = d[currency.value];\n//         });\n//         return rowData;\n//         });\n\n// };\n// const handleTooltipFormatter = function () {\n//     const points = this.points;\n//     let targetValue = null;\n//     let totalValue = null;\n\n//     points.forEach((point) => {\n//       if (point.series.name === \"Target\") {\n//         targetValue = point.y;\n//       }\n//       if (point.series.name === \"Total\") {\n//         totalValue = point.y;\n//       }\n//     });\n\n//     if (targetValue !== null && totalValue !== null) {\n//       const difference = (totalValue - targetValue).toFixed(2);\n//       const totalBreakdown = selectedCurrencies\n//         .map((currency) => {\n//           const point = points.find((p) => p.series.name === currency.value);\n//           return point\n//             ? `${currency.value}: ${point.y.toFixed(2)}`\n//             : `${currency.value}: N/A`;\n//         })\n//         .join(\"<br>\");\n\n//       let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n//       summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n//       summaryHTML += `Difference: ${difference}<br><br>`;\n//       summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n//       latestSummaryRef.current = summaryHTML;\n\n//     return points.reduce((s, point) => {\n//       return (\n//         s +\n//         `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//       );\n//     }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// }\n//   return points.reduce((s,point)=>{\n//         return(\n//             s+\n//             `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//         );\n//   }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// };\n// const options = {\n//     chart: {\n//       type: \"line\",\n//       zoomType: \"x\",\n//       backgroundColor: {\n//         linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n//         stops: isDarkMode\n//           ? [\n//               [0, \"#2e2e2e\"],\n//               [1, \"#1a1a1a\"],\n//             ]\n//           : [\n//               [0, \"#ffffff\"],\n//               [1, \"#f0f0f0\"],\n//             ],\n//       },\n//       borderRadius: 10, // Rounded corners\n//       style: {\n//         fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n//       },\n//       plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//       plotBorderWidth: 1,\n//       events: {\n//         load: function () {\n//           this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n//         },\n//       },\n//       boost: {\n//         useGPUTranslations: true,\n//         usePreAllocated: true,\n//       },\n//     },\n//     title: {\n//       text: \"LCH Notional\",\n//       style: {\n//         color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//         fontSize: \"22px\",\n//         fontWeight: \"bold\",\n//       },\n//     },\n//     xAxis: {\n//       type: \"datetime\",\n//       title: {\n//         text: \"Date\",\n//         style: {\n//           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//           fontSize: \"14px\",\n//           fontWeight: \"bold\",\n//         },\n//       },\n//       lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//       tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//       labels: {\n//         style: {\n//           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//           fontSize: \"12px\",\n//         },\n//       },\n//     },\n//     yAxis: {\n//       title: {\n//         text: \"Notional (USD)\",\n//         style: {\n//           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//           fontSize: \"14px\",\n//           fontWeight: \"bold\",\n//         },\n//       },\n//       gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//       labels: {\n//         style: {\n//           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//           fontSize: \"12px\",\n//         },\n//       },\n//     },\n//     legend: {\n//       layout: \"horizontal\",\n//       align: \"center\",\n//       verticalAlign: \"bottom\",\n//       itemStyle: {\n//         color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//         fontSize: \"14px\",\n//         fontWeight: \"bold\",\n//       },\n//       itemHoverStyle: {\n//         color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//       },\n//       itemHiddenStyle: {\n//         color: isDarkMode ? \"#666666\" : \"#999999\",\n//       },\n//     },\n//     tooltip: {\n//       shared: true,\n//       backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n//       borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n//       style: {\n//         color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//       },\n//       formatter: handleTooltipFormatter,\n//     },\n//     series: getData(),\n//     navigation: {\n//       buttonOptions: {\n//         enabled: true,\n//         theme: {\n//           fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//           stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n//           style: {\n//             color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//           },\n//         },\n//       },\n//     },\n//     exporting: {\n//       buttons: {\n//         contextButton: {\n//           symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n//           theme: {\n//             fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//           },\n//         },\n//       },\n//     },\n//   };\n\n//   useEffect(()=>{\n//     if (!loading && data.length>0){\n//         Highcharts.charts.forEach((chart)=>{\n//             if(chart){\n//                 chart.xAxis[0].setExtremes(startDate.getTime(),endDate.getTime());\n//                 chart.series.forEach((series)=>{\n//                     series.setData(getData().find((s)=>s.name === series.name).data);\n//                 });\n//             }\n//         });\n//     }\n//   },[startDate,endDate,selectedCurrencies,loading,data,isDarkMode]);\n\n//   return(\n//     <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n//     <div className=\"app-container\">\n//       <Topbar />\n//       <Sidebar/>\n//       <div className=\"floating-box-container\">\n//         <div className=\"translucent-box\">\n//           <div className=\"control-group\">\n//             <div className=\"currency-selector\">\n//               <h2>Select Currencies to Include in Total:</h2>\n//               <Select\n//                 isMulti\n//                 name=\"currencies\"\n//                 options={[\n//                   { value: \"AUD\", label: \"AUD\" },\n//                   { value: \"EUR\", label: \"EUR\" },\n//                   { value: \"GBP\", label: \"GBP\" },\n//                   { value: \"JPY\", label: \"JPY\" },\n//                   { value: \"USD\", label: \"USD\" },\n//                   { value: \"BRL\", label: \"BRL\" },\n//                   { value: \"CAD\", label: \"CAD\" },\n//                   { value: \"CHF\", label: \"CHF\" },\n//                   { value: \"CLP\", label: \"CLP\" },\n//                   { value: \"CNY\", label: \"CNY\" },\n//                   { value: \"CZK\", label: \"CZK\" },\n//                   { value: \"DKK\", label: \"DKK\" },\n//                   { value: \"HKD\", label: \"HKD\" },\n//                   { value: \"HUF\", label: \"HUF\" },\n//                   { value: \"INR\", label: \"INR\" },\n//                   { value: \"KRW\", label: \"KRW\" },\n//                   { value: \"MXN\", label: \"MXN\" },\n//                   { value: \"NOK\", label: \"NOK\" },\n//                   { value: \"NZD\", label: \"NZD\" },\n//                   { value: \"PLN\", label: \"PLN\" },\n//                   { value: \"SEK\", label: \"SEK\" },\n//                   { value: \"SGD\", label: \"SGD\" },\n//                   { value: \"THB\", label: \"THB\" },\n//                   { value: \"TWD\", label: \"TWD\" },\n//                   { value: \"ZAR\", label: \"ZAR\" },\n//                 ]}\n//                 classNamePrefix={\"select\"}\n//                 value={selectedCurrencies}\n//                 onChange={handleCurrencyChange}\n//               />\n//             </div>\n//             </div>\n\n//             <div className=\"control-group\">\n//                 <div className = \"date-picker\">\n//                     <h2>Select a date range</h2>\n//                     <DatePicker\n//                         selected={startDate}\n//                         onChange={(date)=>setStartDate(date)}\n//                         selectsStart\n//                         startDate={startDate}\n//                         endDate={endDate}\n//                         className=\"date-input\"\n//                         />\n//                         <DatePicker\n//                         selected={endDate}\n//                         onChange={(date)=>setEndDate(date)}\n//                         selectsEnd\n//                         startDate={startDate}\n//                         endDate={endDate}\n//                         minDate={startDate}\n//                         className=\"date-input\"\n//                         />\n//                         </div>\n//                         </div>\n//                         </div>\n//                         <div className=\"translucent-box2\">\n//   <h2>Graph Options</h2>\n//   <button\n//     onClick={() => setCompareWithTarget(!compareWithTarget)}\n//     className=\"toggle-button\"\n//   >\n//     {compareWithTarget\n//       ? \"Disable Compare with Target\"\n//       : \"Enable Compare with Target\"}\n//   </button>\n\n//   <div className=\"download-section\">\n//     <button className=\"toggle-button\">Download</button>\n//     <div className=\"dropdown-content\">\n//       <button\n//         onClick={() =>\n//           chartRef.current.chart.exportChart({ type: \"image/png\" })\n//         }\n//       >\n//         PNG\n//       </button>\n//       <button\n//         onClick={() =>\n//           chartRef.current.chart.exportChart({ type: \"image/jpeg\" })\n//         }\n//       >\n//         JPEG\n//       </button>\n//       <button\n//         onClick={() =>\n//           chartRef.current.chart.exportChart({ type: \"application/pdf\" })\n//         }\n//       >\n//         PDF\n//       </button>\n//       <button\n//         onClick={() =>\n//           chartRef.current.chart.exportChart({ type: \"image/svg+xml\" })\n//         }\n//       >\n//         SVG\n//       </button>\n//     </div>\n//   </div>\n//   <button\n//     onClick={() => setIsDarkMode(!isDarkMode)}\n//     className=\"toggle-button\"\n//   >\n//     Toggle Dark Mode\n//   </button>\n// </div>\n// </div>\n// <div className=\"main-panel\">\n//   <HighchartsReact\n//     className=\"chart-actual\"\n//     highcharts={Highcharts}\n//     options={options}\n//     containerProps={{ className: \"chart-container\" }}\n//     updateArgs={[true, true, true]}\n//     ref={chartRef}\n//   />\n//   {compareWithTarget && (\n//     <div className=\"summary-box\">\n//       <h3>Summary</h3>\n//       <div dangerouslySetInnerHTML={{ __html: summary }} />\n//     </div>\n//   )}\n\n//   <div className=\"data-table-section\">\n//     <DataTable\n//       title=\"LCH Notional | Summary Table\"\n//       columns={getColumns()}\n//       data={getFilteredTableData()}\n//       pagination\n//       highlightOnHover\n//       pointerOnHover\n//       customStyles={customTableStyles}\n//     />\n//   </div>\n// </div>\n// </div>\n// </div>\n//   );\n\n// };\n// const customTableStyles = {\n//     header: {\n//       style: {\n//         fontSize: '22px',\n//         fontWeight: 'bold',\n//         color: 'var(--text-color)',\n//         backgroundColor: 'var(--control-bg-color)',\n//       },\n//     },\n//     rows: {\n//       style: {\n//         fontSize: '16px',\n//         color: 'var(--text-color)',\n//         backgroundColor: 'var(--input-bg-color)',\n//         '&:not(:last-of-type)': {\n//           borderBottomStyle: 'solid',\n//           borderBottomWidth: '1px',\n//           borderBottomColor: 'var(--control-bg-color)',\n//         },\n//       },\n//     },\n//     headCells: {\n//       style: {\n//         fontSize: '18px',\n//         fontWeight: 'bold',\n//         color: 'var(--text-color)',\n//         backgroundColor: 'var(--control-bg-color)',\n//       },\n//     },\n//     cells: {\n//       style: {\n//         fontSize: '16px',\n//         color: 'var(--text-color)',\n//         backgroundColor: 'var(--input-bg-color)',\n//       },\n//     },\n//   };\n// export default Graph;","map":{"version":3,"names":[],"sources":["/Users/harshmishra/Desktop/dashboard/frontend/src/Components/Graph.jsx"],"sourcesContent":["// import React, { useState, useEffect, useRef } from \"react\";\n// import Highcharts from \"highcharts\";\n// import HighchartsReact from \"highcharts-react-official\";\n// import HighchartsBoost from \"highcharts/modules/boost\";\n// import HighchartsExporting from \"highcharts/modules/exporting\";\n// import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// import HighchartsMore from \"highcharts/highcharts-more\";\n// import DataTable from \"react-data-table-component\";\n// import DatePicker from \"react-datepicker\";\n// import Select from \"react-select\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import Topbar from \"./Topbar\";\n// import \"../Styles/Graph.css\";\n// import Sidebar from \"./Sidebar\";\n// HighchartsBoost(Highcharts);\n// HighchartsExporting(Highcharts);\n// HighchartsAnnotations(Highcharts);\n// HighchartsMore(Highcharts);\n\n// const Graph = () => {\n//   const [compareWithTarget, setCompareWithTarget] = useState(false);\n//   const [selectedCurrencies, setSelectedCurrencies] = useState([\n//     { value: \"AUD\", label: \"AUD\" },\n//   ]);\n//   const [summary, setSummary] = useState(\"\");\n//   const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n//   const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n//   const [data, setData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [isDarkMode, setIsDarkMode] = useState(true);\n//   const latestSummaryRef = useRef(\"\");\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:5000/xva\");\n//         const result = await response.json();\n//         setData(result);\n//         setLoading(false);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//         setLoading(false);\n//       }\n//     };\n//     fetchData();\n//   }, []);\n\n//   const getFilteredData = () => {\n//     return data.filter((d) => {\n//       const date = new Date(d.Date).getTime();\n//       return date >= startDate.getTime() && date <= endDate.getTime();\n//     });\n//   };\n//   useEffect(() => {\n//     if (!loading && data.length > 0) {\n//       const updateSummary = () => {\n//         if (summary !== latestSummaryRef.current) {\n//           setSummary(latestSummaryRef.current);\n//         }\n//       };\n//       const interval = setInterval(updateSummary, 1000);\n//       return () => clearInterval(interval);\n//     }\n//   }, [loading, data, summary]);\n  \n//   const filteredData = getFilteredData();\n  \n//   const totalLine = {\n//     name: \"Total\",\n//     data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n//     color: isDarkMode ? \"#007bff\" : \"#343a40\",\n//     marker: { enabled: false },\n//     zIndex: 1,\n//     boostThreshold: 1,\n//   };\n  \n//   const shadeData = {\n//     name: \"Shaded Area\",\n//     data: filteredData.map((d) => ({\n//       x: new Date(d.Date).getTime(),\n//       low: Math.min(d.Total, d.Target),\n//       high: Math.max(d.Total, d.Target),\n//     })),\n//     type: \"arearange\",\n//     lineWidth: 0,\n//     linkedTo: \"Total\",\n//     color: \"#2E8C39\",\n//     fillOpacity: 0.3,\n//     zIndex: 0,\n//     marker: { enabled: false },\n//     boostThreshold: 0,\n//     boost: false,\n//   };\n  \n//   const handleCurrencyChange = (selectedOptions) => {\n//     setSelectedCurrencies(selectedOptions);\n//   };\n  \n//   const getData = () => {\n//     const compareData = [\n//       ...selectedCurrencies.map((currency) => ({\n//         name: currency.value,\n//         data: filteredData.map((d) => [\n//           new Date(d.Date).getTime(),\n//           d[currency.value],\n//         ]),\n//         color: getCurrencyColor(currency.value),\n//         marker: { enabled: false },\n//         boostThreshold: 1,\n//       })),\n//     totalLine,\n//     {\n//         name: \"Target\",\n//         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n//         color: \"#007bff\",\n//         marker: { enabled: false },\n//         zIndex: 1,\n//         boostThreshold: 1,\n\n//     },\n//     shadeData,\n//     ];\n//     return compareWithTarget ? compareData : compareData.slice(0, -1);\n//     };\n\n//     const getCurrencyColor = (currency) => {\n//     switch (currency) {\n//         case \"AUD\":\n//         return \"#FFD700\";\n//         case \"EUR\":\n//         return \"#FF6347\";\n//         case \"GBP\":\n//         return \"#4682B4\";\n//         case \"JPY\":\n//         return \"#32CD32\";\n//         case \"USD\":\n//         return \"#FFA07A\";\n//         case \"BRL\":\n//         return \"#9400D3\";\n//         case \"CAD\":\n//         return \"#00FF00\";\n//         case \"CHF\":\n//         return \"#FF00FF\";\n//         case \"CLP\":\n//         return \"#00FFFF\";\n//         case \"CNY\":\n//         return \"#FF4500\";\n//         case \"CZK\":\n//         return \"#FF1493\";\n//         case \"DKK\":\n//         return \"#1E90FF\";\n//         case \"HKD\":\n//         return \"#FF69B4\";\n//         case \"HUF\":\n//         return \"#8A2BE2\";\n//         case \"INR\":\n//         return \"#00BFFF\";\n//         case \"KRW\":\n//         return \"#7B68EE\";\n//         case \"NOK\":\n//         return \"#FFD700\";\n//         case \"NZD\":\n//         return \"#FF6347\";\n//         case \"PLN\":\n//         return \"#4682B4\";\n//         case \"SEK\":\n//         return \"#32CD32\";\n//         case \"SGD\":\n//         return \"#FFA07A\";\n//         case \"THB\":\n//         return \"#9400D3\";\n//         case \"TWD\":\n//         return \"#00FF00\";\n//         case \"ZAR\":\n//         return \"#FF00FF\";\n//         default:\n//         return \"#FF4500\";\n//     };\n//     };\n\n//     const getColumns=()=>{\n//         const baseColumns = [\n//             {name: \"Date\", selector: (row)=> row.Date,sortable: true},\n//             {name: \"Target\", selector: (row)=> row.Target,sortable: true},\n//         ];\n\n//         const currencyColumns = selectedCurrencies.map((currency)=>({\n//             name: currency.label,\n//             selector: (row)=> row[currency.value],\n//             sortable: true,\n//         }));\n\n//         return [...baseColumns, ...currencyColumns,{name: \"Total\", selector: (row)=> row.Total,sortable: true},\n\n//         ];\n//     };\n//     const getFilteredTableData = ()=>{\n//         return filteredData.map((d)=>{\n//             const rowData={\n//                 Data: d.Date,\n//                 Target: d.Target,\n//                 Total: d.Total,\n//             };\n//             selectedCurrencies.forEach((currency)=>{\n//                 rowData[currency.value] = d[currency.value];\n//         });\n//         return rowData;\n//         });\n\n// };\n// const handleTooltipFormatter = function () {\n//     const points = this.points;\n//     let targetValue = null;\n//     let totalValue = null;\n  \n//     points.forEach((point) => {\n//       if (point.series.name === \"Target\") {\n//         targetValue = point.y;\n//       }\n//       if (point.series.name === \"Total\") {\n//         totalValue = point.y;\n//       }\n//     });\n  \n//     if (targetValue !== null && totalValue !== null) {\n//       const difference = (totalValue - targetValue).toFixed(2);\n//       const totalBreakdown = selectedCurrencies\n//         .map((currency) => {\n//           const point = points.find((p) => p.series.name === currency.value);\n//           return point\n//             ? `${currency.value}: ${point.y.toFixed(2)}`\n//             : `${currency.value}: N/A`;\n//         })\n//         .join(\"<br>\");\n  \n//       let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n//       summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n//       summaryHTML += `Difference: ${difference}<br><br>`;\n//       summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n  \n//       latestSummaryRef.current = summaryHTML;\n    \n  \n//     return points.reduce((s, point) => {\n//       return (\n//         s +\n//         `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//       );\n//     }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// }\n//   return points.reduce((s,point)=>{\n//         return(\n//             s+\n//             `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//         );\n//   }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// };\n// const options = {\n//     chart: {\n//       type: \"line\",\n//       zoomType: \"x\",\n//       backgroundColor: {\n//         linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n//         stops: isDarkMode\n//           ? [\n//               [0, \"#2e2e2e\"],\n//               [1, \"#1a1a1a\"],\n//             ]\n//           : [\n//               [0, \"#ffffff\"],\n//               [1, \"#f0f0f0\"],\n//             ],\n//       },\n//       borderRadius: 10, // Rounded corners\n//       style: {\n//         fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n//       },\n//       plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//       plotBorderWidth: 1,\n//       events: {\n//         load: function () {\n//           this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n//         },\n//       },\n//       boost: {\n//         useGPUTranslations: true,\n//         usePreAllocated: true,\n//       },\n//     },\n//     title: {\n//       text: \"LCH Notional\",\n//       style: {\n//         color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//         fontSize: \"22px\",\n//         fontWeight: \"bold\",\n//       },\n//     },\n//     xAxis: {\n//       type: \"datetime\",\n//       title: {\n//         text: \"Date\",\n//         style: {\n//           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//           fontSize: \"14px\",\n//           fontWeight: \"bold\",\n//         },\n//       },\n//       lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//       tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//       labels: {\n//         style: {\n//           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//           fontSize: \"12px\",\n//         },\n//       },\n//     },\n//     yAxis: {\n//       title: {\n//         text: \"Notional (USD)\",\n//         style: {\n//           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//           fontSize: \"14px\",\n//           fontWeight: \"bold\",\n//         },\n//       },\n//       gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//       labels: {\n//         style: {\n//           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//           fontSize: \"12px\",\n//         },\n//       },\n//     },\n//     legend: {\n//       layout: \"horizontal\",\n//       align: \"center\",\n//       verticalAlign: \"bottom\",\n//       itemStyle: {\n//         color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//         fontSize: \"14px\",\n//         fontWeight: \"bold\",\n//       },\n//       itemHoverStyle: {\n//         color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//       },\n//       itemHiddenStyle: {\n//         color: isDarkMode ? \"#666666\" : \"#999999\",\n//       },\n//     },\n//     tooltip: {\n//       shared: true,\n//       backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n//       borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n//       style: {\n//         color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//       },\n//       formatter: handleTooltipFormatter,\n//     },\n//     series: getData(),\n//     navigation: {\n//       buttonOptions: {\n//         enabled: true,\n//         theme: {\n//           fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//           stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n//           style: {\n//             color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//           },\n//         },\n//       },\n//     },\n//     exporting: {\n//       buttons: {\n//         contextButton: {\n//           symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n//           theme: {\n//             fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//           },\n//         },\n//       },\n//     },\n//   };\n\n//   useEffect(()=>{\n//     if (!loading && data.length>0){\n//         Highcharts.charts.forEach((chart)=>{\n//             if(chart){\n//                 chart.xAxis[0].setExtremes(startDate.getTime(),endDate.getTime());\n//                 chart.series.forEach((series)=>{\n//                     series.setData(getData().find((s)=>s.name === series.name).data);\n//                 });\n//             }\n//         });\n//     }\n//   },[startDate,endDate,selectedCurrencies,loading,data,isDarkMode]);\n\n//   return(\n//     <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n//     <div className=\"app-container\">\n//       <Topbar />\n//       <Sidebar/>\n//       <div className=\"floating-box-container\">\n//         <div className=\"translucent-box\">\n//           <div className=\"control-group\">\n//             <div className=\"currency-selector\">\n//               <h2>Select Currencies to Include in Total:</h2>\n//               <Select\n//                 isMulti\n//                 name=\"currencies\"\n//                 options={[\n//                   { value: \"AUD\", label: \"AUD\" },\n//                   { value: \"EUR\", label: \"EUR\" },\n//                   { value: \"GBP\", label: \"GBP\" },\n//                   { value: \"JPY\", label: \"JPY\" },\n//                   { value: \"USD\", label: \"USD\" },\n//                   { value: \"BRL\", label: \"BRL\" },\n//                   { value: \"CAD\", label: \"CAD\" },\n//                   { value: \"CHF\", label: \"CHF\" },\n//                   { value: \"CLP\", label: \"CLP\" },\n//                   { value: \"CNY\", label: \"CNY\" },\n//                   { value: \"CZK\", label: \"CZK\" },\n//                   { value: \"DKK\", label: \"DKK\" },\n//                   { value: \"HKD\", label: \"HKD\" },\n//                   { value: \"HUF\", label: \"HUF\" },\n//                   { value: \"INR\", label: \"INR\" },\n//                   { value: \"KRW\", label: \"KRW\" },\n//                   { value: \"MXN\", label: \"MXN\" },\n//                   { value: \"NOK\", label: \"NOK\" },\n//                   { value: \"NZD\", label: \"NZD\" },\n//                   { value: \"PLN\", label: \"PLN\" },\n//                   { value: \"SEK\", label: \"SEK\" },\n//                   { value: \"SGD\", label: \"SGD\" },\n//                   { value: \"THB\", label: \"THB\" },\n//                   { value: \"TWD\", label: \"TWD\" },\n//                   { value: \"ZAR\", label: \"ZAR\" },\n//                 ]}\n//                 classNamePrefix={\"select\"}\n//                 value={selectedCurrencies}\n//                 onChange={handleCurrencyChange}\n//               />\n//             </div>\n//             </div>\n\n//             <div className=\"control-group\">\n//                 <div className = \"date-picker\">\n//                     <h2>Select a date range</h2>\n//                     <DatePicker\n//                         selected={startDate}\n//                         onChange={(date)=>setStartDate(date)}\n//                         selectsStart\n//                         startDate={startDate}\n//                         endDate={endDate}\n//                         className=\"date-input\"\n//                         />\n//                         <DatePicker\n//                         selected={endDate}\n//                         onChange={(date)=>setEndDate(date)}\n//                         selectsEnd\n//                         startDate={startDate}\n//                         endDate={endDate}\n//                         minDate={startDate}\n//                         className=\"date-input\"\n//                         />\n//                         </div>\n//                         </div>\n//                         </div>\n//                         <div className=\"translucent-box2\">\n//   <h2>Graph Options</h2>\n//   <button\n//     onClick={() => setCompareWithTarget(!compareWithTarget)}\n//     className=\"toggle-button\"\n//   >\n//     {compareWithTarget\n//       ? \"Disable Compare with Target\"\n//       : \"Enable Compare with Target\"}\n//   </button>\n\n//   <div className=\"download-section\">\n//     <button className=\"toggle-button\">Download</button>\n//     <div className=\"dropdown-content\">\n//       <button\n//         onClick={() =>\n//           chartRef.current.chart.exportChart({ type: \"image/png\" })\n//         }\n//       >\n//         PNG\n//       </button>\n//       <button\n//         onClick={() =>\n//           chartRef.current.chart.exportChart({ type: \"image/jpeg\" })\n//         }\n//       >\n//         JPEG\n//       </button>\n//       <button\n//         onClick={() =>\n//           chartRef.current.chart.exportChart({ type: \"application/pdf\" })\n//         }\n//       >\n//         PDF\n//       </button>\n//       <button\n//         onClick={() =>\n//           chartRef.current.chart.exportChart({ type: \"image/svg+xml\" })\n//         }\n//       >\n//         SVG\n//       </button>\n//     </div>\n//   </div>\n//   <button\n//     onClick={() => setIsDarkMode(!isDarkMode)}\n//     className=\"toggle-button\"\n//   >\n//     Toggle Dark Mode\n//   </button>\n// </div>\n// </div>\n// <div className=\"main-panel\">\n//   <HighchartsReact\n//     className=\"chart-actual\"\n//     highcharts={Highcharts}\n//     options={options}\n//     containerProps={{ className: \"chart-container\" }}\n//     updateArgs={[true, true, true]}\n//     ref={chartRef}\n//   />\n//   {compareWithTarget && (\n//     <div className=\"summary-box\">\n//       <h3>Summary</h3>\n//       <div dangerouslySetInnerHTML={{ __html: summary }} />\n//     </div>\n//   )}\n\n//   <div className=\"data-table-section\">\n//     <DataTable\n//       title=\"LCH Notional | Summary Table\"\n//       columns={getColumns()}\n//       data={getFilteredTableData()}\n//       pagination\n//       highlightOnHover\n//       pointerOnHover\n//       customStyles={customTableStyles}\n//     />\n//   </div>\n// </div>\n// </div>\n// </div>\n//   );\n  \n// };\n// const customTableStyles = {\n//     header: {\n//       style: {\n//         fontSize: '22px',\n//         fontWeight: 'bold',\n//         color: 'var(--text-color)',\n//         backgroundColor: 'var(--control-bg-color)',\n//       },\n//     },\n//     rows: {\n//       style: {\n//         fontSize: '16px',\n//         color: 'var(--text-color)',\n//         backgroundColor: 'var(--input-bg-color)',\n//         '&:not(:last-of-type)': {\n//           borderBottomStyle: 'solid',\n//           borderBottomWidth: '1px',\n//           borderBottomColor: 'var(--control-bg-color)',\n//         },\n//       },\n//     },\n//     headCells: {\n//       style: {\n//         fontSize: '18px',\n//         fontWeight: 'bold',\n//         color: 'var(--text-color)',\n//         backgroundColor: 'var(--control-bg-color)',\n//       },\n//     },\n//     cells: {\n//       style: {\n//         fontSize: '16px',\n//         color: 'var(--text-color)',\n//         backgroundColor: 'var(--input-bg-color)',\n//       },\n//     },\n//   };\n// export default Graph;  \n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}