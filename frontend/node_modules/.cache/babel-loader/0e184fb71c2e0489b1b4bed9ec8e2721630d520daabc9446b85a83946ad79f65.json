{"ast":null,"code":"var _jsxFileName = \"/Users/harshmishra/Desktop/dashboard/frontend/src/Components/Graph.jsx\",\n  _s = $RefreshSig$();\n// // // import React, { useState, useEffect, useRef } from \"react\";\n// // // import Highcharts from \"highcharts\";\n// // // import HighchartsReact from \"highcharts-react-official\";\n// // // import HighchartsBoost from \"highcharts/modules/boost\";\n// // // import HighchartsExporting from \"highcharts/modules/exporting\";\n// // // import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// // // import HighchartsMore from \"highcharts/highcharts-more\";\n// // // import DataTable from \"react-data-table-component\";\n// // // import DatePicker from \"react-datepicker\";\n// // // import \"react-datepicker/dist/react-datepicker.css\";\n// // // import Topbar from \"./Topbar\";\n// // // import Selector from \"./Selector\";\n// // // import \"../Styles/Graph.css\";\n\n// // // HighchartsBoost(Highcharts);\n// // // HighchartsExporting(Highcharts);\n// // // HighchartsAnnotations(Highcharts);\n// // // HighchartsMore(Highcharts);\n\n// // // const Graph = () => {\n// // //   const [compareWithTarget, setCompareWithTarget] = useState(false);\n// // //   const [selectedCurrencies, setSelectedCurrencies] = useState([\n// // //     { value: \"AUD\", label: \"AUD\" },\n// // //     { value: \"EUR\", label: \"EUR\" },\n// // //     { value: \"GBP\", label: \"GBP\" },\n// // //     { value: \"JPY\", label: \"JPY\" },\n// // //     { value: \"USD\", label: \"USD\" }\n// // //   ]);\n// // //   const [summary, setSummary] = useState(\"\");\n// // //   const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n// // //   const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n// // //   const [data, setData] = useState([]);\n// // //   const [loading, setLoading] = useState(true);\n// // //   const [isDarkMode, setIsDarkMode] = useState(true);\n// // //   const latestSummaryRef = useRef(\"\");\n// // //   const chartRef = useRef(null);\n\n// // //   useEffect(() => {\n// // //     const fetchData = async () => {\n// // //       try {\n// // //         const response = await fetch(\"http://localhost:5000/xva\");\n// // //         const result = await response.json();\n// // //         setData(result);\n// // //         setLoading(false);\n// // //       } catch (error) {\n// // //         console.error(\"Error fetching data:\", error);\n// // //         setLoading(false);\n// // //       }\n// // //     };\n// // //     fetchData();\n// // //   }, []);\n\n// // //   const getFilteredData = () => {\n// // //     return data.filter((d) => {\n// // //       const date = new Date(d.Date).getTime();\n// // //       return date >= startDate.getTime() && date <= endDate.getTime();\n// // //     });\n// // //   };\n\n// // //   useEffect(() => {\n// // //     if (!loading && data.length > 0) {\n// // //       const updateSummary = () => {\n// // //         if (summary !== latestSummaryRef.current) {\n// // //           setSummary(latestSummaryRef.current);\n// // //         }\n// // //       };\n// // //       const interval = setInterval(updateSummary, 1000);\n// // //       return () => clearInterval(interval);\n// // //     }\n// // //   }, [loading, data, summary]);\n\n// // //   const filteredData = getFilteredData();\n\n// // //   const totalLine = {\n// // //     name: \"Total\",\n// // //     data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n// // //     color: isDarkMode ? \"#007bff\" : \"#343a40\",\n// // //     marker: { enabled: false },\n// // //     zIndex: 1,\n// // //     boostThreshold: 1,\n// // //   };\n\n// // //   const shadeData = {\n// // //     name: \"Shaded Area\",\n// // //     data: filteredData.map((d) => ({\n// // //       x: new Date(d.Date).getTime(),\n// // //       low: Math.min(d.Total, d.Target),\n// // //       high: Math.max(d.Total, d.Target),\n// // //     })),\n// // //     type: \"arearange\",\n// // //     lineWidth: 0,\n// // //     linkedTo: \"Total\",\n// // //     color: \"#2E8C39\",\n// // //     fillOpacity: 0.3,\n// // //     zIndex: 0,\n// // //     marker: { enabled: false },\n// // //     boostThreshold: 0,\n// // //     boost: false,\n// // //   };\n\n// // //   const getData = () => {\n// // //     const compareData = [\n// // //       ...selectedCurrencies.map((currency) => ({\n// // //         name: currency.value,\n// // //         data: filteredData.map((d) => [\n// // //           new Date(d.Date).getTime(),\n// // //           d[currency.value],\n// // //         ]),\n// // //         color: getCurrencyColor(currency.value),\n// // //         marker: { enabled: false },\n// // //         boostThreshold: 1,\n// // //       })),\n// // //       totalLine,\n// // //       {\n// // //         name: \"Target\",\n// // //         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n// // //         color: \"#007bff\",\n// // //         marker: { enabled: false },\n// // //         zIndex: 1,\n// // //         boostThreshold: 1,\n// // //       },\n// // //       shadeData,\n// // //     ];\n// // //     return compareWithTarget ? compareData : compareData.slice(0, -1);\n// // //   };\n\n// // //   const getCurrencyColor = (currency) => {\n// // //     switch (currency) {\n// // //       case \"AUD\":\n// // //         return \"#FFD700\";\n// // //       case \"EUR\":\n// // //         return \"#FF6347\";\n// // //       case \"GBP\":\n// // //         return \"#4682B4\";\n// // //       case \"JPY\":\n// // //         return \"#32CD32\";\n// // //       case \"USD\":\n// // //         return \"#FFA07A\";\n// // //       case \"BRL\":\n// // //         return \"#9400D3\";\n// // //       case \"CAD\":\n// // //         return \"#00FF00\";\n// // //       case \"CHF\":\n// // //         return \"#FF00FF\";\n// // //       case \"CLP\":\n// // //         return \"#00FFFF\";\n// // //       case \"CNY\":\n// // //         return \"#FF4500\";\n// // //       case \"CZK\":\n// // //         return \"#FF1493\";\n// // //       case \"DKK\":\n// // //         return \"#1E90FF\";\n// // //       case \"HKD\":\n// // //         return \"#FF69B4\";\n// // //       case \"HUF\":\n// // //         return \"#8A2BE2\";\n// // //       case \"INR\":\n// // //         return \"#00BFFF\";\n// // //       case \"KRW\":\n// // //         return \"#7B68EE\";\n// // //       case \"NOK\":\n// // //         return \"#FFD700\";\n// // //       case \"NZD\":\n// // //         return \"#FF6347\";\n// // //       case \"PLN\":\n// // //         return \"#4682B4\";\n// // //       case \"SEK\":\n// // //         return \"#32CD32\";\n// // //       case \"SGD\":\n// // //         return \"#FFA07A\";\n// // //       case \"THB\":\n// // //         return \"#9400D3\";\n// // //       case \"TWD\":\n// // //         return \"#00FF00\";\n// // //       case \"ZAR\":\n// // //         return \"#FF00FF\";\n// // //       default:\n// // //         return \"#FF4500\";\n// // //     }\n// // //   };\n\n// // //   const toggleTheme = () => {\n// // //     setIsDarkMode(!isDarkMode);\n// // //   };\n\n// // //   return (\n// // //     <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n// // //       <Topbar isDarkMode={isDarkMode} toggleTheme={toggleTheme} />\n// // //       <div className=\"graph-container\">\n// // //         <h2 className=\"graph-title\">LCH Notional | Time Series</h2>\n// // //         <div className=\"selectors-container\">\n// // //           <div className=\"currency-selector\">\n// // //             <label>Select Currencies:</label>\n// // //             <Selector\n// // //               options={[\n// // //                 { value: \"AUD\", label: \"AUD\" },\n// // //                 { value: \"EUR\", label: \"EUR\" },\n// // //                 { value: \"GBP\", label: \"GBP\" },\n// // //                 { value: \"JPY\", label: \"JPY\" },\n// // //                 { value: \"USD\", label: \"USD\" },\n// // //                 { value: \"BRL\", label: \"BRL\" },\n// // //                 { value: \"CAD\", label: \"CAD\" },\n// // //                 { value: \"CHF\", label: \"CHF\" },\n// // //                 { value: \"CLP\", label: \"CLP\" },\n// // //                 { value: \"CNY\", label: \"CNY\" },\n// // //                 { value: \"CZK\", label: \"CZK\" },\n// // //                 { value: \"DKK\", label: \"DKK\" },\n// // //                 { value: \"HKD\", label: \"HKD\" },\n// // //                 { value: \"HUF\", label: \"HUF\" },\n// // //                 { value: \"INR\", label: \"INR\" },\n// // //                 { value: \"KRW\", label: \"KRW\" },\n// // //                 { value: \"MXN\", label: \"MXN\" },\n// // //                 { value: \"NOK\", label: \"NOK\" },\n// // //                 { value: \"NZD\", label: \"NZD\" },\n// // //                 { value: \"PLN\", label: \"PLN\" },\n// // //                 { value: \"SEK\", label: \"SEK\" },\n// // //                 { value: \"SGD\", label: \"SGD\" },\n// // //                 { value: \"THB\", label: \"THB\" },\n// // //                 { value: \"TWD\", label: \"TWD\" },\n// // //                 { value: \"ZAR\", label: \"ZAR\" },\n// // //               ]}\n// // //               selectedCurrencies={selectedCurrencies}\n// // //               setSelectedCurrencies={setSelectedCurrencies}\n// // //             />\n// // //           </div>\n// // //           <div className=\"date-picker\">\n// // //             <label>Select Date Range:</label>\n// // //             <DatePicker\n// // //               selected={startDate}\n// // //               onChange={(date) => setStartDate(date)}\n// // //               selectsStart\n// // //               startDate={startDate}\n// // //               endDate={endDate}\n// // //               className=\"date-input\"\n// // //             />\n// // //             <DatePicker\n// // //               selected={endDate}\n// // //               onChange={(date) => setEndDate(date)}\n// // //               selectsEnd\n// // //               startDate={startDate}\n// // //               endDate={endDate}\n// // //               minDate={startDate}\n// // //               className=\"date-input\"\n// // //             />\n// // //           </div>\n// // //         </div>\n// // //         <div className=\"main-panel\">\n// // //           <HighchartsReact\n// // //             className=\"chart-actual\"\n// // //             highcharts={Highcharts}\n// // //             options={{\n// // //               chart: {\n// // //                 type: \"line\",\n// // //                 zoomType: \"x\",\n// // //                 backgroundColor: {\n// // //                   linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n// // //                   stops: isDarkMode\n// // //                     ? [\n// // //                         [0, \"#2e2e2e\"],\n// // //                         [1, \"#1a1a1a\"],\n// // //                       ]\n// // //                     : [\n// // //                         [0, \"#ffffff\"],\n// // //                         [1, \"#f0f0f0\"],\n// // //                       ],\n// // //                 },\n// // //                 borderRadius: 10, // Rounded corners\n// // //                 style: {\n// // //                   fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n// // //                 },\n// // //                 plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// // //                 plotBorderWidth: 1,\n// // //                 events: {\n// // //                   load: function () {\n// // //                     this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n// // //                   },\n// // //                 },\n// // //                 boost: {\n// // //                   useGPUTranslations: true,\n// // //                   usePreAllocated: true,\n// // //                 },\n// // //               },\n// // //               title: {\n// // //                 text: \"\",\n// // //                 style: {\n// // //                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// // //                   fontSize: \"22px\",\n// // //                   fontWeight: \"bold\",\n// // //                 },\n// // //               },\n// // //               xAxis: {\n// // //                 type: \"datetime\",\n// // //                 title: {\n// // //                   text: \"Date\",\n// // //                   style: {\n// // //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //                     fontSize: \"14px\",\n// // //                     fontWeight: \"bold\",\n// // //                   },\n// // //                 },\n// // //                 lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// // //                 tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// // //                 labels: {\n// // //                   style: {\n// // //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //                     fontSize: \"12px\",\n// // //                   },\n// // //                 },\n// // //               },\n// // //               yAxis: {\n// // //                 title: {\n// // //                   text: \"Notional (USD)\",\n// // //                   style: {\n// // //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //                     fontSize: \"14px\",\n// // //                     fontWeight: \"bold\",\n// // //                   },\n// // //                 },\n// // //                 gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// // //                 labels: {\n// // //                   style: {\n// // //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //                     fontSize: \"12px\",\n// // //                   },\n// // //                 },\n// // //               },\n// // //               legend: {\n// // //                 layout: \"horizontal\",\n// // //                 align: \"center\",\n// // //                 verticalAlign: \"bottom\",\n// // //                 itemStyle: {\n// // //                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// // //                   fontSize: \"14px\",\n// // //                   fontWeight: \"bold\",\n// // //                 },\n// // //                 itemHoverStyle: {\n// // //                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //                 },\n// // //                 itemHiddenStyle: {\n// // //                   color: isDarkMode ? \"#666666\" : \"#999999\",\n// // //                 },\n// // //               },\n// // //               tooltip: {\n// // //                 shared: true,\n// // //                 backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n// // //                 borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n// // //                 style: {\n// // //                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// // //                 },\n// // //                 formatter: function () {\n// // //                   const points = this.points;\n// // //                   let targetValue = null;\n// // //                   let totalValue = null;\n\n// // //                   points.forEach((point) => {\n// // //                     if (point.series.name === \"Target\") {\n// // //                       targetValue = point.y;\n// // //                     }\n// // //                     if (point.series.name === \"Total\") {\n// // //                       totalValue = point.y;\n// // //                     }\n// // //                   });\n\n// // //                   if (targetValue !== null && totalValue !== null) {\n// // //                     const difference = (totalValue - targetValue).toFixed(2);\n// // //                     const totalBreakdown = selectedCurrencies\n// // //                       .map((currency) => {\n// // //                         const point = points.find((p) => p.series.name === currency.value);\n// // //                         return point\n// // //                           ? `${currency.value}: ${point.y.toFixed(2)}`\n// // //                           : `${currency.value}: N/A`;\n// // //                       })\n// // //                       .join(\"<br>\");\n\n// // //                     let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n// // //                     summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n// // //                     summaryHTML += `Difference: ${difference}<br><br>`;\n// // //                     summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n// // //                     latestSummaryRef.current = summaryHTML;\n\n// // //                     return points.reduce((s, point) => {\n// // //                       return (\n// // //                         s +\n// // //                         `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// // //                       );\n// // //                     }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// // //                   }\n// // //                   return points.reduce((s, point) => {\n// // //                     return (\n// // //                       s +\n// // //                       `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// // //                     );\n// // //                   }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// // //                 },\n// // //               },\n// // //               series: getData(),\n// // //               navigation: {\n// // //                 buttonOptions: {\n// // //                   enabled: true,\n// // //                   theme: {\n// // //                     fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// // //                     stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n// // //                     style: {\n// // //                       color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// // //                     },\n// // //                   },\n// // //                 },\n// // //               },\n// // //               exporting: {\n// // //                 buttons: {\n// // //                   contextButton: {\n// // //                     symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //                     theme: {\n// // //                       fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// // //                     },\n// // //                   },\n// // //                 },\n// // //               },\n// // //             }}\n// // //             containerProps={{ className: \"chart-container\" }}\n// // //             updateArgs={[true, true, true]}\n// // //             ref={chartRef}\n// // //           />\n// // //           {compareWithTarget && (\n// // //             <div className=\"summary-box\">\n// // //               <h3>Summary</h3>\n// // //               <div dangerouslySetInnerHTML={{ __html: summary }} />\n// // //             </div>\n// // //           )}\n// // //           <div className=\"bottom-right-buttons\">\n// // //             <button\n// // //               onClick={() => setCompareWithTarget(!compareWithTarget)}\n// // //               className=\"toggle-button\"\n// // //             >\n// // //               {compareWithTarget ? \"Disable Compare with Target\" : \"Enable Compare with Target\"}\n// // //             </button>\n// // //             <div className=\"download-section\">\n// // //               <button className=\"toggle-button\">Download</button>\n// // //               <div className=\"dropdown-content\">\n// // //                 <button\n// // //                   onClick={() =>\n// // //                     chartRef.current.chart.exportChart({ type: \"image/png\" })\n// // //                   }\n// // //                 >\n// // //                   PNG\n// // //                 </button>\n// // //                 <button\n// // //                   onClick={() =>\n// // //                     chartRef.current.chart.exportChart({ type: \"image/jpeg\" })\n// // //                   }\n// // //                 >\n// // //                   JPEG\n// // //                 </button>\n// // //                 <button\n// // //                   onClick={() =>\n// // //                     chartRef.current.chart.exportChart({ type: \"application/pdf\" })\n// // //                   }\n// // //                 >\n// // //                   PDF\n// // //                 </button>\n// // //                 <button\n// // //                   onClick={() =>\n// // //                     chartRef.current.chart.exportChart({ type: \"image/svg+xml\" })\n// // //                   }\n// // //                 >\n// // //                   SVG\n// // //                 </button>\n// // //               </div>\n// // //             </div>\n// // //           </div>\n// // //         </div>\n// // //       </div>\n// // //       <div className=\"data-table-section\">\n// // //         <DataTable\n// // //           title=\"LCH Notional | Summary Table\"\n// // //           columns={[\n// // //             { name: \"Date\", selector: (row) => row.Date, sortable: true },\n// // //             { name: \"Target\", selector: (row) => row.Target, sortable: true },\n// // //             ...selectedCurrencies.map((currency) => ({\n// // //               name: currency.label,\n// // //               selector: (row) => row[currency.value],\n// // //               sortable: true,\n// // //             })),\n// // //             { name: \"Total\", selector: (row) => row.Total, sortable: true },\n// // //           ]}\n// // //           data={filteredData.map((d) => {\n// // //             const rowData = {\n// // //               Date: d.Date,\n// // //               Target: d.Target,\n// // //               Total: d.Total,\n// // //             };\n// // //             selectedCurrencies.forEach((currency) => {\n// // //               rowData[currency.value] = d[currency.value];\n// // //             });\n// // //             return rowData;\n// // //           })}\n// // //           pagination\n// // //           highlightOnHover\n// // //           pointerOnHover\n// // //           customStyles={{\n// // //             header: {\n// // //               style: {\n// // //                 fontSize: '22px',\n// // //                 fontWeight: 'bold',\n// // //                 color: 'var(--text-color)',\n// // //                 backgroundColor: 'var(--control-bg-color)',\n// // //               },\n// // //             },\n// // //             rows: {\n// // //               style: {\n// // //                 fontSize: '16px',\n// // //                 color: 'var(--text-color)',\n// // //                 backgroundColor: 'var(--input-bg-color)',\n// // //                 '&:not(:last-of-type)': {\n// // //                   borderBottomStyle: 'solid',\n// // //                   borderBottomWidth: '1px',\n// // //                   borderBottomColor: 'var(--control-bg-color)',\n// // //                 },\n// // //               },\n// // //             },\n// // //             headCells: {\n// // //               style: {\n// // //                 fontSize: '18px',\n// // //                 fontWeight: 'bold',\n// // //                 color: 'var(--text-color)',\n// // //                 backgroundColor: 'var(--control-bg-color)',\n// // //               },\n// // //             },\n// // //             cells: {\n// // //               style: {\n// // //                 fontSize: '16px',\n// // //                 color: 'var(--text-color)',\n// // //                 backgroundColor: 'var(--input-bg-color)',\n// // //               },\n// // //             },\n// // //           }}\n// // //         />\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default Graph;\n\n// // import React, { useState, useEffect, useRef } from \"react\";\n// // import Highcharts from \"highcharts\";\n// // import HighchartsReact from \"highcharts-react-official\";\n// // import HighchartsBoost from \"highcharts/modules/boost\";\n// // import HighchartsExporting from \"highcharts/modules/exporting\";\n// // import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// // import HighchartsMore from \"highcharts/highcharts-more\";\n// // import DataTable from \"react-data-table-component\";\n// // import DatePicker from \"react-datepicker\";\n// // import \"react-datepicker/dist/react-datepicker.css\";\n// // import Topbar from \"./Topbar\";\n// // import Selector from \"./Selector\";\n// // import \"../Styles/Graph.css\";\n// // import Sidebar from \"./Sidebar\";\n\n// // HighchartsBoost(Highcharts);\n// // HighchartsExporting(Highcharts);\n// // HighchartsAnnotations(Highcharts);\n// // HighchartsMore(Highcharts);\n\n// // const Graph = () => {\n// //   const [compareWithTarget, setCompareWithTarget] = useState(false);\n// //   const [selectedCurrencies, setSelectedCurrencies] = useState([\n// //     { value: \"AUD\", label: \"AUD\" },\n// //     { value: \"EUR\", label: \"EUR\" },\n// //     { value: \"GBP\", label: \"GBP\" },\n// //     { value: \"JPY\", label: \"JPY\" },\n// //     { value: \"USD\", label: \"USD\" }\n// //   ]);\n// //   const [summary, setSummary] = useState(\"\");\n// //   const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n// //   const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n// //   const [data, setData] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [isDarkMode, setIsDarkMode] = useState(true);\n// //   const [showBreakdown, setShowBreakdown] = useState(false);\n// //   const latestSummaryRef = useRef(\"\");\n// //   const chartRef = useRef(null);\n\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       try {\n// //         const response = await fetch(\"http://localhost:5000/xva\");\n// //         const result = await response.json();\n// //         setData(result);\n// //         setLoading(false);\n// //       } catch (error) {\n// //         console.error(\"Error fetching data:\", error);\n// //         setLoading(false);\n// //       }\n// //     };\n// //     fetchData();\n// //   }, []);\n\n// //   const getFilteredData = () => {\n// //     return data.filter((d) => {\n// //       const date = new Date(d.Date).getTime();\n// //       return date >= startDate.getTime() && date <= endDate.getTime();\n// //     });\n// //   };\n\n// //   useEffect(() => {\n// //     if (!loading && data.length > 0) {\n// //       const updateSummary = () => {\n// //         if (summary !== latestSummaryRef.current) {\n// //           setSummary(latestSummaryRef.current);\n// //         }\n// //       };\n// //       const interval = setInterval(updateSummary, 1000);\n// //       return () => clearInterval(interval);\n// //     }\n// //   }, [loading, data, summary]);\n\n// //   const filteredData = getFilteredData();\n\n// //   const totalLine = {\n// //     name: \"Total\",\n// //     data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n// //     color: isDarkMode ? \"#007bff\" : \"#343a40\",\n// //     marker: { enabled: false },\n// //     zIndex: 1,\n// //     boostThreshold: 1,\n// //   };\n\n// //   const shadeData = {\n// //     name: \"Shaded Area\",\n// //     data: filteredData.map((d) => ({\n// //       x: new Date(d.Date).getTime(),\n// //       low: Math.min(d.Total, d.Target),\n// //       high: Math.max(d.Total, d.Target),\n// //     })),\n// //     type: \"arearange\",\n// //     lineWidth: 0,\n// //     linkedTo: \"Total\",\n// //     color: \"#2E8C39\",\n// //     fillOpacity: 0.3,\n// //     zIndex: 0,\n// //     marker: { enabled: false },\n// //     boostThreshold: 0,\n// //     boost: false,\n// //   };\n\n// //   const getData = () => {\n// //     const compareData = [\n// //       ...selectedCurrencies.map((currency) => ({\n// //         name: currency.value,\n// //         data: filteredData.map((d) => [\n// //           new Date(d.Date).getTime(),\n// //           d[currency.value],\n// //         ]),\n// //         color: getCurrencyColor(currency.value),\n// //         marker: { enabled: false },\n// //         boostThreshold: 1,\n// //       })),\n// //       totalLine,\n// //       {\n// //         name: \"Target\",\n// //         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n// //         color: \"#007bff\",\n// //         marker: { enabled: false },\n// //         zIndex: 1,\n// //         boostThreshold: 1,\n// //       },\n// //       shadeData,\n// //     ];\n// //     return compareWithTarget ? compareData : compareData.slice(0, -1);\n// //   };\n\n// //   const getCurrencyColor = (currency) => {\n// //     switch (currency) {\n// //       case \"AUD\":\n// //         return \"#FFD700\";\n// //       case \"EUR\":\n// //         return \"#FF6347\";\n// //       case \"GBP\":\n// //         return \"#4682B4\";\n// //       case \"JPY\":\n// //         return \"#32CD32\";\n// //       case \"USD\":\n// //         return \"#FFA07A\";\n// //       case \"BRL\":\n// //         return \"#9400D3\";\n// //       case \"CAD\":\n// //         return \"#00FF00\";\n// //       case \"CHF\":\n// //         return \"#FF00FF\";\n// //       case \"CLP\":\n// //         return \"#00FFFF\";\n// //       case \"CNY\":\n// //         return \"#FF4500\";\n// //       case \"CZK\":\n// //         return \"#FF1493\";\n// //       case \"DKK\":\n// //         return \"#1E90FF\";\n// //       case \"HKD\":\n// //         return \"#FF69B4\";\n// //       case \"HUF\":\n// //         return \"#8A2BE2\";\n// //       case \"INR\":\n// //         return \"#00BFFF\";\n// //       case \"KRW\":\n// //         return \"#7B68EE\";\n// //       case \"NOK\":\n// //         return \"#FFD700\";\n// //       case \"NZD\":\n// //         return \"#FF6347\";\n// //       case \"PLN\":\n// //         return \"#4682B4\";\n// //       case \"SEK\":\n// //         return \"#32CD32\";\n// //       case \"SGD\":\n// //         return \"#FFA07A\";\n// //       case \"THB\":\n// //         return \"#9400D3\";\n// //       case \"TWD\":\n// //         return \"#00FF00\";\n// //       case \"ZAR\":\n// //         return \"#FF00FF\";\n// //       default:\n// //         return \"#FF4500\";\n// //     }\n// //   };\n\n// //   const toggleTheme = () => {\n// //     setIsDarkMode(!isDarkMode);\n// //   };\n\n// //   return (\n// //     <div>\n// //         <Sidebar/>\n\n// //     <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n// //       <Topbar isDarkMode={isDarkMode} toggleTheme={toggleTheme} />\n// //       <div className=\"graph-container\">\n// //         <h2 className=\"graph-title\">LCH Notional | Time Series</h2>\n// //         <div className=\"selectors-container\">\n// //           <div className=\"currency-selector\">\n// //             <label>Select Currencies:</label>\n// //             <Selector\n// //               options={[\n// //                 { value: \"AUD\", label: \"AUD\" },\n// //                 { value: \"EUR\", label: \"EUR\" },\n// //                 { value: \"GBP\", label: \"GBP\" },\n// //                 { value: \"JPY\", label: \"JPY\" },\n// //                 { value: \"USD\", label: \"USD\" },\n// //                 { value: \"BRL\", label: \"BRL\" },\n// //                 { value: \"CAD\", label: \"CAD\" },\n// //                 { value: \"CHF\", label: \"CHF\" },\n// //                 { value: \"CLP\", label: \"CLP\" },\n// //                 { value: \"CNY\", label: \"CNY\" },\n// //                 { value: \"CZK\", label: \"CZK\" },\n// //                 { value: \"DKK\", label: \"DKK\" },\n// //                 { value: \"HKD\", label: \"HKD\" },\n// //                 { value: \"HUF\", label: \"HUF\" },\n// //                 { value: \"INR\", label: \"INR\" },\n// //                 { value: \"KRW\", label: \"KRW\" },\n// //                 { value: \"MXN\", label: \"MXN\" },\n// //                 { value: \"NOK\", label: \"NOK\" },\n// //                 { value: \"NZD\", label: \"NZD\" },\n// //                 { value: \"PLN\", label: \"PLN\" },\n// //                 { value: \"SEK\", label: \"SEK\" },\n// //                 { value: \"SGD\", label: \"SGD\" },\n// //                 { value: \"THB\", label: \"THB\" },\n// //                 { value: \"TWD\", label: \"TWD\" },\n// //                 { value: \"ZAR\", label: \"ZAR\" },\n// //               ]}\n// //               selectedCurrencies={selectedCurrencies}\n// //               setSelectedCurrencies={setSelectedCurrencies}\n// //             />\n// //           </div>\n// //           <div className=\"date-picker\">\n// //             <label>Select Date Range:</label>\n// //             <DatePicker\n// //               selected={startDate}\n// //               onChange={(date) => setStartDate(date)}\n// //               selectsStart\n// //               startDate={startDate}\n// //               endDate={endDate}\n// //               className=\"date-input\"\n// //             />\n// //             <DatePicker\n// //               selected={endDate}\n// //               onChange={(date) => setEndDate(date)}\n// //               selectsEnd\n// //               startDate={startDate}\n// //               endDate={endDate}\n// //               minDate={startDate}\n// //               className=\"date-input\"\n// //             />\n// //           </div>\n// //         </div>\n// //         <div className=\"main-panel\">\n// //           <HighchartsReact\n// //             className=\"chart-actual\"\n// //             highcharts={Highcharts}\n// //             options={{\n// //               chart: {\n// //                 type: \"line\",\n// //                 zoomType: \"x\",\n// //                 backgroundColor: {\n// //                   linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n// //                   stops: isDarkMode\n// //                     ? [\n// //                         [0, \"#2e2e2e\"],\n// //                         [1, \"#1a1a1a\"],\n// //                       ]\n// //                     : [\n// //                         [0, \"#ffffff\"],\n// //                         [1, \"#f0f0f0\"],\n// //                       ],\n// //                 },\n// //                 borderRadius: 10, // Rounded corners\n// //                 style: {\n// //                   fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n// //                 },\n// //                 plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //                 plotBorderWidth: 1,\n// //                 events: {\n// //                   load: function () {\n// //                     this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n// //                   },\n// //                 },\n// //                 boost: {\n// //                   useGPUTranslations: true,\n// //                   usePreAllocated: true,\n// //                 },\n// //               },\n// //               title: {\n// //                 text: \"\",\n// //                 style: {\n// //                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //                   fontSize: \"22px\",\n// //                   fontWeight: \"bold\",\n// //                 },\n// //               },\n// //               xAxis: {\n// //                 type: \"datetime\",\n// //                 title: {\n// //                   text: \"Date\",\n// //                   style: {\n// //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                     fontSize: \"14px\",\n// //                     fontWeight: \"bold\",\n// //                   },\n// //                 },\n// //                 lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //                 tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //                 labels: {\n// //                   style: {\n// //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                     fontSize: \"12px\",\n// //                   },\n// //                 },\n// //               },\n// //               yAxis: {\n// //                 title: {\n// //                   text: \"Notional (USD)\",\n// //                   style: {\n// //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                     fontSize: \"14px\",\n// //                     fontWeight: \"bold\",\n// //                   },\n// //                 },\n// //                 gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //                 labels: {\n// //                   style: {\n// //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                     fontSize: \"12px\",\n// //                   },\n// //                 },\n// //               },\n// //               legend: {\n// //                 layout: \"horizontal\",\n// //                 align: \"center\",\n// //                 verticalAlign: \"bottom\",\n// //                 itemStyle: {\n// //                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //                   fontSize: \"14px\",\n// //                   fontWeight: \"bold\",\n// //                 },\n// //                 itemHoverStyle: {\n// //                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                 },\n// //                 itemHiddenStyle: {\n// //                   color: isDarkMode ? \"#666666\" : \"#999999\",\n// //                 },\n// //               },\n// //               tooltip: {\n// //                 shared: true,\n// //                 backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n// //                 borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n// //                 style: {\n// //                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //                 },\n// //                 formatter: function () {\n// //                   const points = this.points;\n// //                   let targetValue = null;\n// //                   let totalValue = null;\n\n// //                   points.forEach((point) => {\n// //                     if (point.series.name === \"Target\") {\n// //                       targetValue = point.y;\n// //                     }\n// //                     if (point.series.name === \"Total\") {\n// //                       totalValue = point.y;\n// //                     }\n// //                   });\n\n// //                   if (targetValue !== null && totalValue !== null) {\n// //                     const difference = (totalValue - targetValue).toFixed(2);\n// //                     const totalBreakdown = selectedCurrencies\n// //                       .map((currency) => {\n// //                         const point = points.find((p) => p.series.name === currency.value);\n// //                         return point\n// //                           ? `${currency.value}: ${point.y.toFixed(2)}`\n// //                           : `${currency.value}: N/A`;\n// //                       })\n// //                       .join(\"<br>\");\n\n// //                     let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n// //                     summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n// //                     summaryHTML += `Difference: ${difference}<br><br>`;\n// //                     summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n// //                     latestSummaryRef.current = summaryHTML;\n\n// //                     return points.reduce((s, point) => {\n// //                       return (\n// //                         s +\n// //                         `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// //                       );\n// //                     }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// //                   }\n// //                   return points.reduce((s, point) => {\n// //                     return (\n// //                       s +\n// //                       `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// //                     );\n// //                   }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// //                 },\n// //               },\n// //               series: getData(),\n// //               navigation: {\n// //                 buttonOptions: {\n// //                   enabled: true,\n// //                   theme: {\n// //                     fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// //                     stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n// //                     style: {\n// //                       color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //                     },\n// //                   },\n// //                 },\n// //               },\n// //               exporting: {\n// //                 buttons: {\n// //                   contextButton: {\n// //                     symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                     theme: {\n// //                       fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// //                     },\n// //                   },\n// //                 },\n// //               },\n// //             }}\n// //             containerProps={{ className: \"chart-container\" }}\n// //             updateArgs={[true, true, true]}\n// //             ref={chartRef}\n// //           />\n// //           {compareWithTarget && (\n// //             <div className=\"summary-box\">\n// //               <div className=\"summary-content\">\n// //                 <span>Total: {parseFloat(summary.split('Total: ')[1]?.split('<br>')[0])}</span>\n// //                 <span>Target: {parseFloat(summary.split('Target: ')[1]?.split('<br>')[0])}</span>\n// //                 <span>Difference: {parseFloat(summary.split('Difference: ')[1]?.split('<br>')[0])}</span>\n// //                 <span\n// //                   className=\"dropdown-arrow\"\n// //                   onClick={() => setShowBreakdown(!showBreakdown)}\n// //                   title=\"Show currency breakdown\"\n// //                 >\n// //                   &#9660;\n// //                 </span>\n// //               </div>\n// //               {showBreakdown && (\n// //                 <div className=\"currency-breakdown\">\n// //                   <div dangerouslySetInnerHTML={{ __html: summary.split('<br><br>')[1] }} />\n// //                 </div>\n// //               )}\n// //             </div>\n// //           )}\n// //           <div className=\"bottom-right-buttons\">\n// //             <button\n// //               onClick={() => setCompareWithTarget(!compareWithTarget)}\n// //               className=\"toggle-button\"\n// //             >\n// //               {compareWithTarget ? \"Disable Compare with Target\" : \"Enable Compare with Target\"}\n// //             </button>\n// //             <div className=\"download-section\">\n// //               <button className=\"toggle-button\">Download</button>\n// //               <div className=\"dropdown-content\">\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"image/png\" })\n// //                   }\n// //                 >\n// //                   PNG\n// //                 </button>\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"image/jpeg\" })\n// //                   }\n// //                 >\n// //                   JPEG\n// //                 </button>\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"application/pdf\" })\n// //                   }\n// //                 >\n// //                   PDF\n// //                 </button>\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"image/svg+xml\" })\n// //                   }\n// //                 >\n// //                   SVG\n// //                 </button>\n// //               </div>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       </div>\n// //       <div className=\"data-table-section\">\n// //         <DataTable\n// //           title=\"LCH Notional | Summary Table\"\n// //           columns={[\n// //             { name: \"Date\", selector: (row) => row.Date, sortable: true },\n// //             { name: \"Target\", selector: (row) => row.Target, sortable: true },\n// //             ...selectedCurrencies.map((currency) => ({\n// //               name: currency.label,\n// //               selector: (row) => row[currency.value],\n// //               sortable: true,\n// //             })),\n// //             { name: \"Total\", selector: (row) => row.Total, sortable: true },\n// //           ]}\n// //           data={filteredData.map((d) => {\n// //             const rowData = {\n// //               Date: d.Date,\n// //               Target: d.Target,\n// //               Total: d.Total,\n// //             };\n// //             selectedCurrencies.forEach((currency) => {\n// //               rowData[currency.value] = d[currency.value];\n// //             });\n// //             return rowData;\n// //           })}\n// //           pagination\n// //           highlightOnHover\n// //           pointerOnHover\n// //           customStyles={{\n// //             header: {\n// //               style: {\n// //                 fontSize: '22px',\n// //                 fontWeight: 'bold',\n// //                 color: 'var(--text-color)',\n// //                 backgroundColor: 'var(--control-bg-color)',\n// //               },\n// //             },\n// //             rows: {\n// //               style: {\n// //                 fontSize: '16px',\n// //                 color: 'var(--text-color)',\n// //                 backgroundColor: 'var(--input-bg-color)',\n// //                 '&:not(:last-of-type)': {\n// //                   borderBottomStyle: 'solid',\n// //                   borderBottomWidth: '1px',\n// //                   borderBottomColor: 'var(--control-bg-color)',\n// //                 },\n// //               },\n// //             },\n// //             headCells: {\n// //               style: {\n// //                 fontSize: '18px',\n// //                 fontWeight: 'bold',\n// //                 color: 'var(--text-color)',\n// //                 backgroundColor: 'var(--control-bg-color)',\n// //               },\n// //             },\n// //             cells: {\n// //               style: {\n// //                 fontSize: '16px',\n// //                 color: 'var(--text-color)',\n// //                 backgroundColor: 'var(--input-bg-color)',\n// //               },\n// //             },\n// //           }}\n// //         />\n// //       </div>\n// //     </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default Graph;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import Highcharts from \"highcharts\";\n// import HighchartsReact from \"highcharts-react-official\";\n// import HighchartsBoost from \"highcharts/modules/boost\";\n// import HighchartsExporting from \"highcharts/modules/exporting\";\n// import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// import HighchartsMore from \"highcharts/highcharts-more\";\n// import DataTable from \"react-data-table-component\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import Topbar from \"./Topbar\";\n// import Selector from \"./Selector\";\n// import Sidebar from \"./Sidebar\"; // Import the Sidebar component\n// import \"../Styles/Graph.css\";\n\n// HighchartsBoost(Highcharts);\n// HighchartsExporting(Highcharts);\n// HighchartsAnnotations(Highcharts);\n// HighchartsMore(Highcharts);\n\n// const Graph = () => {\n//     const [compareWithTarget, setCompareWithTarget] = useState(false);\n//     const [selectedCurrencies, setSelectedCurrencies] = useState([\n//         { value: \"AUD\", label: \"AUD\" },\n//         { value: \"EUR\", label: \"EUR\" },\n//         { value: \"GBP\", label: \"GBP\" },\n//         { value: \"JPY\", label: \"JPY\" },\n//         { value: \"USD\", label: \"USD\" }\n//     ]);\n//     const [summary, setSummary] = useState(\"\");\n//     const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n//     const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n//     const [data, setData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [isDarkMode, setIsDarkMode] = useState(true);\n//     const [sidebarOpen, setSidebarOpen] = useState(false); // Sidebar state\n//     const latestSummaryRef = useRef(\"\");\n//     const chartRef = useRef(null);\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 const response = await fetch(\"http://localhost:5000/xva\");\n//                 const result = await response.json();\n//                 setData(result);\n//                 setLoading(false);\n//             } catch (error) {\n//                 console.error(\"Error fetching data:\", error);\n//                 setLoading(false);\n//             }\n//         };\n//         fetchData();\n//     }, []);\n\n//     const getFilteredData = () => {\n//         return data.filter((d) => {\n//             const date = new Date(d.Date).getTime();\n//             return date >= startDate.getTime() && date <= endDate.getTime();\n//         });\n//     };\n\n//     useEffect(() => {\n//         if (!loading && data.length > 0) {\n//             const updateSummary = () => {\n//                 if (summary !== latestSummaryRef.current) {\n//                     setSummary(latestSummaryRef.current);\n//                 }\n//             };\n//             const interval = setInterval(updateSummary, 1000);\n//             return () => clearInterval(interval);\n//         }\n//     }, [loading, data, summary]);\n\n//     const filteredData = getFilteredData();\n\n//     const totalLine = {\n//         name: \"Total\",\n//         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n//         color: isDarkMode ? \"#007bff\" : \"#343a40\",\n//         marker: { enabled: false },\n//         zIndex: 1,\n//         boostThreshold: 1,\n//     };\n\n//     const shadeData = {\n//         name: \"Shaded Area\",\n//         data: filteredData.map((d) => ({\n//             x: new Date(d.Date).getTime(),\n//             low: Math.min(d.Total, d.Target),\n//             high: Math.max(d.Total, d.Target),\n//         })),\n//         type: \"arearange\",\n//         lineWidth: 0,\n//         linkedTo: \"Total\",\n//         color: \"#2E8C39\",\n//         fillOpacity: 0.3,\n//         zIndex: 0,\n//         marker: { enabled: false },\n//         boostThreshold: 0,\n//         boost: false,\n//     };\n\n//     const getData = () => {\n//         const compareData = [\n//             ...selectedCurrencies.map((currency) => ({\n//                 name: currency.value,\n//                 data: filteredData.map((d) => [\n//                     new Date(d.Date).getTime(),\n//                     d[currency.value],\n//                 ]),\n//                 color: getCurrencyColor(currency.value),\n//                 marker: { enabled: false },\n//                 boostThreshold: 1,\n//             })),\n//             totalLine,\n//             {\n//                 name: \"Target\",\n//                 data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n//                 color: \"#007bff\",\n//                 marker: { enabled: false },\n//                 zIndex: 1,\n//                 boostThreshold: 1,\n//             },\n//             shadeData,\n//         ];\n//         return compareWithTarget ? compareData : compareData.slice(0, -1);\n//     };\n\n//     const getCurrencyColor = (currency) => {\n//         switch (currency) {\n//             case \"AUD\":\n//                 return \"#FFD700\";\n//             case \"EUR\":\n//                 return \"#FF6347\";\n//             case \"GBP\":\n//                 return \"#4682B4\";\n//             case \"JPY\":\n//                 return \"#32CD32\";\n//             case \"USD\":\n//                 return \"#FFA07A\";\n//             case \"BRL\":\n//                 return \"#9400D3\";\n//             case \"CAD\":\n//                 return \"#00FF00\";\n//             case \"CHF\":\n//                 return \"#FF00FF\";\n//             case \"CLP\":\n//                 return \"#00FFFF\";\n//             case \"CNY\":\n//                 return \"#FF4500\";\n//             case \"CZK\":\n//                 return \"#FF1493\";\n//             case \"DKK\":\n//                 return \"#1E90FF\";\n//             case \"HKD\":\n//                 return \"#FF69B4\";\n//             case \"HUF\":\n//                 return \"#8A2BE2\";\n//             case \"INR\":\n//                 return \"#00BFFF\";\n//             case \"KRW\":\n//                 return \"#7B68EE\";\n//             case \"NOK\":\n//                 return \"#FFD700\";\n//             case \"NZD\":\n//                 return \"#FF6347\";\n//             case \"PLN\":\n//                 return \"#4682B4\";\n//             case \"SEK\":\n//                 return \"#32CD32\";\n//             case \"SGD\":\n//                 return \"#FFA07A\";\n//             case \"THB\":\n//                 return \"#9400D3\";\n//             case \"TWD\":\n//                 return \"#00FF00\";\n//             case \"ZAR\":\n//                 return \"#FF00FF\";\n//             default:\n//                 return \"#FF4500\";\n//         }\n//     };\n\n//     const toggleTheme = () => {\n//         setIsDarkMode(!isDarkMode);\n//     };\n\n//     const toggleSidebar = () => {\n//         setSidebarOpen(!sidebarOpen);\n//     };\n\n//     return (\n//         <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n//             <Topbar toggleSidebar={toggleSidebar} isDarkMode={isDarkMode} toggleTheme={toggleTheme} />\n//             <Sidebar isOpen={sidebarOpen} toggleSidebar={toggleSidebar} />\n//             <div className=\"graph-container\">\n//                 <h2 className=\"graph-title\">LCH Notional | Time Series</h2>\n//                 <div className=\"selectors-container\">\n//                     <div className=\"currency-selector\">\n//                         <label>Select Currencies:</label>\n//                         <Selector\n//                             options={[\n//                                 { value: \"AUD\", label: \"AUD\" },\n//                                 { value: \"EUR\", label: \"EUR\" },\n//                                 { value: \"GBP\", label: \"GBP\" },\n//                                 { value: \"JPY\", label: \"JPY\" },\n//                                 { value: \"USD\", label: \"USD\" },\n//                                 { value: \"BRL\", label: \"BRL\" },\n//                                 { value: \"CAD\", label: \"CAD\" },\n//                                 { value: \"CHF\", label: \"CHF\" },\n//                                 { value: \"CLP\", label: \"CLP\" },\n//                                 { value: \"CNY\", label: \"CNY\" },\n//                                 { value: \"CZK\", label: \"CZK\" },\n//                                 { value: \"DKK\", label: \"DKK\" },\n//                                 { value: \"HKD\", label: \"HKD\" },\n//                                 { value: \"HUF\", label: \"HUF\" },\n//                                 { value: \"INR\", label: \"INR\" },\n//                                 { value: \"KRW\", label: \"KRW\" },\n//                                 { value: \"MXN\", label: \"MXN\" },\n//                                 { value: \"NOK\", label: \"NOK\" },\n//                                 { value: \"NZD\", label: \"NZD\" },\n//                                 { value: \"PLN\", label: \"PLN\" },\n//                                 { value: \"SEK\", label: \"SEK\" },\n//                                 { value: \"SGD\", label: \"SGD\" },\n//                                 { value: \"THB\", label: \"THB\" },\n//                                 { value: \"TWD\", label: \"TWD\" },\n//                                 { value: \"ZAR\", label: \"ZAR\" },\n//                             ]}\n//                             selectedCurrencies={selectedCurrencies}\n//                             setSelectedCurrencies={setSelectedCurrencies}\n//                         />\n//                     </div>\n//                     <div className=\"date-picker\">\n//                         <label>Select Date Range:</label>\n//                         <DatePicker\n//                             selected={startDate}\n//                             onChange={(date) => setStartDate(date)}\n//                             selectsStart\n//                             startDate={startDate}\n//                             endDate={endDate}\n//                             className=\"date-input\"\n//                         />\n//                         <DatePicker\n//                             selected={endDate}\n//                             onChange={(date) => setEndDate(date)}\n//                             selectsEnd\n//                             startDate={startDate}\n//                             endDate={endDate}\n//                             minDate={startDate}\n//                             className=\"date-input\"\n//                         />\n//                     </div>\n//                 </div>\n//                 <div className=\"main-panel\">\n//                     <HighchartsReact\n//                         className=\"chart-actual\"\n//                         highcharts={Highcharts}\n//                         options={{\n//                             chart: {\n//                                 type: \"line\",\n//                                 zoomType: \"x\",\n//                                 backgroundColor: {\n//                                     linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n//                                     stops: isDarkMode\n//                                         ? [\n//                                             [0, \"#2e2e2e\"],\n//                                             [1, \"#1a1a1a\"],\n//                                         ]\n//                                         : [\n//                                             [0, \"#ffffff\"],\n//                                             [1, \"#f0f0f0\"],\n//                                         ],\n//                                 },\n//                                 borderRadius: 10, // Rounded corners\n//                                 style: {\n//                                     fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n//                                 },\n//                                 plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                                 plotBorderWidth: 1,\n//                                 events: {\n//                                     load: function () {\n//                                         this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n//                                     },\n//                                 },\n//                                 boost: {\n//                                     useGPUTranslations: true,\n//                                     usePreAllocated: true,\n//                                 },\n//                             },\n//                             title: {\n//                                 text: \"\",\n//                                 style: {\n//                                     color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                                     fontSize: \"22px\",\n//                                     fontWeight: \"bold\",\n//                                 },\n//                             },\n//                             xAxis: {\n//                                 type: \"datetime\",\n//                                 title: {\n//                                     text: \"Date\",\n//                                     style: {\n//                                         color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                                         fontSize: \"14px\",\n//                                         fontWeight: \"bold\",\n//                                     },\n//                                 },\n//                                 lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                                 tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                                 labels: {\n//                                     style: {\n//                                         color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                                         fontSize: \"12px\",\n//                                     },\n//                                 },\n//                             },\n//                             yAxis: {\n//                                 title: {\n//                                     text: \"Notional (USD)\",\n//                                     style: {\n//                                         color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                                         fontSize: \"14px\",\n//                                         fontWeight: \"bold\",\n//                                     },\n//                                 },\n//                                 gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                                 labels: {\n//                                     style: {\n//                                         color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                                         fontSize: \"12px\",\n//                                     },\n//                                 },\n//                             },\n//                             legend: {\n//                                 layout: \"horizontal\",\n//                                 align: \"center\",\n//                                 verticalAlign: \"bottom\",\n//                                 itemStyle: {\n//                                     color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                                     fontSize: \"14px\",\n//                                     fontWeight: \"bold\",\n//                                 },\n//                                 itemHoverStyle: {\n//                                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                                 },\n//                                 itemHiddenStyle: {\n//                                     color: isDarkMode ? \"#666666\" : \"#999999\",\n//                                 },\n//                             },\n//                             tooltip: {\n//                                 shared: true,\n//                                 backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n//                                 borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n//                                 style: {\n//                                     color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                                 },\n//                                 formatter: function () {\n//                                     const points = this.points;\n//                                     let targetValue = null;\n//                                     let totalValue = null;\n\n//                                     points.forEach((point) => {\n//                                         if (point.series.name === \"Target\") {\n//                                             targetValue = point.y;\n//                                         }\n//                                         if (point.series.name === \"Total\") {\n//                                             totalValue = point.y;\n//                                         }\n//                                     });\n\n//                                     if (targetValue !== null && totalValue !== null) {\n//                                         const difference = (totalValue - targetValue).toFixed(2);\n//                                         const totalBreakdown = selectedCurrencies\n//                                             .map((currency) => {\n//                                                 const point = points.find((p) => p.series.name === currency.value);\n//                                                 return point\n//                                                     ? `${currency.value}: ${point.y.toFixed(2)}`\n//                                                     : `${currency.value}: N/A`;\n//                                             })\n//                                             .join(\"<br>\");\n\n//                                         let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n//                                         summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n//                                         summaryHTML += `Difference: ${difference}<br><br>`;\n//                                         summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n//                                         latestSummaryRef.current = summaryHTML;\n\n//                                         return points.reduce((s, point) => {\n//                                             return (\n//                                                 s +\n//                                                 `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//                                             );\n//                                         }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n//                                     }\n//                                     return points.reduce((s, point) => {\n//                                         return (\n//                                             s +\n//                                             `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//                                         );\n//                                     }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n//                                 },\n//                             },\n//                             series: getData(),\n//                             navigation: {\n//                                 buttonOptions: {\n//                                     enabled: true,\n//                                     theme: {\n//                                         fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//                                         stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n//                                         style: {\n//                                             color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                                         },\n//                                     },\n//                                 },\n//                             },\n//                             exporting: {\n//                                 buttons: {\n//                                     contextButton: {\n//                                         symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                                         theme: {\n//                                             fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//                                         },\n//                                     },\n//                                 },\n//                             },\n//                         }}\n//                         containerProps={{ className: \"chart-container\" }}\n//                         updateArgs={[true, true, true]}\n//                         ref={chartRef}\n//                     />\n//                     {compareWithTarget && (\n//                         <div className=\"summary-box\">\n//                             <div className=\"summary-content\">\n//                                 <span>Total: {summary.total}</span>\n//                                 <span>Target: {summary.target}</span>\n//                                 <span>Difference: {summary.difference}</span>\n//                                 <div className=\"summary-dropdown\">\n//                                     <span className=\"dropdown-arrow\">▼</span>\n//                                     <div className=\"currency-breakdown\">\n//                                         {summary.currencyBreakdown}\n//                                     </div>\n//                                 </div>\n//                             </div>\n//                         </div>\n//                     )}\n//                     <div className=\"bottom-right-buttons\">\n//                         <button\n//                             onClick={() => setCompareWithTarget(!compareWithTarget)}\n//                             className=\"toggle-button\"\n//                         >\n//                             {compareWithTarget ? \"Disable Compare with Target\" : \"Enable Compare with Target\"}\n//                         </button>\n//                         <div className=\"download-section\">\n//                             <button className=\"toggle-button\">Download</button>\n//                             <div className=\"dropdown-content\">\n//                                 <button\n//                                     onClick={() =>\n//                                         chartRef.current.chart.exportChart({ type: \"image/png\" })\n//                                     }\n//                                 >\n//                                     PNG\n//                                 </button>\n//                                 <button\n//                                     onClick={() =>\n//                                         chartRef.current.chart.exportChart({ type: \"image/jpeg\" })\n//                                     }\n//                                 >\n//                                     JPEG\n//                                 </button>\n//                                 <button\n//                                     onClick={() =>\n//                                         chartRef.current.chart.exportChart({ type: \"application/pdf\" })\n//                                     }\n//                                 >\n//                                     PDF\n//                                 </button>\n//                                 <button\n//                                     onClick={() =>\n//                                         chartRef.current.chart.exportChart({ type: \"image/svg+xml\" })\n//                                     }\n//                                 >\n//                                     SVG\n//                                 </button>\n//                             </div>\n//                         </div>\n//                     </div>\n//                 </div>\n//             </div>\n//             <div className=\"data-table-section\">\n//                 <DataTable\n//                     title=\"LCH Notional | Summary Table\"\n//                     columns={[\n//                         { name: \"Date\", selector: (row) => row.Date, sortable: true },\n//                         { name: \"Target\", selector: (row) => row.Target, sortable: true },\n//                         ...selectedCurrencies.map((currency) => ({\n//                             name: currency.label,\n//                             selector: (row) => row[currency.value],\n//                             sortable: true,\n//                         })),\n//                         { name: \"Total\", selector: (row) => row.Total, sortable: true },\n//                     ]}\n//                     data={filteredData.map((d) => {\n//                         const rowData = {\n//                             Date: d.Date,\n//                             Target: d.Target,\n//                             Total: d.Total,\n//                         };\n//                         selectedCurrencies.forEach((currency) => {\n//                             rowData[currency.value] = d[currency.value];\n//                         });\n//                         return rowData;\n//                     })}\n//                     pagination\n//                     highlightOnHover\n//                     pointerOnHover\n//                     customStyles={{\n//                         header: {\n//                             style: {\n//                                 fontSize: '22px',\n//                                 fontWeight: 'bold',\n//                                 color: 'var(--text-color)',\n//                                 backgroundColor: 'var(--control-bg-color)',\n//                             },\n//                         },\n//                         rows: {\n//                             style: {\n//                                 fontSize: '16px',\n//                                 color: 'var(--text-color)',\n//                                 backgroundColor: 'var(--input-bg-color)',\n//                                 '&:not(:last-of-type)': {\n//                                     borderBottomStyle: 'solid',\n//                                     borderBottomWidth: '1px',\n//                                     borderBottomColor: 'var(--control-bg-color)',\n//                                 },\n//                             },\n//                         },\n//                         headCells: {\n//                             style: {\n//                                 fontSize: '18px',\n//                                 fontWeight: 'bold',\n//                                 color: 'var(--text-color)',\n//                                 backgroundColor: 'var(--control-bg-color)',\n//                             },\n//                         },\n//                         cells: {\n//                             style: {\n//                                 fontSize: '16px',\n//                                 color: 'var(--text-color)',\n//                                 backgroundColor: 'var(--input-bg-color)',\n//                             },\n//                         },\n//                     }}\n//                 />\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Graph;\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport HighchartsBoost from \"highcharts/modules/boost\";\nimport HighchartsExporting from \"highcharts/modules/exporting\";\nimport HighchartsAnnotations from \"highcharts/modules/annotations\";\nimport HighchartsMore from \"highcharts/highcharts-more\";\nimport DataTable from \"react-data-table-component\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Topbar from \"./Topbar\";\nimport Selector from \"./Selector\";\nimport \"../Styles/Graph.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nHighchartsBoost(Highcharts);\nHighchartsExporting(Highcharts);\nHighchartsAnnotations(Highcharts);\nHighchartsMore(Highcharts);\nconst Graph = () => {\n  _s();\n  const [compareWithTarget, setCompareWithTarget] = useState(false);\n  const [selectedCurrencies, setSelectedCurrencies] = useState([{\n    value: \"AUD\",\n    label: \"AUD\"\n  }, {\n    value: \"EUR\",\n    label: \"EUR\"\n  }, {\n    value: \"GBP\",\n    label: \"GBP\"\n  }, {\n    value: \"JPY\",\n    label: \"JPY\"\n  }, {\n    value: \"USD\",\n    label: \"USD\"\n  }]);\n  const [summary, setSummary] = useState(\"\");\n  const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n  const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const latestSummaryRef = useRef(\"\");\n  const chartRef = useRef(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/xva\");\n        const result = await response.json();\n        setData(result);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  const getFilteredData = () => {\n    return data.filter(d => {\n      const date = new Date(d.Date).getTime();\n      return date >= startDate.getTime() && date <= endDate.getTime();\n    });\n  };\n  useEffect(() => {\n    if (!loading && data.length > 0) {\n      const updateSummary = () => {\n        if (summary !== latestSummaryRef.current) {\n          setSummary(latestSummaryRef.current);\n        }\n      };\n      const interval = setInterval(updateSummary, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [loading, data, summary]);\n  const filteredData = getFilteredData();\n  const totalLine = {\n    name: \"Total\",\n    data: filteredData.map(d => [new Date(d.Date).getTime(), d.Total]),\n    color: isDarkMode ? \"#007bff\" : \"#343a40\",\n    marker: {\n      enabled: false\n    },\n    zIndex: 1,\n    boostThreshold: 1\n  };\n  const shadeData = {\n    name: \"Shaded Area\",\n    data: filteredData.map(d => ({\n      x: new Date(d.Date).getTime(),\n      low: Math.min(d.Total, d.Target),\n      high: Math.max(d.Total, d.Target)\n    })),\n    type: \"arearange\",\n    lineWidth: 0,\n    linkedTo: \"Total\",\n    color: \"#2E8C39\",\n    fillOpacity: 0.3,\n    zIndex: 0,\n    marker: {\n      enabled: false\n    },\n    boostThreshold: 0,\n    boost: false\n  };\n  const getData = () => {\n    const compareData = [...selectedCurrencies.map(currency => ({\n      name: currency.value,\n      data: filteredData.map(d => [new Date(d.Date).getTime(), d[currency.value]]),\n      color: getCurrencyColor(currency.value),\n      marker: {\n        enabled: false\n      },\n      boostThreshold: 1\n    })), totalLine, {\n      name: \"Target\",\n      data: filteredData.map(d => [new Date(d.Date).getTime(), d.Target]),\n      color: \"#007bff\",\n      marker: {\n        enabled: false\n      },\n      zIndex: 1,\n      boostThreshold: 1\n    }, shadeData];\n    return compareWithTarget ? compareData : compareData.slice(0, -1);\n  };\n  const getCurrencyColor = currency => {\n    switch (currency) {\n      case \"AUD\":\n        return \"#FFD700\";\n      case \"EUR\":\n        return \"#FF6347\";\n      case \"GBP\":\n        return \"#4682B4\";\n      case \"JPY\":\n        return \"#32CD32\";\n      case \"USD\":\n        return \"#FFA07A\";\n      case \"BRL\":\n        return \"#9400D3\";\n      case \"CAD\":\n        return \"#00FF00\";\n      case \"CHF\":\n        return \"#FF00FF\";\n      case \"CLP\":\n        return \"#00FFFF\";\n      case \"CNY\":\n        return \"#FF4500\";\n      case \"CZK\":\n        return \"#FF1493\";\n      case \"DKK\":\n        return \"#1E90FF\";\n      case \"HKD\":\n        return \"#FF69B4\";\n      case \"HUF\":\n        return \"#8A2BE2\";\n      case \"INR\":\n        return \"#00BFFF\";\n      case \"KRW\":\n        return \"#7B68EE\";\n      case \"NOK\":\n        return \"#FFD700\";\n      case \"NZD\":\n        return \"#FF6347\";\n      case \"PLN\":\n        return \"#4682B4\";\n      case \"SEK\":\n        return \"#32CD32\";\n      case \"SGD\":\n        return \"#FFA07A\";\n      case \"THB\":\n        return \"#9400D3\";\n      case \"TWD\":\n        return \"#00FF00\";\n      case \"ZAR\":\n        return \"#FF00FF\";\n      default:\n        return \"#FF4500\";\n    }\n  };\n  const formatNumber = number => {\n    return new Intl.NumberFormat('en-US', {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(number);\n  };\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`,\n    children: [/*#__PURE__*/_jsxDEV(Topbar, {\n      isDarkMode: isDarkMode,\n      toggleTheme: toggleTheme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1869,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"graph-title\",\n        children: \"LCH Notional | Time Series\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1871,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selectors-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"currency-selector\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Currencies:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1874,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Selector, {\n            options: [{\n              value: \"AUD\",\n              label: \"AUD\"\n            }, {\n              value: \"EUR\",\n              label: \"EUR\"\n            }, {\n              value: \"GBP\",\n              label: \"GBP\"\n            }, {\n              value: \"JPY\",\n              label: \"JPY\"\n            }, {\n              value: \"USD\",\n              label: \"USD\"\n            }, {\n              value: \"BRL\",\n              label: \"BRL\"\n            }, {\n              value: \"CAD\",\n              label: \"CAD\"\n            }, {\n              value: \"CHF\",\n              label: \"CHF\"\n            }, {\n              value: \"CLP\",\n              label: \"CLP\"\n            }, {\n              value: \"CNY\",\n              label: \"CNY\"\n            }, {\n              value: \"CZK\",\n              label: \"CZK\"\n            }, {\n              value: \"DKK\",\n              label: \"DKK\"\n            }, {\n              value: \"HKD\",\n              label: \"HKD\"\n            }, {\n              value: \"HUF\",\n              label: \"HUF\"\n            }, {\n              value: \"INR\",\n              label: \"INR\"\n            }, {\n              value: \"KRW\",\n              label: \"KRW\"\n            }, {\n              value: \"MXN\",\n              label: \"MXN\"\n            }, {\n              value: \"NOK\",\n              label: \"NOK\"\n            }, {\n              value: \"NZD\",\n              label: \"NZD\"\n            }, {\n              value: \"PLN\",\n              label: \"PLN\"\n            }, {\n              value: \"SEK\",\n              label: \"SEK\"\n            }, {\n              value: \"SGD\",\n              label: \"SGD\"\n            }, {\n              value: \"THB\",\n              label: \"THB\"\n            }, {\n              value: \"TWD\",\n              label: \"TWD\"\n            }, {\n              value: \"ZAR\",\n              label: \"ZAR\"\n            }],\n            selectedCurrencies: selectedCurrencies,\n            setSelectedCurrencies: setSelectedCurrencies\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1875,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1873,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"date-picker\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Select Date Range:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1908,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n            selected: startDate,\n            onChange: date => setStartDate(date),\n            selectsStart: true,\n            startDate: startDate,\n            endDate: endDate,\n            className: \"date-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1909,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n            selected: endDate,\n            onChange: date => setEndDate(date),\n            selectsEnd: true,\n            startDate: startDate,\n            endDate: endDate,\n            minDate: startDate,\n            className: \"date-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1917,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1907,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1872,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-panel\",\n        children: [/*#__PURE__*/_jsxDEV(HighchartsReact, {\n          className: \"chart-actual\",\n          highcharts: Highcharts,\n          options: {\n            chart: {\n              type: \"line\",\n              zoomType: \"x\",\n              backgroundColor: {\n                linearGradient: {\n                  x1: 0,\n                  y1: 0,\n                  x2: 1,\n                  y2: 1\n                },\n                stops: isDarkMode ? [[0, \"#2e2e2e\"], [1, \"#1a1a1a\"]] : [[0, \"#ffffff\"], [1, \"#f0f0f0\"]]\n              },\n              borderRadius: 10,\n              // Rounded corners\n              style: {\n                fontFamily: \"Helvetica, Arial, sans-serif\" // Font style for the chart\n              },\n              plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n              plotBorderWidth: 1,\n              events: {\n                load: function () {\n                  this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n                }\n              },\n              boost: {\n                useGPUTranslations: true,\n                usePreAllocated: true\n              }\n            },\n            title: {\n              text: \"\",\n              style: {\n                color: isDarkMode ? \"#ffffff\" : \"#000000\",\n                fontSize: \"22px\",\n                fontWeight: \"bold\"\n              }\n            },\n            xAxis: {\n              type: \"datetime\",\n              title: {\n                text: \"Date\",\n                style: {\n                  color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                  fontSize: \"14px\",\n                  fontWeight: \"bold\"\n                }\n              },\n              lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n              tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n              labels: {\n                style: {\n                  color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                  fontSize: \"12px\"\n                }\n              }\n            },\n            yAxis: {\n              title: {\n                text: \"Notional (USD)\",\n                style: {\n                  color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                  fontSize: \"14px\",\n                  fontWeight: \"bold\"\n                }\n              },\n              gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n              labels: {\n                style: {\n                  color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                  fontSize: \"12px\"\n                }\n              }\n            },\n            legend: {\n              layout: \"horizontal\",\n              align: \"center\",\n              verticalAlign: \"bottom\",\n              itemStyle: {\n                color: isDarkMode ? \"#ffffff\" : \"#000000\",\n                fontSize: \"14px\",\n                fontWeight: \"bold\"\n              },\n              itemHoverStyle: {\n                color: isDarkMode ? \"#cccccc\" : \"#000000\"\n              },\n              itemHiddenStyle: {\n                color: isDarkMode ? \"#666666\" : \"#999999\"\n              }\n            },\n            tooltip: {\n              shared: true,\n              backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n              borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n              style: {\n                color: isDarkMode ? \"#ffffff\" : \"#000000\"\n              },\n              formatter: function () {\n                const points = this.points;\n                let targetValue = null;\n                let totalValue = null;\n                points.forEach(point => {\n                  if (point.series.name === \"Target\") {\n                    targetValue = point.y;\n                  }\n                  if (point.series.name === \"Total\") {\n                    totalValue = point.y;\n                  }\n                });\n                if (targetValue !== null && totalValue !== null) {\n                  const difference = formatNumber(totalValue - targetValue);\n                  const totalBreakdown = selectedCurrencies.map(currency => {\n                    const point = points.find(p => p.series.name === currency.value);\n                    return point ? `${currency.value}: ${formatNumber(point.y)}` : `${currency.value}: N/A`;\n                  }).join(\"<br>\");\n                  let summaryHTML = `<strong>Total: ${formatNumber(totalValue)}</strong><br>`;\n                  summaryHTML += `<strong>Target: ${formatNumber(targetValue)}</strong><br>`;\n                  summaryHTML += `Difference: ${difference}<br><br>`;\n                  summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n                  latestSummaryRef.current = summaryHTML;\n                  return points.reduce((s, point) => {\n                    return s + `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${formatNumber(point.y)}`;\n                  }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n                }\n                return points.reduce((s, point) => {\n                  return s + `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${formatNumber(point.y)}`;\n                }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n              }\n            },\n            series: getData(),\n            navigation: {\n              buttonOptions: {\n                enabled: true,\n                theme: {\n                  fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n                  stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n                  style: {\n                    color: isDarkMode ? \"#ffffff\" : \"#000000\"\n                  }\n                }\n              }\n            },\n            exporting: {\n              buttons: {\n                contextButton: {\n                  symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n                  theme: {\n                    fill: isDarkMode ? \"#444444\" : \"#f0f0f0\"\n                  }\n                }\n              }\n            }\n          },\n          containerProps: {\n            className: \"chart-container\"\n          },\n          updateArgs: [true, true, true],\n          ref: chartRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1929,\n          columnNumber: 11\n        }, this), compareWithTarget && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"summary-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Summary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2108,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: summary\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2109,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2107,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom-right-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setCompareWithTarget(!compareWithTarget),\n            className: \"toggle-button\",\n            children: compareWithTarget ? \"Disable Compare with Target\" : \"Enable Compare with Target\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 2113,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"download-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"toggle-button\",\n              children: \"Download\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 2120,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dropdown-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => chartRef.current.chart.exportChart({\n                  type: \"image/png\"\n                }),\n                children: \"PNG\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2122,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => chartRef.current.chart.exportChart({\n                  type: \"image/jpeg\"\n                }),\n                children: \"JPEG\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2129,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => chartRef.current.chart.exportChart({\n                  type: \"application/pdf\"\n                }),\n                children: \"PDF\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2136,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => chartRef.current.chart.exportChart({\n                  type: \"image/svg+xml\"\n                }),\n                children: \"SVG\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 2143,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 2121,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 2119,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 2112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1928,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1870,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"data-table-section\",\n      children: /*#__PURE__*/_jsxDEV(DataTable, {\n        title: \"LCH Notional | Summary Table\",\n        columns: [{\n          name: \"Date\",\n          selector: row => row.Date,\n          sortable: true\n        }, {\n          name: \"Target\",\n          selector: row => formatNumber(row.Target),\n          sortable: true\n        }, ...selectedCurrencies.map(currency => ({\n          name: currency.label,\n          selector: row => formatNumber(row[currency.value]),\n          sortable: true\n        })), {\n          name: \"Total\",\n          selector: row => formatNumber(row.Total),\n          sortable: true\n        }],\n        data: filteredData.map(d => {\n          const rowData = {\n            Date: d.Date,\n            Target: d.Target,\n            Total: d.Total\n          };\n          selectedCurrencies.forEach(currency => {\n            rowData[currency.value] = d[currency.value];\n          });\n          return rowData;\n        }),\n        pagination: true,\n        highlightOnHover: true,\n        pointerOnHover: true,\n        customStyles: {\n          header: {\n            style: {\n              fontSize: '22px',\n              fontWeight: 'bold',\n              color: 'var(--text-color)',\n              backgroundColor: 'var(--control-bg-color)'\n            }\n          },\n          rows: {\n            style: {\n              fontSize: '16px',\n              color: 'var(--text-color)',\n              backgroundColor: 'var(--input-bg-color)',\n              '&:not(:last-of-type)': {\n                borderBottomStyle: 'solid',\n                borderBottomWidth: '1px',\n                borderBottomColor: 'var(--control-bg-color)'\n              }\n            }\n          },\n          headCells: {\n            style: {\n              fontSize: '18px',\n              fontWeight: 'bold',\n              color: 'var(--text-color)',\n              backgroundColor: 'var(--control-bg-color)'\n            }\n          },\n          cells: {\n            style: {\n              fontSize: '16px',\n              color: 'var(--text-color)',\n              backgroundColor: 'var(--input-bg-color)'\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 2156,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1868,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"gBkqWAJVnIPxqE0N3+Gh2rjUJfE=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Highcharts","HighchartsReact","HighchartsBoost","HighchartsExporting","HighchartsAnnotations","HighchartsMore","DataTable","DatePicker","Topbar","Selector","jsxDEV","_jsxDEV","Graph","_s","compareWithTarget","setCompareWithTarget","selectedCurrencies","setSelectedCurrencies","value","label","summary","setSummary","startDate","setStartDate","Date","endDate","setEndDate","data","setData","loading","setLoading","isDarkMode","setIsDarkMode","latestSummaryRef","chartRef","fetchData","response","fetch","result","json","error","console","getFilteredData","filter","d","date","getTime","length","updateSummary","current","interval","setInterval","clearInterval","filteredData","totalLine","name","map","Total","color","marker","enabled","zIndex","boostThreshold","shadeData","x","low","Math","min","Target","high","max","type","lineWidth","linkedTo","fillOpacity","boost","getData","compareData","currency","getCurrencyColor","slice","formatNumber","number","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","toggleTheme","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","selected","onChange","selectsStart","selectsEnd","minDate","highcharts","chart","zoomType","backgroundColor","linearGradient","x1","y1","x2","y2","stops","borderRadius","style","fontFamily","plotBorderColor","plotBorderWidth","events","load","xAxis","setExtremes","useGPUTranslations","usePreAllocated","title","text","fontSize","fontWeight","lineColor","tickColor","labels","yAxis","gridLineColor","legend","layout","align","verticalAlign","itemStyle","itemHoverStyle","itemHiddenStyle","tooltip","shared","borderColor","formatter","points","targetValue","totalValue","forEach","point","series","y","difference","totalBreakdown","find","p","join","summaryHTML","reduce","s","dateFormat","navigation","buttonOptions","theme","fill","stroke","exporting","buttons","contextButton","symbolStroke","containerProps","updateArgs","ref","dangerouslySetInnerHTML","__html","onClick","exportChart","columns","selector","row","sortable","rowData","pagination","highlightOnHover","pointerOnHover","customStyles","header","rows","borderBottomStyle","borderBottomWidth","borderBottomColor","headCells","cells","_c","$RefreshReg$"],"sources":["/Users/harshmishra/Desktop/dashboard/frontend/src/Components/Graph.jsx"],"sourcesContent":["// // // import React, { useState, useEffect, useRef } from \"react\";\n// // // import Highcharts from \"highcharts\";\n// // // import HighchartsReact from \"highcharts-react-official\";\n// // // import HighchartsBoost from \"highcharts/modules/boost\";\n// // // import HighchartsExporting from \"highcharts/modules/exporting\";\n// // // import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// // // import HighchartsMore from \"highcharts/highcharts-more\";\n// // // import DataTable from \"react-data-table-component\";\n// // // import DatePicker from \"react-datepicker\";\n// // // import \"react-datepicker/dist/react-datepicker.css\";\n// // // import Topbar from \"./Topbar\";\n// // // import Selector from \"./Selector\";\n// // // import \"../Styles/Graph.css\";\n\n// // // HighchartsBoost(Highcharts);\n// // // HighchartsExporting(Highcharts);\n// // // HighchartsAnnotations(Highcharts);\n// // // HighchartsMore(Highcharts);\n\n// // // const Graph = () => {\n// // //   const [compareWithTarget, setCompareWithTarget] = useState(false);\n// // //   const [selectedCurrencies, setSelectedCurrencies] = useState([\n// // //     { value: \"AUD\", label: \"AUD\" },\n// // //     { value: \"EUR\", label: \"EUR\" },\n// // //     { value: \"GBP\", label: \"GBP\" },\n// // //     { value: \"JPY\", label: \"JPY\" },\n// // //     { value: \"USD\", label: \"USD\" }\n// // //   ]);\n// // //   const [summary, setSummary] = useState(\"\");\n// // //   const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n// // //   const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n// // //   const [data, setData] = useState([]);\n// // //   const [loading, setLoading] = useState(true);\n// // //   const [isDarkMode, setIsDarkMode] = useState(true);\n// // //   const latestSummaryRef = useRef(\"\");\n// // //   const chartRef = useRef(null);\n\n// // //   useEffect(() => {\n// // //     const fetchData = async () => {\n// // //       try {\n// // //         const response = await fetch(\"http://localhost:5000/xva\");\n// // //         const result = await response.json();\n// // //         setData(result);\n// // //         setLoading(false);\n// // //       } catch (error) {\n// // //         console.error(\"Error fetching data:\", error);\n// // //         setLoading(false);\n// // //       }\n// // //     };\n// // //     fetchData();\n// // //   }, []);\n\n// // //   const getFilteredData = () => {\n// // //     return data.filter((d) => {\n// // //       const date = new Date(d.Date).getTime();\n// // //       return date >= startDate.getTime() && date <= endDate.getTime();\n// // //     });\n// // //   };\n\n// // //   useEffect(() => {\n// // //     if (!loading && data.length > 0) {\n// // //       const updateSummary = () => {\n// // //         if (summary !== latestSummaryRef.current) {\n// // //           setSummary(latestSummaryRef.current);\n// // //         }\n// // //       };\n// // //       const interval = setInterval(updateSummary, 1000);\n// // //       return () => clearInterval(interval);\n// // //     }\n// // //   }, [loading, data, summary]);\n\n// // //   const filteredData = getFilteredData();\n\n// // //   const totalLine = {\n// // //     name: \"Total\",\n// // //     data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n// // //     color: isDarkMode ? \"#007bff\" : \"#343a40\",\n// // //     marker: { enabled: false },\n// // //     zIndex: 1,\n// // //     boostThreshold: 1,\n// // //   };\n\n// // //   const shadeData = {\n// // //     name: \"Shaded Area\",\n// // //     data: filteredData.map((d) => ({\n// // //       x: new Date(d.Date).getTime(),\n// // //       low: Math.min(d.Total, d.Target),\n// // //       high: Math.max(d.Total, d.Target),\n// // //     })),\n// // //     type: \"arearange\",\n// // //     lineWidth: 0,\n// // //     linkedTo: \"Total\",\n// // //     color: \"#2E8C39\",\n// // //     fillOpacity: 0.3,\n// // //     zIndex: 0,\n// // //     marker: { enabled: false },\n// // //     boostThreshold: 0,\n// // //     boost: false,\n// // //   };\n\n// // //   const getData = () => {\n// // //     const compareData = [\n// // //       ...selectedCurrencies.map((currency) => ({\n// // //         name: currency.value,\n// // //         data: filteredData.map((d) => [\n// // //           new Date(d.Date).getTime(),\n// // //           d[currency.value],\n// // //         ]),\n// // //         color: getCurrencyColor(currency.value),\n// // //         marker: { enabled: false },\n// // //         boostThreshold: 1,\n// // //       })),\n// // //       totalLine,\n// // //       {\n// // //         name: \"Target\",\n// // //         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n// // //         color: \"#007bff\",\n// // //         marker: { enabled: false },\n// // //         zIndex: 1,\n// // //         boostThreshold: 1,\n// // //       },\n// // //       shadeData,\n// // //     ];\n// // //     return compareWithTarget ? compareData : compareData.slice(0, -1);\n// // //   };\n\n// // //   const getCurrencyColor = (currency) => {\n// // //     switch (currency) {\n// // //       case \"AUD\":\n// // //         return \"#FFD700\";\n// // //       case \"EUR\":\n// // //         return \"#FF6347\";\n// // //       case \"GBP\":\n// // //         return \"#4682B4\";\n// // //       case \"JPY\":\n// // //         return \"#32CD32\";\n// // //       case \"USD\":\n// // //         return \"#FFA07A\";\n// // //       case \"BRL\":\n// // //         return \"#9400D3\";\n// // //       case \"CAD\":\n// // //         return \"#00FF00\";\n// // //       case \"CHF\":\n// // //         return \"#FF00FF\";\n// // //       case \"CLP\":\n// // //         return \"#00FFFF\";\n// // //       case \"CNY\":\n// // //         return \"#FF4500\";\n// // //       case \"CZK\":\n// // //         return \"#FF1493\";\n// // //       case \"DKK\":\n// // //         return \"#1E90FF\";\n// // //       case \"HKD\":\n// // //         return \"#FF69B4\";\n// // //       case \"HUF\":\n// // //         return \"#8A2BE2\";\n// // //       case \"INR\":\n// // //         return \"#00BFFF\";\n// // //       case \"KRW\":\n// // //         return \"#7B68EE\";\n// // //       case \"NOK\":\n// // //         return \"#FFD700\";\n// // //       case \"NZD\":\n// // //         return \"#FF6347\";\n// // //       case \"PLN\":\n// // //         return \"#4682B4\";\n// // //       case \"SEK\":\n// // //         return \"#32CD32\";\n// // //       case \"SGD\":\n// // //         return \"#FFA07A\";\n// // //       case \"THB\":\n// // //         return \"#9400D3\";\n// // //       case \"TWD\":\n// // //         return \"#00FF00\";\n// // //       case \"ZAR\":\n// // //         return \"#FF00FF\";\n// // //       default:\n// // //         return \"#FF4500\";\n// // //     }\n// // //   };\n\n// // //   const toggleTheme = () => {\n// // //     setIsDarkMode(!isDarkMode);\n// // //   };\n\n// // //   return (\n// // //     <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n// // //       <Topbar isDarkMode={isDarkMode} toggleTheme={toggleTheme} />\n// // //       <div className=\"graph-container\">\n// // //         <h2 className=\"graph-title\">LCH Notional | Time Series</h2>\n// // //         <div className=\"selectors-container\">\n// // //           <div className=\"currency-selector\">\n// // //             <label>Select Currencies:</label>\n// // //             <Selector\n// // //               options={[\n// // //                 { value: \"AUD\", label: \"AUD\" },\n// // //                 { value: \"EUR\", label: \"EUR\" },\n// // //                 { value: \"GBP\", label: \"GBP\" },\n// // //                 { value: \"JPY\", label: \"JPY\" },\n// // //                 { value: \"USD\", label: \"USD\" },\n// // //                 { value: \"BRL\", label: \"BRL\" },\n// // //                 { value: \"CAD\", label: \"CAD\" },\n// // //                 { value: \"CHF\", label: \"CHF\" },\n// // //                 { value: \"CLP\", label: \"CLP\" },\n// // //                 { value: \"CNY\", label: \"CNY\" },\n// // //                 { value: \"CZK\", label: \"CZK\" },\n// // //                 { value: \"DKK\", label: \"DKK\" },\n// // //                 { value: \"HKD\", label: \"HKD\" },\n// // //                 { value: \"HUF\", label: \"HUF\" },\n// // //                 { value: \"INR\", label: \"INR\" },\n// // //                 { value: \"KRW\", label: \"KRW\" },\n// // //                 { value: \"MXN\", label: \"MXN\" },\n// // //                 { value: \"NOK\", label: \"NOK\" },\n// // //                 { value: \"NZD\", label: \"NZD\" },\n// // //                 { value: \"PLN\", label: \"PLN\" },\n// // //                 { value: \"SEK\", label: \"SEK\" },\n// // //                 { value: \"SGD\", label: \"SGD\" },\n// // //                 { value: \"THB\", label: \"THB\" },\n// // //                 { value: \"TWD\", label: \"TWD\" },\n// // //                 { value: \"ZAR\", label: \"ZAR\" },\n// // //               ]}\n// // //               selectedCurrencies={selectedCurrencies}\n// // //               setSelectedCurrencies={setSelectedCurrencies}\n// // //             />\n// // //           </div>\n// // //           <div className=\"date-picker\">\n// // //             <label>Select Date Range:</label>\n// // //             <DatePicker\n// // //               selected={startDate}\n// // //               onChange={(date) => setStartDate(date)}\n// // //               selectsStart\n// // //               startDate={startDate}\n// // //               endDate={endDate}\n// // //               className=\"date-input\"\n// // //             />\n// // //             <DatePicker\n// // //               selected={endDate}\n// // //               onChange={(date) => setEndDate(date)}\n// // //               selectsEnd\n// // //               startDate={startDate}\n// // //               endDate={endDate}\n// // //               minDate={startDate}\n// // //               className=\"date-input\"\n// // //             />\n// // //           </div>\n// // //         </div>\n// // //         <div className=\"main-panel\">\n// // //           <HighchartsReact\n// // //             className=\"chart-actual\"\n// // //             highcharts={Highcharts}\n// // //             options={{\n// // //               chart: {\n// // //                 type: \"line\",\n// // //                 zoomType: \"x\",\n// // //                 backgroundColor: {\n// // //                   linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n// // //                   stops: isDarkMode\n// // //                     ? [\n// // //                         [0, \"#2e2e2e\"],\n// // //                         [1, \"#1a1a1a\"],\n// // //                       ]\n// // //                     : [\n// // //                         [0, \"#ffffff\"],\n// // //                         [1, \"#f0f0f0\"],\n// // //                       ],\n// // //                 },\n// // //                 borderRadius: 10, // Rounded corners\n// // //                 style: {\n// // //                   fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n// // //                 },\n// // //                 plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// // //                 plotBorderWidth: 1,\n// // //                 events: {\n// // //                   load: function () {\n// // //                     this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n// // //                   },\n// // //                 },\n// // //                 boost: {\n// // //                   useGPUTranslations: true,\n// // //                   usePreAllocated: true,\n// // //                 },\n// // //               },\n// // //               title: {\n// // //                 text: \"\",\n// // //                 style: {\n// // //                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// // //                   fontSize: \"22px\",\n// // //                   fontWeight: \"bold\",\n// // //                 },\n// // //               },\n// // //               xAxis: {\n// // //                 type: \"datetime\",\n// // //                 title: {\n// // //                   text: \"Date\",\n// // //                   style: {\n// // //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //                     fontSize: \"14px\",\n// // //                     fontWeight: \"bold\",\n// // //                   },\n// // //                 },\n// // //                 lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// // //                 tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// // //                 labels: {\n// // //                   style: {\n// // //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //                     fontSize: \"12px\",\n// // //                   },\n// // //                 },\n// // //               },\n// // //               yAxis: {\n// // //                 title: {\n// // //                   text: \"Notional (USD)\",\n// // //                   style: {\n// // //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //                     fontSize: \"14px\",\n// // //                     fontWeight: \"bold\",\n// // //                   },\n// // //                 },\n// // //                 gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// // //                 labels: {\n// // //                   style: {\n// // //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //                     fontSize: \"12px\",\n// // //                   },\n// // //                 },\n// // //               },\n// // //               legend: {\n// // //                 layout: \"horizontal\",\n// // //                 align: \"center\",\n// // //                 verticalAlign: \"bottom\",\n// // //                 itemStyle: {\n// // //                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// // //                   fontSize: \"14px\",\n// // //                   fontWeight: \"bold\",\n// // //                 },\n// // //                 itemHoverStyle: {\n// // //                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //                 },\n// // //                 itemHiddenStyle: {\n// // //                   color: isDarkMode ? \"#666666\" : \"#999999\",\n// // //                 },\n// // //               },\n// // //               tooltip: {\n// // //                 shared: true,\n// // //                 backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n// // //                 borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n// // //                 style: {\n// // //                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// // //                 },\n// // //                 formatter: function () {\n// // //                   const points = this.points;\n// // //                   let targetValue = null;\n// // //                   let totalValue = null;\n\n// // //                   points.forEach((point) => {\n// // //                     if (point.series.name === \"Target\") {\n// // //                       targetValue = point.y;\n// // //                     }\n// // //                     if (point.series.name === \"Total\") {\n// // //                       totalValue = point.y;\n// // //                     }\n// // //                   });\n\n// // //                   if (targetValue !== null && totalValue !== null) {\n// // //                     const difference = (totalValue - targetValue).toFixed(2);\n// // //                     const totalBreakdown = selectedCurrencies\n// // //                       .map((currency) => {\n// // //                         const point = points.find((p) => p.series.name === currency.value);\n// // //                         return point\n// // //                           ? `${currency.value}: ${point.y.toFixed(2)}`\n// // //                           : `${currency.value}: N/A`;\n// // //                       })\n// // //                       .join(\"<br>\");\n\n// // //                     let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n// // //                     summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n// // //                     summaryHTML += `Difference: ${difference}<br><br>`;\n// // //                     summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n// // //                     latestSummaryRef.current = summaryHTML;\n\n// // //                     return points.reduce((s, point) => {\n// // //                       return (\n// // //                         s +\n// // //                         `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// // //                       );\n// // //                     }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// // //                   }\n// // //                   return points.reduce((s, point) => {\n// // //                     return (\n// // //                       s +\n// // //                       `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// // //                     );\n// // //                   }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// // //                 },\n// // //               },\n// // //               series: getData(),\n// // //               navigation: {\n// // //                 buttonOptions: {\n// // //                   enabled: true,\n// // //                   theme: {\n// // //                     fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// // //                     stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n// // //                     style: {\n// // //                       color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// // //                     },\n// // //                   },\n// // //                 },\n// // //               },\n// // //               exporting: {\n// // //                 buttons: {\n// // //                   contextButton: {\n// // //                     symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n// // //                     theme: {\n// // //                       fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// // //                     },\n// // //                   },\n// // //                 },\n// // //               },\n// // //             }}\n// // //             containerProps={{ className: \"chart-container\" }}\n// // //             updateArgs={[true, true, true]}\n// // //             ref={chartRef}\n// // //           />\n// // //           {compareWithTarget && (\n// // //             <div className=\"summary-box\">\n// // //               <h3>Summary</h3>\n// // //               <div dangerouslySetInnerHTML={{ __html: summary }} />\n// // //             </div>\n// // //           )}\n// // //           <div className=\"bottom-right-buttons\">\n// // //             <button\n// // //               onClick={() => setCompareWithTarget(!compareWithTarget)}\n// // //               className=\"toggle-button\"\n// // //             >\n// // //               {compareWithTarget ? \"Disable Compare with Target\" : \"Enable Compare with Target\"}\n// // //             </button>\n// // //             <div className=\"download-section\">\n// // //               <button className=\"toggle-button\">Download</button>\n// // //               <div className=\"dropdown-content\">\n// // //                 <button\n// // //                   onClick={() =>\n// // //                     chartRef.current.chart.exportChart({ type: \"image/png\" })\n// // //                   }\n// // //                 >\n// // //                   PNG\n// // //                 </button>\n// // //                 <button\n// // //                   onClick={() =>\n// // //                     chartRef.current.chart.exportChart({ type: \"image/jpeg\" })\n// // //                   }\n// // //                 >\n// // //                   JPEG\n// // //                 </button>\n// // //                 <button\n// // //                   onClick={() =>\n// // //                     chartRef.current.chart.exportChart({ type: \"application/pdf\" })\n// // //                   }\n// // //                 >\n// // //                   PDF\n// // //                 </button>\n// // //                 <button\n// // //                   onClick={() =>\n// // //                     chartRef.current.chart.exportChart({ type: \"image/svg+xml\" })\n// // //                   }\n// // //                 >\n// // //                   SVG\n// // //                 </button>\n// // //               </div>\n// // //             </div>\n// // //           </div>\n// // //         </div>\n// // //       </div>\n// // //       <div className=\"data-table-section\">\n// // //         <DataTable\n// // //           title=\"LCH Notional | Summary Table\"\n// // //           columns={[\n// // //             { name: \"Date\", selector: (row) => row.Date, sortable: true },\n// // //             { name: \"Target\", selector: (row) => row.Target, sortable: true },\n// // //             ...selectedCurrencies.map((currency) => ({\n// // //               name: currency.label,\n// // //               selector: (row) => row[currency.value],\n// // //               sortable: true,\n// // //             })),\n// // //             { name: \"Total\", selector: (row) => row.Total, sortable: true },\n// // //           ]}\n// // //           data={filteredData.map((d) => {\n// // //             const rowData = {\n// // //               Date: d.Date,\n// // //               Target: d.Target,\n// // //               Total: d.Total,\n// // //             };\n// // //             selectedCurrencies.forEach((currency) => {\n// // //               rowData[currency.value] = d[currency.value];\n// // //             });\n// // //             return rowData;\n// // //           })}\n// // //           pagination\n// // //           highlightOnHover\n// // //           pointerOnHover\n// // //           customStyles={{\n// // //             header: {\n// // //               style: {\n// // //                 fontSize: '22px',\n// // //                 fontWeight: 'bold',\n// // //                 color: 'var(--text-color)',\n// // //                 backgroundColor: 'var(--control-bg-color)',\n// // //               },\n// // //             },\n// // //             rows: {\n// // //               style: {\n// // //                 fontSize: '16px',\n// // //                 color: 'var(--text-color)',\n// // //                 backgroundColor: 'var(--input-bg-color)',\n// // //                 '&:not(:last-of-type)': {\n// // //                   borderBottomStyle: 'solid',\n// // //                   borderBottomWidth: '1px',\n// // //                   borderBottomColor: 'var(--control-bg-color)',\n// // //                 },\n// // //               },\n// // //             },\n// // //             headCells: {\n// // //               style: {\n// // //                 fontSize: '18px',\n// // //                 fontWeight: 'bold',\n// // //                 color: 'var(--text-color)',\n// // //                 backgroundColor: 'var(--control-bg-color)',\n// // //               },\n// // //             },\n// // //             cells: {\n// // //               style: {\n// // //                 fontSize: '16px',\n// // //                 color: 'var(--text-color)',\n// // //                 backgroundColor: 'var(--input-bg-color)',\n// // //               },\n// // //             },\n// // //           }}\n// // //         />\n// // //       </div>\n// // //     </div>\n// // //   );\n// // // };\n\n// // // export default Graph;\n\n\n// // import React, { useState, useEffect, useRef } from \"react\";\n// // import Highcharts from \"highcharts\";\n// // import HighchartsReact from \"highcharts-react-official\";\n// // import HighchartsBoost from \"highcharts/modules/boost\";\n// // import HighchartsExporting from \"highcharts/modules/exporting\";\n// // import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// // import HighchartsMore from \"highcharts/highcharts-more\";\n// // import DataTable from \"react-data-table-component\";\n// // import DatePicker from \"react-datepicker\";\n// // import \"react-datepicker/dist/react-datepicker.css\";\n// // import Topbar from \"./Topbar\";\n// // import Selector from \"./Selector\";\n// // import \"../Styles/Graph.css\";\n// // import Sidebar from \"./Sidebar\";\n\n// // HighchartsBoost(Highcharts);\n// // HighchartsExporting(Highcharts);\n// // HighchartsAnnotations(Highcharts);\n// // HighchartsMore(Highcharts);\n\n// // const Graph = () => {\n// //   const [compareWithTarget, setCompareWithTarget] = useState(false);\n// //   const [selectedCurrencies, setSelectedCurrencies] = useState([\n// //     { value: \"AUD\", label: \"AUD\" },\n// //     { value: \"EUR\", label: \"EUR\" },\n// //     { value: \"GBP\", label: \"GBP\" },\n// //     { value: \"JPY\", label: \"JPY\" },\n// //     { value: \"USD\", label: \"USD\" }\n// //   ]);\n// //   const [summary, setSummary] = useState(\"\");\n// //   const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n// //   const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n// //   const [data, setData] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [isDarkMode, setIsDarkMode] = useState(true);\n// //   const [showBreakdown, setShowBreakdown] = useState(false);\n// //   const latestSummaryRef = useRef(\"\");\n// //   const chartRef = useRef(null);\n\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       try {\n// //         const response = await fetch(\"http://localhost:5000/xva\");\n// //         const result = await response.json();\n// //         setData(result);\n// //         setLoading(false);\n// //       } catch (error) {\n// //         console.error(\"Error fetching data:\", error);\n// //         setLoading(false);\n// //       }\n// //     };\n// //     fetchData();\n// //   }, []);\n\n// //   const getFilteredData = () => {\n// //     return data.filter((d) => {\n// //       const date = new Date(d.Date).getTime();\n// //       return date >= startDate.getTime() && date <= endDate.getTime();\n// //     });\n// //   };\n\n// //   useEffect(() => {\n// //     if (!loading && data.length > 0) {\n// //       const updateSummary = () => {\n// //         if (summary !== latestSummaryRef.current) {\n// //           setSummary(latestSummaryRef.current);\n// //         }\n// //       };\n// //       const interval = setInterval(updateSummary, 1000);\n// //       return () => clearInterval(interval);\n// //     }\n// //   }, [loading, data, summary]);\n\n// //   const filteredData = getFilteredData();\n\n// //   const totalLine = {\n// //     name: \"Total\",\n// //     data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n// //     color: isDarkMode ? \"#007bff\" : \"#343a40\",\n// //     marker: { enabled: false },\n// //     zIndex: 1,\n// //     boostThreshold: 1,\n// //   };\n\n// //   const shadeData = {\n// //     name: \"Shaded Area\",\n// //     data: filteredData.map((d) => ({\n// //       x: new Date(d.Date).getTime(),\n// //       low: Math.min(d.Total, d.Target),\n// //       high: Math.max(d.Total, d.Target),\n// //     })),\n// //     type: \"arearange\",\n// //     lineWidth: 0,\n// //     linkedTo: \"Total\",\n// //     color: \"#2E8C39\",\n// //     fillOpacity: 0.3,\n// //     zIndex: 0,\n// //     marker: { enabled: false },\n// //     boostThreshold: 0,\n// //     boost: false,\n// //   };\n\n// //   const getData = () => {\n// //     const compareData = [\n// //       ...selectedCurrencies.map((currency) => ({\n// //         name: currency.value,\n// //         data: filteredData.map((d) => [\n// //           new Date(d.Date).getTime(),\n// //           d[currency.value],\n// //         ]),\n// //         color: getCurrencyColor(currency.value),\n// //         marker: { enabled: false },\n// //         boostThreshold: 1,\n// //       })),\n// //       totalLine,\n// //       {\n// //         name: \"Target\",\n// //         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n// //         color: \"#007bff\",\n// //         marker: { enabled: false },\n// //         zIndex: 1,\n// //         boostThreshold: 1,\n// //       },\n// //       shadeData,\n// //     ];\n// //     return compareWithTarget ? compareData : compareData.slice(0, -1);\n// //   };\n\n// //   const getCurrencyColor = (currency) => {\n// //     switch (currency) {\n// //       case \"AUD\":\n// //         return \"#FFD700\";\n// //       case \"EUR\":\n// //         return \"#FF6347\";\n// //       case \"GBP\":\n// //         return \"#4682B4\";\n// //       case \"JPY\":\n// //         return \"#32CD32\";\n// //       case \"USD\":\n// //         return \"#FFA07A\";\n// //       case \"BRL\":\n// //         return \"#9400D3\";\n// //       case \"CAD\":\n// //         return \"#00FF00\";\n// //       case \"CHF\":\n// //         return \"#FF00FF\";\n// //       case \"CLP\":\n// //         return \"#00FFFF\";\n// //       case \"CNY\":\n// //         return \"#FF4500\";\n// //       case \"CZK\":\n// //         return \"#FF1493\";\n// //       case \"DKK\":\n// //         return \"#1E90FF\";\n// //       case \"HKD\":\n// //         return \"#FF69B4\";\n// //       case \"HUF\":\n// //         return \"#8A2BE2\";\n// //       case \"INR\":\n// //         return \"#00BFFF\";\n// //       case \"KRW\":\n// //         return \"#7B68EE\";\n// //       case \"NOK\":\n// //         return \"#FFD700\";\n// //       case \"NZD\":\n// //         return \"#FF6347\";\n// //       case \"PLN\":\n// //         return \"#4682B4\";\n// //       case \"SEK\":\n// //         return \"#32CD32\";\n// //       case \"SGD\":\n// //         return \"#FFA07A\";\n// //       case \"THB\":\n// //         return \"#9400D3\";\n// //       case \"TWD\":\n// //         return \"#00FF00\";\n// //       case \"ZAR\":\n// //         return \"#FF00FF\";\n// //       default:\n// //         return \"#FF4500\";\n// //     }\n// //   };\n\n// //   const toggleTheme = () => {\n// //     setIsDarkMode(!isDarkMode);\n// //   };\n\n// //   return (\n// //     <div>\n// //         <Sidebar/>\n    \n// //     <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n// //       <Topbar isDarkMode={isDarkMode} toggleTheme={toggleTheme} />\n// //       <div className=\"graph-container\">\n// //         <h2 className=\"graph-title\">LCH Notional | Time Series</h2>\n// //         <div className=\"selectors-container\">\n// //           <div className=\"currency-selector\">\n// //             <label>Select Currencies:</label>\n// //             <Selector\n// //               options={[\n// //                 { value: \"AUD\", label: \"AUD\" },\n// //                 { value: \"EUR\", label: \"EUR\" },\n// //                 { value: \"GBP\", label: \"GBP\" },\n// //                 { value: \"JPY\", label: \"JPY\" },\n// //                 { value: \"USD\", label: \"USD\" },\n// //                 { value: \"BRL\", label: \"BRL\" },\n// //                 { value: \"CAD\", label: \"CAD\" },\n// //                 { value: \"CHF\", label: \"CHF\" },\n// //                 { value: \"CLP\", label: \"CLP\" },\n// //                 { value: \"CNY\", label: \"CNY\" },\n// //                 { value: \"CZK\", label: \"CZK\" },\n// //                 { value: \"DKK\", label: \"DKK\" },\n// //                 { value: \"HKD\", label: \"HKD\" },\n// //                 { value: \"HUF\", label: \"HUF\" },\n// //                 { value: \"INR\", label: \"INR\" },\n// //                 { value: \"KRW\", label: \"KRW\" },\n// //                 { value: \"MXN\", label: \"MXN\" },\n// //                 { value: \"NOK\", label: \"NOK\" },\n// //                 { value: \"NZD\", label: \"NZD\" },\n// //                 { value: \"PLN\", label: \"PLN\" },\n// //                 { value: \"SEK\", label: \"SEK\" },\n// //                 { value: \"SGD\", label: \"SGD\" },\n// //                 { value: \"THB\", label: \"THB\" },\n// //                 { value: \"TWD\", label: \"TWD\" },\n// //                 { value: \"ZAR\", label: \"ZAR\" },\n// //               ]}\n// //               selectedCurrencies={selectedCurrencies}\n// //               setSelectedCurrencies={setSelectedCurrencies}\n// //             />\n// //           </div>\n// //           <div className=\"date-picker\">\n// //             <label>Select Date Range:</label>\n// //             <DatePicker\n// //               selected={startDate}\n// //               onChange={(date) => setStartDate(date)}\n// //               selectsStart\n// //               startDate={startDate}\n// //               endDate={endDate}\n// //               className=\"date-input\"\n// //             />\n// //             <DatePicker\n// //               selected={endDate}\n// //               onChange={(date) => setEndDate(date)}\n// //               selectsEnd\n// //               startDate={startDate}\n// //               endDate={endDate}\n// //               minDate={startDate}\n// //               className=\"date-input\"\n// //             />\n// //           </div>\n// //         </div>\n// //         <div className=\"main-panel\">\n// //           <HighchartsReact\n// //             className=\"chart-actual\"\n// //             highcharts={Highcharts}\n// //             options={{\n// //               chart: {\n// //                 type: \"line\",\n// //                 zoomType: \"x\",\n// //                 backgroundColor: {\n// //                   linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n// //                   stops: isDarkMode\n// //                     ? [\n// //                         [0, \"#2e2e2e\"],\n// //                         [1, \"#1a1a1a\"],\n// //                       ]\n// //                     : [\n// //                         [0, \"#ffffff\"],\n// //                         [1, \"#f0f0f0\"],\n// //                       ],\n// //                 },\n// //                 borderRadius: 10, // Rounded corners\n// //                 style: {\n// //                   fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n// //                 },\n// //                 plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //                 plotBorderWidth: 1,\n// //                 events: {\n// //                   load: function () {\n// //                     this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n// //                   },\n// //                 },\n// //                 boost: {\n// //                   useGPUTranslations: true,\n// //                   usePreAllocated: true,\n// //                 },\n// //               },\n// //               title: {\n// //                 text: \"\",\n// //                 style: {\n// //                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //                   fontSize: \"22px\",\n// //                   fontWeight: \"bold\",\n// //                 },\n// //               },\n// //               xAxis: {\n// //                 type: \"datetime\",\n// //                 title: {\n// //                   text: \"Date\",\n// //                   style: {\n// //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                     fontSize: \"14px\",\n// //                     fontWeight: \"bold\",\n// //                   },\n// //                 },\n// //                 lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //                 tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //                 labels: {\n// //                   style: {\n// //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                     fontSize: \"12px\",\n// //                   },\n// //                 },\n// //               },\n// //               yAxis: {\n// //                 title: {\n// //                   text: \"Notional (USD)\",\n// //                   style: {\n// //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                     fontSize: \"14px\",\n// //                     fontWeight: \"bold\",\n// //                   },\n// //                 },\n// //                 gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //                 labels: {\n// //                   style: {\n// //                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                     fontSize: \"12px\",\n// //                   },\n// //                 },\n// //               },\n// //               legend: {\n// //                 layout: \"horizontal\",\n// //                 align: \"center\",\n// //                 verticalAlign: \"bottom\",\n// //                 itemStyle: {\n// //                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //                   fontSize: \"14px\",\n// //                   fontWeight: \"bold\",\n// //                 },\n// //                 itemHoverStyle: {\n// //                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                 },\n// //                 itemHiddenStyle: {\n// //                   color: isDarkMode ? \"#666666\" : \"#999999\",\n// //                 },\n// //               },\n// //               tooltip: {\n// //                 shared: true,\n// //                 backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n// //                 borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n// //                 style: {\n// //                   color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //                 },\n// //                 formatter: function () {\n// //                   const points = this.points;\n// //                   let targetValue = null;\n// //                   let totalValue = null;\n\n// //                   points.forEach((point) => {\n// //                     if (point.series.name === \"Target\") {\n// //                       targetValue = point.y;\n// //                     }\n// //                     if (point.series.name === \"Total\") {\n// //                       totalValue = point.y;\n// //                     }\n// //                   });\n\n// //                   if (targetValue !== null && totalValue !== null) {\n// //                     const difference = (totalValue - targetValue).toFixed(2);\n// //                     const totalBreakdown = selectedCurrencies\n// //                       .map((currency) => {\n// //                         const point = points.find((p) => p.series.name === currency.value);\n// //                         return point\n// //                           ? `${currency.value}: ${point.y.toFixed(2)}`\n// //                           : `${currency.value}: N/A`;\n// //                       })\n// //                       .join(\"<br>\");\n\n// //                     let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n// //                     summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n// //                     summaryHTML += `Difference: ${difference}<br><br>`;\n// //                     summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n// //                     latestSummaryRef.current = summaryHTML;\n\n// //                     return points.reduce((s, point) => {\n// //                       return (\n// //                         s +\n// //                         `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// //                       );\n// //                     }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// //                   }\n// //                   return points.reduce((s, point) => {\n// //                     return (\n// //                       s +\n// //                       `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// //                     );\n// //                   }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// //                 },\n// //               },\n// //               series: getData(),\n// //               navigation: {\n// //                 buttonOptions: {\n// //                   enabled: true,\n// //                   theme: {\n// //                     fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// //                     stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n// //                     style: {\n// //                       color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //                     },\n// //                   },\n// //                 },\n// //               },\n// //               exporting: {\n// //                 buttons: {\n// //                   contextButton: {\n// //                     symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //                     theme: {\n// //                       fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// //                     },\n// //                   },\n// //                 },\n// //               },\n// //             }}\n// //             containerProps={{ className: \"chart-container\" }}\n// //             updateArgs={[true, true, true]}\n// //             ref={chartRef}\n// //           />\n// //           {compareWithTarget && (\n// //             <div className=\"summary-box\">\n// //               <div className=\"summary-content\">\n// //                 <span>Total: {parseFloat(summary.split('Total: ')[1]?.split('<br>')[0])}</span>\n// //                 <span>Target: {parseFloat(summary.split('Target: ')[1]?.split('<br>')[0])}</span>\n// //                 <span>Difference: {parseFloat(summary.split('Difference: ')[1]?.split('<br>')[0])}</span>\n// //                 <span\n// //                   className=\"dropdown-arrow\"\n// //                   onClick={() => setShowBreakdown(!showBreakdown)}\n// //                   title=\"Show currency breakdown\"\n// //                 >\n// //                   &#9660;\n// //                 </span>\n// //               </div>\n// //               {showBreakdown && (\n// //                 <div className=\"currency-breakdown\">\n// //                   <div dangerouslySetInnerHTML={{ __html: summary.split('<br><br>')[1] }} />\n// //                 </div>\n// //               )}\n// //             </div>\n// //           )}\n// //           <div className=\"bottom-right-buttons\">\n// //             <button\n// //               onClick={() => setCompareWithTarget(!compareWithTarget)}\n// //               className=\"toggle-button\"\n// //             >\n// //               {compareWithTarget ? \"Disable Compare with Target\" : \"Enable Compare with Target\"}\n// //             </button>\n// //             <div className=\"download-section\">\n// //               <button className=\"toggle-button\">Download</button>\n// //               <div className=\"dropdown-content\">\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"image/png\" })\n// //                   }\n// //                 >\n// //                   PNG\n// //                 </button>\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"image/jpeg\" })\n// //                   }\n// //                 >\n// //                   JPEG\n// //                 </button>\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"application/pdf\" })\n// //                   }\n// //                 >\n// //                   PDF\n// //                 </button>\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"image/svg+xml\" })\n// //                   }\n// //                 >\n// //                   SVG\n// //                 </button>\n// //               </div>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       </div>\n// //       <div className=\"data-table-section\">\n// //         <DataTable\n// //           title=\"LCH Notional | Summary Table\"\n// //           columns={[\n// //             { name: \"Date\", selector: (row) => row.Date, sortable: true },\n// //             { name: \"Target\", selector: (row) => row.Target, sortable: true },\n// //             ...selectedCurrencies.map((currency) => ({\n// //               name: currency.label,\n// //               selector: (row) => row[currency.value],\n// //               sortable: true,\n// //             })),\n// //             { name: \"Total\", selector: (row) => row.Total, sortable: true },\n// //           ]}\n// //           data={filteredData.map((d) => {\n// //             const rowData = {\n// //               Date: d.Date,\n// //               Target: d.Target,\n// //               Total: d.Total,\n// //             };\n// //             selectedCurrencies.forEach((currency) => {\n// //               rowData[currency.value] = d[currency.value];\n// //             });\n// //             return rowData;\n// //           })}\n// //           pagination\n// //           highlightOnHover\n// //           pointerOnHover\n// //           customStyles={{\n// //             header: {\n// //               style: {\n// //                 fontSize: '22px',\n// //                 fontWeight: 'bold',\n// //                 color: 'var(--text-color)',\n// //                 backgroundColor: 'var(--control-bg-color)',\n// //               },\n// //             },\n// //             rows: {\n// //               style: {\n// //                 fontSize: '16px',\n// //                 color: 'var(--text-color)',\n// //                 backgroundColor: 'var(--input-bg-color)',\n// //                 '&:not(:last-of-type)': {\n// //                   borderBottomStyle: 'solid',\n// //                   borderBottomWidth: '1px',\n// //                   borderBottomColor: 'var(--control-bg-color)',\n// //                 },\n// //               },\n// //             },\n// //             headCells: {\n// //               style: {\n// //                 fontSize: '18px',\n// //                 fontWeight: 'bold',\n// //                 color: 'var(--text-color)',\n// //                 backgroundColor: 'var(--control-bg-color)',\n// //               },\n// //             },\n// //             cells: {\n// //               style: {\n// //                 fontSize: '16px',\n// //                 color: 'var(--text-color)',\n// //                 backgroundColor: 'var(--input-bg-color)',\n// //               },\n// //             },\n// //           }}\n// //         />\n// //       </div>\n// //     </div>\n// //     </div>\n// //   );\n// // };\n\n// // export default Graph;\n\n\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import Highcharts from \"highcharts\";\n// import HighchartsReact from \"highcharts-react-official\";\n// import HighchartsBoost from \"highcharts/modules/boost\";\n// import HighchartsExporting from \"highcharts/modules/exporting\";\n// import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// import HighchartsMore from \"highcharts/highcharts-more\";\n// import DataTable from \"react-data-table-component\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import Topbar from \"./Topbar\";\n// import Selector from \"./Selector\";\n// import Sidebar from \"./Sidebar\"; // Import the Sidebar component\n// import \"../Styles/Graph.css\";\n\n// HighchartsBoost(Highcharts);\n// HighchartsExporting(Highcharts);\n// HighchartsAnnotations(Highcharts);\n// HighchartsMore(Highcharts);\n\n// const Graph = () => {\n//     const [compareWithTarget, setCompareWithTarget] = useState(false);\n//     const [selectedCurrencies, setSelectedCurrencies] = useState([\n//         { value: \"AUD\", label: \"AUD\" },\n//         { value: \"EUR\", label: \"EUR\" },\n//         { value: \"GBP\", label: \"GBP\" },\n//         { value: \"JPY\", label: \"JPY\" },\n//         { value: \"USD\", label: \"USD\" }\n//     ]);\n//     const [summary, setSummary] = useState(\"\");\n//     const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n//     const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n//     const [data, setData] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [isDarkMode, setIsDarkMode] = useState(true);\n//     const [sidebarOpen, setSidebarOpen] = useState(false); // Sidebar state\n//     const latestSummaryRef = useRef(\"\");\n//     const chartRef = useRef(null);\n\n//     useEffect(() => {\n//         const fetchData = async () => {\n//             try {\n//                 const response = await fetch(\"http://localhost:5000/xva\");\n//                 const result = await response.json();\n//                 setData(result);\n//                 setLoading(false);\n//             } catch (error) {\n//                 console.error(\"Error fetching data:\", error);\n//                 setLoading(false);\n//             }\n//         };\n//         fetchData();\n//     }, []);\n\n//     const getFilteredData = () => {\n//         return data.filter((d) => {\n//             const date = new Date(d.Date).getTime();\n//             return date >= startDate.getTime() && date <= endDate.getTime();\n//         });\n//     };\n\n//     useEffect(() => {\n//         if (!loading && data.length > 0) {\n//             const updateSummary = () => {\n//                 if (summary !== latestSummaryRef.current) {\n//                     setSummary(latestSummaryRef.current);\n//                 }\n//             };\n//             const interval = setInterval(updateSummary, 1000);\n//             return () => clearInterval(interval);\n//         }\n//     }, [loading, data, summary]);\n\n//     const filteredData = getFilteredData();\n\n//     const totalLine = {\n//         name: \"Total\",\n//         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n//         color: isDarkMode ? \"#007bff\" : \"#343a40\",\n//         marker: { enabled: false },\n//         zIndex: 1,\n//         boostThreshold: 1,\n//     };\n\n//     const shadeData = {\n//         name: \"Shaded Area\",\n//         data: filteredData.map((d) => ({\n//             x: new Date(d.Date).getTime(),\n//             low: Math.min(d.Total, d.Target),\n//             high: Math.max(d.Total, d.Target),\n//         })),\n//         type: \"arearange\",\n//         lineWidth: 0,\n//         linkedTo: \"Total\",\n//         color: \"#2E8C39\",\n//         fillOpacity: 0.3,\n//         zIndex: 0,\n//         marker: { enabled: false },\n//         boostThreshold: 0,\n//         boost: false,\n//     };\n\n//     const getData = () => {\n//         const compareData = [\n//             ...selectedCurrencies.map((currency) => ({\n//                 name: currency.value,\n//                 data: filteredData.map((d) => [\n//                     new Date(d.Date).getTime(),\n//                     d[currency.value],\n//                 ]),\n//                 color: getCurrencyColor(currency.value),\n//                 marker: { enabled: false },\n//                 boostThreshold: 1,\n//             })),\n//             totalLine,\n//             {\n//                 name: \"Target\",\n//                 data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n//                 color: \"#007bff\",\n//                 marker: { enabled: false },\n//                 zIndex: 1,\n//                 boostThreshold: 1,\n//             },\n//             shadeData,\n//         ];\n//         return compareWithTarget ? compareData : compareData.slice(0, -1);\n//     };\n\n//     const getCurrencyColor = (currency) => {\n//         switch (currency) {\n//             case \"AUD\":\n//                 return \"#FFD700\";\n//             case \"EUR\":\n//                 return \"#FF6347\";\n//             case \"GBP\":\n//                 return \"#4682B4\";\n//             case \"JPY\":\n//                 return \"#32CD32\";\n//             case \"USD\":\n//                 return \"#FFA07A\";\n//             case \"BRL\":\n//                 return \"#9400D3\";\n//             case \"CAD\":\n//                 return \"#00FF00\";\n//             case \"CHF\":\n//                 return \"#FF00FF\";\n//             case \"CLP\":\n//                 return \"#00FFFF\";\n//             case \"CNY\":\n//                 return \"#FF4500\";\n//             case \"CZK\":\n//                 return \"#FF1493\";\n//             case \"DKK\":\n//                 return \"#1E90FF\";\n//             case \"HKD\":\n//                 return \"#FF69B4\";\n//             case \"HUF\":\n//                 return \"#8A2BE2\";\n//             case \"INR\":\n//                 return \"#00BFFF\";\n//             case \"KRW\":\n//                 return \"#7B68EE\";\n//             case \"NOK\":\n//                 return \"#FFD700\";\n//             case \"NZD\":\n//                 return \"#FF6347\";\n//             case \"PLN\":\n//                 return \"#4682B4\";\n//             case \"SEK\":\n//                 return \"#32CD32\";\n//             case \"SGD\":\n//                 return \"#FFA07A\";\n//             case \"THB\":\n//                 return \"#9400D3\";\n//             case \"TWD\":\n//                 return \"#00FF00\";\n//             case \"ZAR\":\n//                 return \"#FF00FF\";\n//             default:\n//                 return \"#FF4500\";\n//         }\n//     };\n\n//     const toggleTheme = () => {\n//         setIsDarkMode(!isDarkMode);\n//     };\n\n//     const toggleSidebar = () => {\n//         setSidebarOpen(!sidebarOpen);\n//     };\n\n//     return (\n//         <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n//             <Topbar toggleSidebar={toggleSidebar} isDarkMode={isDarkMode} toggleTheme={toggleTheme} />\n//             <Sidebar isOpen={sidebarOpen} toggleSidebar={toggleSidebar} />\n//             <div className=\"graph-container\">\n//                 <h2 className=\"graph-title\">LCH Notional | Time Series</h2>\n//                 <div className=\"selectors-container\">\n//                     <div className=\"currency-selector\">\n//                         <label>Select Currencies:</label>\n//                         <Selector\n//                             options={[\n//                                 { value: \"AUD\", label: \"AUD\" },\n//                                 { value: \"EUR\", label: \"EUR\" },\n//                                 { value: \"GBP\", label: \"GBP\" },\n//                                 { value: \"JPY\", label: \"JPY\" },\n//                                 { value: \"USD\", label: \"USD\" },\n//                                 { value: \"BRL\", label: \"BRL\" },\n//                                 { value: \"CAD\", label: \"CAD\" },\n//                                 { value: \"CHF\", label: \"CHF\" },\n//                                 { value: \"CLP\", label: \"CLP\" },\n//                                 { value: \"CNY\", label: \"CNY\" },\n//                                 { value: \"CZK\", label: \"CZK\" },\n//                                 { value: \"DKK\", label: \"DKK\" },\n//                                 { value: \"HKD\", label: \"HKD\" },\n//                                 { value: \"HUF\", label: \"HUF\" },\n//                                 { value: \"INR\", label: \"INR\" },\n//                                 { value: \"KRW\", label: \"KRW\" },\n//                                 { value: \"MXN\", label: \"MXN\" },\n//                                 { value: \"NOK\", label: \"NOK\" },\n//                                 { value: \"NZD\", label: \"NZD\" },\n//                                 { value: \"PLN\", label: \"PLN\" },\n//                                 { value: \"SEK\", label: \"SEK\" },\n//                                 { value: \"SGD\", label: \"SGD\" },\n//                                 { value: \"THB\", label: \"THB\" },\n//                                 { value: \"TWD\", label: \"TWD\" },\n//                                 { value: \"ZAR\", label: \"ZAR\" },\n//                             ]}\n//                             selectedCurrencies={selectedCurrencies}\n//                             setSelectedCurrencies={setSelectedCurrencies}\n//                         />\n//                     </div>\n//                     <div className=\"date-picker\">\n//                         <label>Select Date Range:</label>\n//                         <DatePicker\n//                             selected={startDate}\n//                             onChange={(date) => setStartDate(date)}\n//                             selectsStart\n//                             startDate={startDate}\n//                             endDate={endDate}\n//                             className=\"date-input\"\n//                         />\n//                         <DatePicker\n//                             selected={endDate}\n//                             onChange={(date) => setEndDate(date)}\n//                             selectsEnd\n//                             startDate={startDate}\n//                             endDate={endDate}\n//                             minDate={startDate}\n//                             className=\"date-input\"\n//                         />\n//                     </div>\n//                 </div>\n//                 <div className=\"main-panel\">\n//                     <HighchartsReact\n//                         className=\"chart-actual\"\n//                         highcharts={Highcharts}\n//                         options={{\n//                             chart: {\n//                                 type: \"line\",\n//                                 zoomType: \"x\",\n//                                 backgroundColor: {\n//                                     linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n//                                     stops: isDarkMode\n//                                         ? [\n//                                             [0, \"#2e2e2e\"],\n//                                             [1, \"#1a1a1a\"],\n//                                         ]\n//                                         : [\n//                                             [0, \"#ffffff\"],\n//                                             [1, \"#f0f0f0\"],\n//                                         ],\n//                                 },\n//                                 borderRadius: 10, // Rounded corners\n//                                 style: {\n//                                     fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n//                                 },\n//                                 plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                                 plotBorderWidth: 1,\n//                                 events: {\n//                                     load: function () {\n//                                         this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n//                                     },\n//                                 },\n//                                 boost: {\n//                                     useGPUTranslations: true,\n//                                     usePreAllocated: true,\n//                                 },\n//                             },\n//                             title: {\n//                                 text: \"\",\n//                                 style: {\n//                                     color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                                     fontSize: \"22px\",\n//                                     fontWeight: \"bold\",\n//                                 },\n//                             },\n//                             xAxis: {\n//                                 type: \"datetime\",\n//                                 title: {\n//                                     text: \"Date\",\n//                                     style: {\n//                                         color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                                         fontSize: \"14px\",\n//                                         fontWeight: \"bold\",\n//                                     },\n//                                 },\n//                                 lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                                 tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                                 labels: {\n//                                     style: {\n//                                         color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                                         fontSize: \"12px\",\n//                                     },\n//                                 },\n//                             },\n//                             yAxis: {\n//                                 title: {\n//                                     text: \"Notional (USD)\",\n//                                     style: {\n//                                         color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                                         fontSize: \"14px\",\n//                                         fontWeight: \"bold\",\n//                                     },\n//                                 },\n//                                 gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//                                 labels: {\n//                                     style: {\n//                                         color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                                         fontSize: \"12px\",\n//                                     },\n//                                 },\n//                             },\n//                             legend: {\n//                                 layout: \"horizontal\",\n//                                 align: \"center\",\n//                                 verticalAlign: \"bottom\",\n//                                 itemStyle: {\n//                                     color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                                     fontSize: \"14px\",\n//                                     fontWeight: \"bold\",\n//                                 },\n//                                 itemHoverStyle: {\n//                                     color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                                 },\n//                                 itemHiddenStyle: {\n//                                     color: isDarkMode ? \"#666666\" : \"#999999\",\n//                                 },\n//                             },\n//                             tooltip: {\n//                                 shared: true,\n//                                 backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n//                                 borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n//                                 style: {\n//                                     color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                                 },\n//                                 formatter: function () {\n//                                     const points = this.points;\n//                                     let targetValue = null;\n//                                     let totalValue = null;\n\n//                                     points.forEach((point) => {\n//                                         if (point.series.name === \"Target\") {\n//                                             targetValue = point.y;\n//                                         }\n//                                         if (point.series.name === \"Total\") {\n//                                             totalValue = point.y;\n//                                         }\n//                                     });\n\n//                                     if (targetValue !== null && totalValue !== null) {\n//                                         const difference = (totalValue - targetValue).toFixed(2);\n//                                         const totalBreakdown = selectedCurrencies\n//                                             .map((currency) => {\n//                                                 const point = points.find((p) => p.series.name === currency.value);\n//                                                 return point\n//                                                     ? `${currency.value}: ${point.y.toFixed(2)}`\n//                                                     : `${currency.value}: N/A`;\n//                                             })\n//                                             .join(\"<br>\");\n\n//                                         let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n//                                         summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n//                                         summaryHTML += `Difference: ${difference}<br><br>`;\n//                                         summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n//                                         latestSummaryRef.current = summaryHTML;\n\n//                                         return points.reduce((s, point) => {\n//                                             return (\n//                                                 s +\n//                                                 `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//                                             );\n//                                         }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n//                                     }\n//                                     return points.reduce((s, point) => {\n//                                         return (\n//                                             s +\n//                                             `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//                                         );\n//                                     }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n//                                 },\n//                             },\n//                             series: getData(),\n//                             navigation: {\n//                                 buttonOptions: {\n//                                     enabled: true,\n//                                     theme: {\n//                                         fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//                                         stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n//                                         style: {\n//                                             color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                                         },\n//                                     },\n//                                 },\n//                             },\n//                             exporting: {\n//                                 buttons: {\n//                                     contextButton: {\n//                                         symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                                         theme: {\n//                                             fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//                                         },\n//                                     },\n//                                 },\n//                             },\n//                         }}\n//                         containerProps={{ className: \"chart-container\" }}\n//                         updateArgs={[true, true, true]}\n//                         ref={chartRef}\n//                     />\n//                     {compareWithTarget && (\n//                         <div className=\"summary-box\">\n//                             <div className=\"summary-content\">\n//                                 <span>Total: {summary.total}</span>\n//                                 <span>Target: {summary.target}</span>\n//                                 <span>Difference: {summary.difference}</span>\n//                                 <div className=\"summary-dropdown\">\n//                                     <span className=\"dropdown-arrow\">▼</span>\n//                                     <div className=\"currency-breakdown\">\n//                                         {summary.currencyBreakdown}\n//                                     </div>\n//                                 </div>\n//                             </div>\n//                         </div>\n//                     )}\n//                     <div className=\"bottom-right-buttons\">\n//                         <button\n//                             onClick={() => setCompareWithTarget(!compareWithTarget)}\n//                             className=\"toggle-button\"\n//                         >\n//                             {compareWithTarget ? \"Disable Compare with Target\" : \"Enable Compare with Target\"}\n//                         </button>\n//                         <div className=\"download-section\">\n//                             <button className=\"toggle-button\">Download</button>\n//                             <div className=\"dropdown-content\">\n//                                 <button\n//                                     onClick={() =>\n//                                         chartRef.current.chart.exportChart({ type: \"image/png\" })\n//                                     }\n//                                 >\n//                                     PNG\n//                                 </button>\n//                                 <button\n//                                     onClick={() =>\n//                                         chartRef.current.chart.exportChart({ type: \"image/jpeg\" })\n//                                     }\n//                                 >\n//                                     JPEG\n//                                 </button>\n//                                 <button\n//                                     onClick={() =>\n//                                         chartRef.current.chart.exportChart({ type: \"application/pdf\" })\n//                                     }\n//                                 >\n//                                     PDF\n//                                 </button>\n//                                 <button\n//                                     onClick={() =>\n//                                         chartRef.current.chart.exportChart({ type: \"image/svg+xml\" })\n//                                     }\n//                                 >\n//                                     SVG\n//                                 </button>\n//                             </div>\n//                         </div>\n//                     </div>\n//                 </div>\n//             </div>\n//             <div className=\"data-table-section\">\n//                 <DataTable\n//                     title=\"LCH Notional | Summary Table\"\n//                     columns={[\n//                         { name: \"Date\", selector: (row) => row.Date, sortable: true },\n//                         { name: \"Target\", selector: (row) => row.Target, sortable: true },\n//                         ...selectedCurrencies.map((currency) => ({\n//                             name: currency.label,\n//                             selector: (row) => row[currency.value],\n//                             sortable: true,\n//                         })),\n//                         { name: \"Total\", selector: (row) => row.Total, sortable: true },\n//                     ]}\n//                     data={filteredData.map((d) => {\n//                         const rowData = {\n//                             Date: d.Date,\n//                             Target: d.Target,\n//                             Total: d.Total,\n//                         };\n//                         selectedCurrencies.forEach((currency) => {\n//                             rowData[currency.value] = d[currency.value];\n//                         });\n//                         return rowData;\n//                     })}\n//                     pagination\n//                     highlightOnHover\n//                     pointerOnHover\n//                     customStyles={{\n//                         header: {\n//                             style: {\n//                                 fontSize: '22px',\n//                                 fontWeight: 'bold',\n//                                 color: 'var(--text-color)',\n//                                 backgroundColor: 'var(--control-bg-color)',\n//                             },\n//                         },\n//                         rows: {\n//                             style: {\n//                                 fontSize: '16px',\n//                                 color: 'var(--text-color)',\n//                                 backgroundColor: 'var(--input-bg-color)',\n//                                 '&:not(:last-of-type)': {\n//                                     borderBottomStyle: 'solid',\n//                                     borderBottomWidth: '1px',\n//                                     borderBottomColor: 'var(--control-bg-color)',\n//                                 },\n//                             },\n//                         },\n//                         headCells: {\n//                             style: {\n//                                 fontSize: '18px',\n//                                 fontWeight: 'bold',\n//                                 color: 'var(--text-color)',\n//                                 backgroundColor: 'var(--control-bg-color)',\n//                             },\n//                         },\n//                         cells: {\n//                             style: {\n//                                 fontSize: '16px',\n//                                 color: 'var(--text-color)',\n//                                 backgroundColor: 'var(--input-bg-color)',\n//                             },\n//                         },\n//                     }}\n//                 />\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Graph;\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport HighchartsBoost from \"highcharts/modules/boost\";\nimport HighchartsExporting from \"highcharts/modules/exporting\";\nimport HighchartsAnnotations from \"highcharts/modules/annotations\";\nimport HighchartsMore from \"highcharts/highcharts-more\";\nimport DataTable from \"react-data-table-component\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Topbar from \"./Topbar\";\nimport Selector from \"./Selector\";\nimport \"../Styles/Graph.css\";\n\nHighchartsBoost(Highcharts);\nHighchartsExporting(Highcharts);\nHighchartsAnnotations(Highcharts);\nHighchartsMore(Highcharts);\n\nconst Graph = () => {\n  const [compareWithTarget, setCompareWithTarget] = useState(false);\n  const [selectedCurrencies, setSelectedCurrencies] = useState([\n    { value: \"AUD\", label: \"AUD\" },\n    { value: \"EUR\", label: \"EUR\" },\n    { value: \"GBP\", label: \"GBP\" },\n    { value: \"JPY\", label: \"JPY\" },\n    { value: \"USD\", label: \"USD\" }\n  ]);\n  const [summary, setSummary] = useState(\"\");\n  const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n  const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const latestSummaryRef = useRef(\"\");\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/xva\");\n        const result = await response.json();\n        setData(result);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  const getFilteredData = () => {\n    return data.filter((d) => {\n      const date = new Date(d.Date).getTime();\n      return date >= startDate.getTime() && date <= endDate.getTime();\n    });\n  };\n\n  useEffect(() => {\n    if (!loading && data.length > 0) {\n      const updateSummary = () => {\n        if (summary !== latestSummaryRef.current) {\n          setSummary(latestSummaryRef.current);\n        }\n      };\n      const interval = setInterval(updateSummary, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [loading, data, summary]);\n\n  const filteredData = getFilteredData();\n\n  const totalLine = {\n    name: \"Total\",\n    data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n    color: isDarkMode ? \"#007bff\" : \"#343a40\",\n    marker: { enabled: false },\n    zIndex: 1,\n    boostThreshold: 1,\n  };\n\n  const shadeData = {\n    name: \"Shaded Area\",\n    data: filteredData.map((d) => ({\n      x: new Date(d.Date).getTime(),\n      low: Math.min(d.Total, d.Target),\n      high: Math.max(d.Total, d.Target),\n    })),\n    type: \"arearange\",\n    lineWidth: 0,\n    linkedTo: \"Total\",\n    color: \"#2E8C39\",\n    fillOpacity: 0.3,\n    zIndex: 0,\n    marker: { enabled: false },\n    boostThreshold: 0,\n    boost: false,\n  };\n\n  const getData = () => {\n    const compareData = [\n      ...selectedCurrencies.map((currency) => ({\n        name: currency.value,\n        data: filteredData.map((d) => [\n          new Date(d.Date).getTime(),\n          d[currency.value],\n        ]),\n        color: getCurrencyColor(currency.value),\n        marker: { enabled: false },\n        boostThreshold: 1,\n      })),\n      totalLine,\n      {\n        name: \"Target\",\n        data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n        color: \"#007bff\",\n        marker: { enabled: false },\n        zIndex: 1,\n        boostThreshold: 1,\n      },\n      shadeData,\n    ];\n    return compareWithTarget ? compareData : compareData.slice(0, -1);\n  };\n\n  const getCurrencyColor = (currency) => {\n    switch (currency) {\n      case \"AUD\":\n        return \"#FFD700\";\n      case \"EUR\":\n        return \"#FF6347\";\n      case \"GBP\":\n        return \"#4682B4\";\n      case \"JPY\":\n        return \"#32CD32\";\n      case \"USD\":\n        return \"#FFA07A\";\n      case \"BRL\":\n        return \"#9400D3\";\n      case \"CAD\":\n        return \"#00FF00\";\n      case \"CHF\":\n        return \"#FF00FF\";\n      case \"CLP\":\n        return \"#00FFFF\";\n      case \"CNY\":\n        return \"#FF4500\";\n      case \"CZK\":\n        return \"#FF1493\";\n      case \"DKK\":\n        return \"#1E90FF\";\n      case \"HKD\":\n        return \"#FF69B4\";\n      case \"HUF\":\n        return \"#8A2BE2\";\n      case \"INR\":\n        return \"#00BFFF\";\n      case \"KRW\":\n        return \"#7B68EE\";\n      case \"NOK\":\n        return \"#FFD700\";\n      case \"NZD\":\n        return \"#FF6347\";\n      case \"PLN\":\n        return \"#4682B4\";\n      case \"SEK\":\n        return \"#32CD32\";\n      case \"SGD\":\n        return \"#FFA07A\";\n      case \"THB\":\n        return \"#9400D3\";\n      case \"TWD\":\n        return \"#00FF00\";\n      case \"ZAR\":\n        return \"#FF00FF\";\n      default:\n        return \"#FF4500\";\n    }\n  };\n\n  const formatNumber = (number) => {\n    return new Intl.NumberFormat('en-US', {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(number);\n  };\n\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n\n  return (\n    <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n      <Topbar isDarkMode={isDarkMode} toggleTheme={toggleTheme} />\n      <div className=\"graph-container\">\n        <h2 className=\"graph-title\">LCH Notional | Time Series</h2>\n        <div className=\"selectors-container\">\n          <div className=\"currency-selector\">\n            <label>Select Currencies:</label>\n            <Selector\n              options={[\n                { value: \"AUD\", label: \"AUD\" },\n                { value: \"EUR\", label: \"EUR\" },\n                { value: \"GBP\", label: \"GBP\" },\n                { value: \"JPY\", label: \"JPY\" },\n                { value: \"USD\", label: \"USD\" },\n                { value: \"BRL\", label: \"BRL\" },\n                { value: \"CAD\", label: \"CAD\" },\n                { value: \"CHF\", label: \"CHF\" },\n                { value: \"CLP\", label: \"CLP\" },\n                { value: \"CNY\", label: \"CNY\" },\n                { value: \"CZK\", label: \"CZK\" },\n                { value: \"DKK\", label: \"DKK\" },\n                { value: \"HKD\", label: \"HKD\" },\n                { value: \"HUF\", label: \"HUF\" },\n                { value: \"INR\", label: \"INR\" },\n                { value: \"KRW\", label: \"KRW\" },\n                { value: \"MXN\", label: \"MXN\" },\n                { value: \"NOK\", label: \"NOK\" },\n                { value: \"NZD\", label: \"NZD\" },\n                { value: \"PLN\", label: \"PLN\" },\n                { value: \"SEK\", label: \"SEK\" },\n                { value: \"SGD\", label: \"SGD\" },\n                { value: \"THB\", label: \"THB\" },\n                { value: \"TWD\", label: \"TWD\" },\n                { value: \"ZAR\", label: \"ZAR\" },\n              ]}\n              selectedCurrencies={selectedCurrencies}\n              setSelectedCurrencies={setSelectedCurrencies}\n            />\n          </div>\n          <div className=\"date-picker\">\n            <label>Select Date Range:</label>\n            <DatePicker\n              selected={startDate}\n              onChange={(date) => setStartDate(date)}\n              selectsStart\n              startDate={startDate}\n              endDate={endDate}\n              className=\"date-input\"\n            />\n            <DatePicker\n              selected={endDate}\n              onChange={(date) => setEndDate(date)}\n              selectsEnd\n              startDate={startDate}\n              endDate={endDate}\n              minDate={startDate}\n              className=\"date-input\"\n            />\n          </div>\n        </div>\n        <div className=\"main-panel\">\n          <HighchartsReact\n            className=\"chart-actual\"\n            highcharts={Highcharts}\n            options={{\n              chart: {\n                type: \"line\",\n                zoomType: \"x\",\n                backgroundColor: {\n                  linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n                  stops: isDarkMode\n                    ? [\n                        [0, \"#2e2e2e\"],\n                        [1, \"#1a1a1a\"],\n                      ]\n                    : [\n                        [0, \"#ffffff\"],\n                        [1, \"#f0f0f0\"],\n                      ],\n                },\n                borderRadius: 10, // Rounded corners\n                style: {\n                  fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n                },\n                plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n                plotBorderWidth: 1,\n                events: {\n                  load: function () {\n                    this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n                  },\n                },\n                boost: {\n                  useGPUTranslations: true,\n                  usePreAllocated: true,\n                },\n              },\n              title: {\n                text: \"\",\n                style: {\n                  color: isDarkMode ? \"#ffffff\" : \"#000000\",\n                  fontSize: \"22px\",\n                  fontWeight: \"bold\",\n                },\n              },\n              xAxis: {\n                type: \"datetime\",\n                title: {\n                  text: \"Date\",\n                  style: {\n                    color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                    fontSize: \"14px\",\n                    fontWeight: \"bold\",\n                  },\n                },\n                lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n                tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n                labels: {\n                  style: {\n                    color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                    fontSize: \"12px\",\n                  },\n                },\n              },\n              yAxis: {\n                title: {\n                  text: \"Notional (USD)\",\n                  style: {\n                    color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                    fontSize: \"14px\",\n                    fontWeight: \"bold\",\n                  },\n                },\n                gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n                labels: {\n                  style: {\n                    color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                    fontSize: \"12px\",\n                  },\n                },\n              },\n              legend: {\n                layout: \"horizontal\",\n                align: \"center\",\n                verticalAlign: \"bottom\",\n                itemStyle: {\n                  color: isDarkMode ? \"#ffffff\" : \"#000000\",\n                  fontSize: \"14px\",\n                  fontWeight: \"bold\",\n                },\n                itemHoverStyle: {\n                  color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                },\n                itemHiddenStyle: {\n                  color: isDarkMode ? \"#666666\" : \"#999999\",\n                },\n              },\n              tooltip: {\n                shared: true,\n                backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n                borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n                style: {\n                  color: isDarkMode ? \"#ffffff\" : \"#000000\",\n                },\n                formatter: function () {\n                  const points = this.points;\n                  let targetValue = null;\n                  let totalValue = null;\n\n                  points.forEach((point) => {\n                    if (point.series.name === \"Target\") {\n                      targetValue = point.y;\n                    }\n                    if (point.series.name === \"Total\") {\n                      totalValue = point.y;\n                    }\n                  });\n\n                  if (targetValue !== null && totalValue !== null) {\n                    const difference = formatNumber(totalValue - targetValue);\n                    const totalBreakdown = selectedCurrencies\n                      .map((currency) => {\n                        const point = points.find((p) => p.series.name === currency.value);\n                        return point\n                          ? `${currency.value}: ${formatNumber(point.y)}`\n                          : `${currency.value}: N/A`;\n                      })\n                      .join(\"<br>\");\n\n                    let summaryHTML = `<strong>Total: ${formatNumber(totalValue)}</strong><br>`;\n                    summaryHTML += `<strong>Target: ${formatNumber(targetValue)}</strong><br>`;\n                    summaryHTML += `Difference: ${difference}<br><br>`;\n                    summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n                    latestSummaryRef.current = summaryHTML;\n\n                    return points.reduce((s, point) => {\n                      return (\n                        s +\n                        `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${formatNumber(point.y)}`\n                      );\n                    }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n                  }\n                  return points.reduce((s, point) => {\n                    return (\n                      s +\n                      `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${formatNumber(point.y)}`\n                    );\n                  }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n                },\n              },\n              series: getData(),\n              navigation: {\n                buttonOptions: {\n                  enabled: true,\n                  theme: {\n                    fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n                    stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n                    style: {\n                      color: isDarkMode ? \"#ffffff\" : \"#000000\",\n                    },\n                  },\n                },\n              },\n              exporting: {\n                buttons: {\n                  contextButton: {\n                    symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n                    theme: {\n                      fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n                    },\n                  },\n                },\n              },\n            }}\n            containerProps={{ className: \"chart-container\" }}\n            updateArgs={[true, true, true]}\n            ref={chartRef}\n          />\n          {compareWithTarget && (\n            <div className=\"summary-box\">\n              <h3>Summary</h3>\n              <div dangerouslySetInnerHTML={{ __html: summary }} />\n            </div>\n          )}\n          <div className=\"bottom-right-buttons\">\n            <button\n              onClick={() => setCompareWithTarget(!compareWithTarget)}\n              className=\"toggle-button\"\n            >\n              {compareWithTarget ? \"Disable Compare with Target\" : \"Enable Compare with Target\"}\n            </button>\n            <div className=\"download-section\">\n              <button className=\"toggle-button\">Download</button>\n              <div className=\"dropdown-content\">\n                <button\n                  onClick={() =>\n                    chartRef.current.chart.exportChart({ type: \"image/png\" })\n                  }\n                >\n                  PNG\n                </button>\n                <button\n                  onClick={() =>\n                    chartRef.current.chart.exportChart({ type: \"image/jpeg\" })\n                  }\n                >\n                  JPEG\n                </button>\n                <button\n                  onClick={() =>\n                    chartRef.current.chart.exportChart({ type: \"application/pdf\" })\n                  }\n                >\n                  PDF\n                </button>\n                <button\n                  onClick={() =>\n                    chartRef.current.chart.exportChart({ type: \"image/svg+xml\" })\n                  }\n                >\n                  SVG\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"data-table-section\">\n        <DataTable\n          title=\"LCH Notional | Summary Table\"\n          columns={[\n            { name: \"Date\", selector: (row) => row.Date, sortable: true },\n            { name: \"Target\", selector: (row) => formatNumber(row.Target), sortable: true },\n            ...selectedCurrencies.map((currency) => ({\n              name: currency.label,\n              selector: (row) => formatNumber(row[currency.value]),\n              sortable: true,\n            })),\n            { name: \"Total\", selector: (row) => formatNumber(row.Total), sortable: true },\n          ]}\n          data={filteredData.map((d) => {\n            const rowData = {\n              Date: d.Date,\n              Target: d.Target,\n              Total: d.Total,\n            };\n            selectedCurrencies.forEach((currency) => {\n              rowData[currency.value] = d[currency.value];\n            });\n            return rowData;\n          })}\n          pagination\n          highlightOnHover\n          pointerOnHover\n          customStyles={{\n            header: {\n              style: {\n                fontSize: '22px',\n                fontWeight: 'bold',\n                color: 'var(--text-color)',\n                backgroundColor: 'var(--control-bg-color)',\n              },\n            },\n            rows: {\n              style: {\n                fontSize: '16px',\n                color: 'var(--text-color)',\n                backgroundColor: 'var(--input-bg-color)',\n                '&:not(:last-of-type)': {\n                  borderBottomStyle: 'solid',\n                  borderBottomWidth: '1px',\n                  borderBottomColor: 'var(--control-bg-color)',\n                },\n              },\n            },\n            headCells: {\n              style: {\n                fontSize: '18px',\n                fontWeight: 'bold',\n                color: 'var(--text-color)',\n                backgroundColor: 'var(--control-bg-color)',\n              },\n            },\n            cells: {\n              style: {\n                fontSize: '16px',\n                color: 'var(--text-color)',\n                backgroundColor: 'var(--input-bg-color)',\n              },\n            },\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Graph;\n\n"],"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,CACP;cAAE7E,KAAK,EAAE,KAAK;cAAEC,KAAK,EAAE;YAAM,CAAC,EAC9B;cAAED,KAAK,EAAE,KAAK;cAAEC,KAAK,EAAE;YAAM,CAAC,EAC9B;cAAED,KAAK,EAAE,KAAK;cAAEC,KAAK,EAAE;YAAM,CAAC,EAC9B;cAAED,KAAK,EAAE,KAAK;cAAEC,KAAK,EAAE;YAAM,CAAC,EAC9B;cAAED,KAAK,EAAE,KAAK;cAAEC,KAAK,EAAE;YAAM,CAAC,EAC9B;cAAED,KAAK,EAAE,KAAK;cAAEC,KAAK,EAAE;YAAM,CAAC,EAC9B;cAAED,KAAK,EAAE,KAAK;cAAEC,KAAK,EAAE;YAAM,CAAC,EAC9B;cAAED,KAAK,EAAE,KAAK;cAAEC,KAAK,EAAE;YAAM,CAAC,EAC9B;cAAED,KAAK,EAAE,KAAK;cAAEC,KAAK,EAAE;YAAM,CAAC,EAC9B;cAAED,KAAK,EAAE,KAAK;cAAEC,KAAK,EAAE;YAAM,CAAC,EAC9B;cAAED,KAAK,EAAE,KAAK;cAAEC,KAAK,EAAE;YAAM,CAAC,EAC9B;cAAED,KAAK,EAAE,KAAK;cAAEC,KAAK,EAAE;YAAM,CAAC,EAC9B;cAAED,KAAK,EAAE,KAAK;cAAEC,KAAK,EAAE;YAAM,CAAC,EAC9B;cAAED,KAAK,EAAE,KAAK;cAAEC,KAAK,EAAE;YAAM,CAAC,EAC9B;cAAED,KAAK,EAAE,KAAK;cAAEC,KAAK,EAAE;YAAM,CAAC,EAC9B;cAAED,KAAK,EAAE,KAAK;cAAEC,KAAK,EAAE;YAAM,CAAC,EAC9B;cAAED,KAAK,EAAE,KAAK;cAAEC,KAAK,EAAE;YAAM,CAAC,EAC9B;cAAED,KAAK,EAAE,KAAK;cAAEC,KAAK,EAAE;YAAM,CAAC,EAC9B;cAAED,KAAK,EAAE,KAAK;cAAEC,KAAK,EAAE;YAAM,CAAC,EAC9B;cAAED,KAAK,EAAE,KAAK;cAAEC,KAAK,EAAE;YAAM,CAAC,EAC9B;cAAED,KAAK,EAAE,KAAK;cAAEC,KAAK,EAAE;YAAM,CAAC,EAC9B;cAAED,KAAK,EAAE,KAAK;cAAEC,KAAK,EAAE;YAAM,CAAC,EAC9B;cAAED,KAAK,EAAE,KAAK;cAAEC,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}