{"ast":null,"code":"var _jsxFileName = \"/Users/harshmishra/Desktop/dashboard/frontend/src/Components/Selector.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useCallback } from 'react';\n// import { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\n// const Selector = ({ options, selectedCurrencies, setSelectedCurrencies }) => {\n//   const [dropdownOpen, setDropdownOpen] = useState(false);\n//   const [shiftSelected, setShiftSelected] = useState([]);\n//   const toggle = () => setDropdownOpen(prevState => !prevState);\n\n//   const handleCheckboxChange = useCallback((e, currency) => {\n//     let updatedSelected = [...selectedCurrencies];\n//     if (e.nativeEvent.shiftKey && shiftSelected.length > 0) {\n//       const lastSelected = shiftSelected[shiftSelected.length - 1];\n//       const start = options.findIndex(opt => opt.value === lastSelected);\n//       const end = options.findIndex(opt => opt.value === currency);\n//       const range = options.slice(Math.min(start, end), Math.max(start, end) + 1).map(opt => opt.value);\n//       if (e.target.checked) {\n//         updatedSelected = [...new Set([...updatedSelected, ...range])];\n//       } else {\n//         updatedSelected = updatedSelected.filter(sel => !range.includes(sel));\n//       }\n//       setShiftSelected(range);\n//     } else {\n//       if (e.target.checked) {\n//         updatedSelected.push(currency);\n//       } else {\n//         updatedSelected = updatedSelected.filter(sel => sel !== currency);\n//       }\n//       setShiftSelected([currency]);\n//     }\n//     setSelectedCurrencies(updatedSelected);\n//   }, [selectedCurrencies, shiftSelected, setSelectedCurrencies, options]);\n\n//   return (\n//     <Dropdown isOpen={dropdownOpen} toggle={toggle}>\n//       <DropdownToggle caret>\n//         Select Currencies\n//       </DropdownToggle>\n//       <DropdownMenu>\n//         {options.map(option => (\n//           <DropdownItem key={option.value} toggle={false}>\n//             <input\n//               type=\"checkbox\"\n//               checked={selectedCurrencies.includes(option.value)}\n//               onChange={(e) => handleCheckboxChange(e, option.value)}\n//             /> {option.label}\n//           </DropdownItem>\n//         ))}\n//       </DropdownMenu>\n//     </Dropdown>\n//   );\n// };\n\n// export default Selector;\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport \"./currencySelector.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CurrencySelector = ({\n  options,\n  selectedCurrencies,\n  setSelectedCurrencies\n}) => {\n  _s();\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [previousSelected, setPreviousSelected] = useState(null);\n  const [previousChecked, setPreviousChecked] = useState(false);\n  const [currentSelected, setCurrentSelected] = useState(null);\n  const handleSelectCurrency = useCallback((event, currency) => {\n    const isSelected = selectedCurrencies.some(c => c.value === currency.value);\n    let newSelectedCurrencies;\n    if (event.nativeEvent.shiftKey) {\n      const current = options.findIndex(x => x.value === currency.value);\n      const previous = options.findIndex(x => x.value === (previousSelected === null || previousSelected === void 0 ? void 0 : previousSelected.value));\n      const start = Math.min(current, previous);\n      const end = Math.max(current, previous);\n      if (start > -1 && end > -1) {\n        const range = options.slice(start, end + 1);\n        if (isSelected) {\n          newSelectedCurrencies = selectedCurrencies.filter(c => !range.some(r => r.value === c.value));\n        } else {\n          newSelectedCurrencies = [...new Set([...selectedCurrencies, ...range])];\n        }\n        setSelectedCurrencies(newSelectedCurrencies);\n        setCurrentSelected(currency);\n        return;\n      }\n    } else {\n      if (isSelected) {\n        newSelectedCurrencies = selectedCurrencies.filter(c => c.value !== currency.value);\n      } else {\n        newSelectedCurrencies = [...selectedCurrencies, currency];\n      }\n      setPreviousSelected(currency);\n      setPreviousChecked(event.target.checked);\n    }\n    setSelectedCurrencies(newSelectedCurrencies);\n  }, [selectedCurrencies, setSelectedCurrencies, options, previousSelected, previousChecked, setPreviousChecked, currentSelected, setCurrentSelected]);\n  const handleDropdownToggle = () => {\n    setDropdownOpen(!dropdownOpen);\n  };\n  const truncateSelectedCurrencies = () => {\n    const maxDisplay = 5;\n    if (selectedCurrencies.length > maxDisplay) {\n      const displayed = selectedCurrencies.slice(0, maxDisplay).map(c => c.label).join(\", \");\n      return `${displayed}, +${selectedCurrencies.length - maxDisplay} more`;\n    }\n    return selectedCurrencies.map(c => c.label).join(\", \");\n  };\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (dropdownOpen && !event.target.closest(\".currency-selector-container\")) {\n        setDropdownOpen(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [dropdownOpen]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"currency-selector-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"dropdown-button\",\n      onClick: handleDropdownToggle,\n      children: truncateSelectedCurrencies() || \"Select Currencies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), dropdownOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"currency-list\",\n        children: options.map(currency => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"currency-item\",\n          onClick: e => handleSelectCurrency(e, currency),\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedCurrencies.some(c => c.value === currency.value),\n            onChange: e => handleSelectCurrency(e, currency)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 17\n          }, this), currency.label]\n        }, currency.value, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(CurrencySelector, \"ngjrB/wwbwBJA8NuvYMh8+j+KMA=\");\n_c = CurrencySelector;\nexport default CurrencySelector;\nvar _c;\n$RefreshReg$(_c, \"CurrencySelector\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","CurrencySelector","options","selectedCurrencies","setSelectedCurrencies","_s","dropdownOpen","setDropdownOpen","previousSelected","setPreviousSelected","previousChecked","setPreviousChecked","currentSelected","setCurrentSelected","handleSelectCurrency","event","currency","isSelected","some","c","value","newSelectedCurrencies","nativeEvent","shiftKey","current","findIndex","x","previous","start","Math","min","end","max","range","slice","filter","r","Set","target","checked","handleDropdownToggle","truncateSelectedCurrencies","maxDisplay","length","displayed","map","label","join","handleClickOutside","closest","document","addEventListener","removeEventListener","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","e","type","onChange","_c","$RefreshReg$"],"sources":["/Users/harshmishra/Desktop/dashboard/frontend/src/Components/Selector.jsx"],"sourcesContent":["// import React, { useState, useCallback } from 'react';\n// import { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\n// const Selector = ({ options, selectedCurrencies, setSelectedCurrencies }) => {\n//   const [dropdownOpen, setDropdownOpen] = useState(false);\n//   const [shiftSelected, setShiftSelected] = useState([]);\n//   const toggle = () => setDropdownOpen(prevState => !prevState);\n\n//   const handleCheckboxChange = useCallback((e, currency) => {\n//     let updatedSelected = [...selectedCurrencies];\n//     if (e.nativeEvent.shiftKey && shiftSelected.length > 0) {\n//       const lastSelected = shiftSelected[shiftSelected.length - 1];\n//       const start = options.findIndex(opt => opt.value === lastSelected);\n//       const end = options.findIndex(opt => opt.value === currency);\n//       const range = options.slice(Math.min(start, end), Math.max(start, end) + 1).map(opt => opt.value);\n//       if (e.target.checked) {\n//         updatedSelected = [...new Set([...updatedSelected, ...range])];\n//       } else {\n//         updatedSelected = updatedSelected.filter(sel => !range.includes(sel));\n//       }\n//       setShiftSelected(range);\n//     } else {\n//       if (e.target.checked) {\n//         updatedSelected.push(currency);\n//       } else {\n//         updatedSelected = updatedSelected.filter(sel => sel !== currency);\n//       }\n//       setShiftSelected([currency]);\n//     }\n//     setSelectedCurrencies(updatedSelected);\n//   }, [selectedCurrencies, shiftSelected, setSelectedCurrencies, options]);\n\n//   return (\n//     <Dropdown isOpen={dropdownOpen} toggle={toggle}>\n//       <DropdownToggle caret>\n//         Select Currencies\n//       </DropdownToggle>\n//       <DropdownMenu>\n//         {options.map(option => (\n//           <DropdownItem key={option.value} toggle={false}>\n//             <input\n//               type=\"checkbox\"\n//               checked={selectedCurrencies.includes(option.value)}\n//               onChange={(e) => handleCheckboxChange(e, option.value)}\n//             /> {option.label}\n//           </DropdownItem>\n//         ))}\n//       </DropdownMenu>\n//     </Dropdown>\n//   );\n// };\n\n// export default Selector;\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport \"./currencySelector.css\";\n\nconst CurrencySelector = ({ options, selectedCurrencies, setSelectedCurrencies }) => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [previousSelected, setPreviousSelected] = useState(null);\n  const [previousChecked, setPreviousChecked] = useState(false);\n  const [currentSelected, setCurrentSelected] = useState(null);\n\n  const handleSelectCurrency = useCallback(\n    (event, currency) => {\n      const isSelected = selectedCurrencies.some(c => c.value === currency.value);\n      let newSelectedCurrencies;\n      if (event.nativeEvent.shiftKey) {\n        const current = options.findIndex(x => x.value === currency.value);\n        const previous = options.findIndex(x => x.value === previousSelected?.value);\n        const start = Math.min(current, previous);\n        const end = Math.max(current, previous);\n        if (start > -1 && end > -1) {\n          const range = options.slice(start, end + 1);\n          if (isSelected) {\n            newSelectedCurrencies = selectedCurrencies.filter(\n              c => !range.some(r => r.value === c.value)\n            );\n          } else {\n            newSelectedCurrencies = [\n              ...new Set([...selectedCurrencies, ...range])\n            ];\n          }\n          setSelectedCurrencies(newSelectedCurrencies);\n          setCurrentSelected(currency);\n          return;\n        }\n      } else {\n        if (isSelected) {\n          newSelectedCurrencies = selectedCurrencies.filter(c => c.value !== currency.value);\n        } else {\n          newSelectedCurrencies = [...selectedCurrencies, currency];\n        }\n        setPreviousSelected(currency);\n        setPreviousChecked(event.target.checked);\n      }\n      setSelectedCurrencies(newSelectedCurrencies);\n    },\n    [selectedCurrencies, setSelectedCurrencies, options, previousSelected, previousChecked, setPreviousChecked, currentSelected, setCurrentSelected]\n  );\n\n  const handleDropdownToggle = () => {\n    setDropdownOpen(!dropdownOpen);\n  };\n\n  const truncateSelectedCurrencies = () => {\n    const maxDisplay = 5;\n    if (selectedCurrencies.length > maxDisplay) {\n      const displayed = selectedCurrencies.slice(0, maxDisplay).map(c => c.label).join(\", \");\n      return `${displayed}, +${selectedCurrencies.length - maxDisplay} more`;\n    }\n    return selectedCurrencies.map(c => c.label).join(\", \");\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (dropdownOpen && !event.target.closest(\".currency-selector-container\")) {\n        setDropdownOpen(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [dropdownOpen]);\n\n  return (\n    <div className=\"currency-selector-container\">\n      <button className=\"dropdown-button\" onClick={handleDropdownToggle}>\n        {truncateSelectedCurrencies() || \"Select Currencies\"}\n      </button>\n      {dropdownOpen && (\n        <div className=\"dropdown-content\">\n          <div className=\"currency-list\">\n            {options.map((currency) => (\n              <div\n                key={currency.value}\n                className=\"currency-item\"\n                onClick={(e) => handleSelectCurrency(e, currency)}\n              >\n                <input\n                  type=\"checkbox\"\n                  checked={selectedCurrencies.some(c => c.value === currency.value)}\n                  onChange={(e) => handleSelectCurrency(e, currency)}\n                />\n                {currency.label}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CurrencySelector;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}