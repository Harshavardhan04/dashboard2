{"ast":null,"code":"var _jsxFileName = \"/Users/harshmishra/Desktop/dashboard/frontend/src/Components/Graph.jsx\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect, useRef } from \"react\";\n// // import Highcharts from \"highcharts\";\n// // import HighchartsReact from \"highcharts-react-official\";\n// // import HighchartsBoost from \"highcharts/modules/boost\";\n// // import HighchartsExporting from \"highcharts/modules/exporting\";\n// // import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// // import HighchartsMore from \"highcharts/highcharts-more\";\n// // import DataTable from \"react-data-table-component\";\n// // import DatePicker from \"react-datepicker\";\n// // import \"react-datepicker/dist/react-datepicker.css\";\n// // import Topbar from \"./Topbar\";\n// // import \"../Styles/Graph.css\";\n// // import Selector from \"./Selector\";  // Ensure to import the new component\n\n// // HighchartsBoost(Highcharts);\n// // HighchartsExporting(Highcharts);\n// // HighchartsAnnotations(Highcharts);\n// // HighchartsMore(Highcharts);\n\n// // const Graph = () => {\n// //   const [compareWithTarget, setCompareWithTarget] = useState(false);\n// //   const [selectedCurrencies, setSelectedCurrencies] = useState([\n// //     { value: \"AUD\", label: \"AUD\" },\n// //     { value: \"EUR\", label: \"EUR\" },\n// //     { value: \"GBP\", label: \"GBP\" },\n// //     { value: \"JPY\", label: \"JPY\" },\n// //     { value: \"USD\", label: \"USD\" },\n// //   ]);\n// //   const [summary, setSummary] = useState(\"\");\n// //   const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n// //   const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n// //   const [data, setData] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [isDarkMode, setIsDarkMode] = useState(true);\n// //   const latestSummaryRef = useRef(\"\");\n// //   const chartRef = useRef(null);\n\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       try {\n// //         const response = await fetch(\"http://localhost:5000/xva\");\n// //         const result = await response.json();\n// //         setData(result);\n// //         setLoading(false);\n// //       } catch (error) {\n// //         console.error('Error fetching data:', error);\n// //         setLoading(false);\n// //       }\n// //     };\n// //     fetchData();\n// //   }, []);\n\n// //   const getFilteredData = () => {\n// //     return data.filter((d) => {\n// //       const date = new Date(d.Date).getTime();\n// //       return date >= startDate.getTime() && date <= endDate.getTime();\n// //     });\n// //   };\n\n// //   const filteredData = getFilteredData();\n\n// //   useEffect(() => {\n// //     if (!loading && data.length > 0) {\n// //       const updateSummary = () => {\n// //         if (summary !== latestSummaryRef.current) {\n// //           setSummary(latestSummaryRef.current);\n// //         }\n// //       };\n// //       const interval = setInterval(updateSummary, 1000);\n// //       return () => clearInterval(interval);\n// //     }\n// //   }, [loading, data, summary]);\n\n// //   const totalLine = {\n// //     name: \"Total\",\n// //     data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n// //     color: isDarkMode ? \"#007bff\" : \"#343a40\",\n// //     marker: { enabled: false },\n// //     zIndex: 1,\n// //     boostThreshold: 1,\n// //   };\n\n// //   const shadeData = {\n// //     name: \"Shaded Area\",\n// //     data: filteredData.map((d) => ({\n// //       x: new Date(d.Date).getTime(),\n// //       low: Math.min(d.Total, d.Target),\n// //       high: Math.max(d.Total, d.Target),\n// //     })),\n// //     type: \"arearange\",\n// //     lineWidth: 0,\n// //     linkedTo: \"Total\",\n// //     color: \"#2E8C39\",\n// //     fillOpacity: 0.3,\n// //     zIndex: 0,\n// //     marker: { enabled: false },\n// //     boostThreshold: 0,\n// //     boost: false,\n// //   };\n\n// //   const handleCurrencyChange = (selectedOptions) => {\n// //     setSelectedCurrencies(selectedOptions);\n// //   };\n\n// //   const getData = () => {\n// //     if (!filteredData || filteredData.length === 0) return [];\n\n// //     const compareData = [\n// //       ...selectedCurrencies.map((currency) => ({\n// //         name: currency.value,\n// //         data: filteredData.map((d) => [\n// //           new Date(d.Date).getTime(),\n// //           d[currency.value],\n// //         ]),\n// //         color: getCurrencyColor(currency.value),\n// //         marker: { enabled: false },\n// //         boostThreshold: 1,\n// //       })),\n// //       totalLine,\n// //       {\n// //         name: \"Target\",\n// //         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n// //         color: \"#007bff\",\n// //         marker: { enabled: false },\n// //         zIndex: 1,\n// //         boostThreshold: 1,\n// //       },\n// //       shadeData,\n// //     ];\n// //     return compareWithTarget ? compareData : compareData.slice(0, -1);\n// //   };\n\n// //   const getCurrencyColor = (currency) => {\n// //     switch (currency) {\n// //       case \"AUD\":\n// //         return \"#FFD700\";\n// //       case \"EUR\":\n// //         return \"#FF6347\";\n// //       case \"GBP\":\n// //         return \"#4682B4\";\n// //       case \"JPY\":\n// //         return \"#32CD32\";\n// //       case \"USD\":\n// //         return \"#FFA07A\";\n// //       case \"BRL\":\n// //         return \"#9400D3\";\n// //       case \"CAD\":\n// //         return \"#00FF00\";\n// //       case \"CHF\":\n// //         return \"#FF00FF\";\n// //       case \"CLP\":\n// //         return \"#00FFFF\";\n// //       case \"CNY\":\n// //         return \"#FF4500\";\n// //       case \"CZK\":\n// //         return \"#FF1493\";\n// //       case \"DKK\":\n// //         return \"#1E90FF\";\n// //       case \"HKD\":\n// //         return \"#FF69B4\";\n// //       case \"HUF\":\n// //         return \"#8A2BE2\";\n// //       case \"INR\":\n// //         return \"#00BFFF\";\n// //       case \"KRW\":\n// //         return \"#7B68EE\";\n// //       case \"MXN\":\n// //         return \"#F4C145\";\n// //       case \"NOK\":\n// //         return \"#FFD700\";\n// //       case \"NZD\":\n// //         return \"#FF6347\";\n// //       case \"PLN\":\n// //         return \"#4682B4\";\n// //       case \"SEK\":\n// //         return \"#32CD32\";\n// //       case \"SGD\":\n// //         return \"#FFA07A\";\n// //       case \"THB\":\n// //         return \"#9400D3\";\n// //       case \"TWD\":\n// //         return \"#00FF00\";\n// //       case \"ZAR\":\n// //         return \"#FF00FF\";\n// //       default:\n// //         return \"#FF4500\";\n// //     }\n// //   };\n\n// //   const getColumns = () => {\n// //     const baseColumns = [\n// //       { name: \"Date\", selector: (row) => row.Date, sortable: true },\n// //       { name: \"Target\", selector: (row) => row.Target, sortable: true },\n// //     ];\n\n// //     const currencyColumns = selectedCurrencies.map((currency) => ({\n// //       name: currency.label,\n// //       selector: (row) => row[currency.value],\n// //       sortable: true,\n// //     }));\n\n// //     return [\n// //       ...baseColumns,\n// //       ...currencyColumns,\n// //       { name: \"Total\", selector: (row) => row.Total, sortable: true },\n// //     ];\n// //   };\n\n// //   const getFilteredTableData = () => {\n// //     return filteredData.map((d) => {\n// //       const rowData = {\n// //         Date: d.Date,\n// //         Target: d.Target,\n// //         Total: d.Total,\n// //       };\n// //       selectedCurrencies.forEach((currency) => {\n// //         rowData[currency.value] = d[currency.value];\n// //       });\n// //       return rowData;\n// //     });\n// //   };\n\n// //   const handleTooltipFormatter = function () {\n// //     const points = this.points;\n// //     let targetValue = null;\n// //     let totalValue = null;\n\n// //     points.forEach((point) => {\n// //       if (point.series.name === \"Target\") {\n// //         targetValue = point.y;\n// //       }\n// //       if (point.series.name === \"Total\") {\n// //         totalValue = point.y;\n// //       }\n// //     });\n\n// //     if (targetValue !== null && totalValue !== null) {\n// //       const difference = (totalValue - targetValue).toFixed(2);\n// //       const totalBreakdown = selectedCurrencies\n// //         .map((currency) => {\n// //           const point = points.find((p) => p.series.name === currency.value);\n// //           return point\n// //             ? `${currency.value}: ${point.y.toFixed(2)}`\n// //             : `${currency.value}: N/A`;\n// //         })\n// //         .join(\"<br>\");\n\n// //       let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n// //       summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n// //       summaryHTML += `Difference: ${difference}<br><br>`;\n// //       summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n// //       latestSummaryRef.current = summaryHTML;\n\n// //       return points.reduce((s, point) => {\n// //         return (\n// //           s +\n// //           `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// //         );\n// //       }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// //     }\n// //     return points.reduce((s, point) => {\n// //       return (\n// //         s +\n// //         `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// //       );\n// //     }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// //   };\n\n// //   const options = {\n// //     chart: {\n// //       type: \"line\",\n// //       zoomType: \"x\",\n// //       backgroundColor: {\n// //         linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n// //         stops: isDarkMode\n// //           ? [\n// //               [0, \"#2e2e2e\"],\n// //               [1, \"#1a1a1a\"],\n// //             ]\n// //           : [\n// //               [0, \"#ffffff\"],\n// //               [1, \"#f0f0f0\"],\n// //             ],\n// //       },\n// //       borderRadius: 10, // Rounded corners\n// //       style: {\n// //         fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n// //       },\n// //       plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //       plotBorderWidth: 1,\n// //       events: {\n// //         load: function () {\n// //           this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n// //         },\n// //       },\n// //       boost: {\n// //         useGPUTranslations: true,\n// //         usePreAllocated: true,\n// //       },\n// //     },\n// //     title: {\n// //       text: \"LCH Notional\",\n// //       style: {\n// //         color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //         fontSize: \"22px\",\n// //         fontWeight: \"bold\",\n// //       },\n// //     },\n// //     xAxis: {\n// //       type: \"datetime\",\n// //       title: {\n// //         text: \"Date\",\n// //         style: {\n// //           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //           fontSize: \"14px\",\n// //           fontWeight: \"bold\",\n// //         },\n// //       },\n// //       lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //       tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //       labels: {\n// //         style: {\n// //           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //           fontSize: \"12px\",\n// //         },\n// //       },\n// //     },\n// //     yAxis: {\n// //       title: {\n// //         text: \"Notional (USD)\",\n// //         style: {\n// //           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //           fontSize: \"14px\",\n// //           fontWeight: \"bold\",\n// //         },\n// //       },\n// //       gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //       labels: {\n// //         style: {\n// //           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //           fontSize: \"12px\",\n// //         },\n// //       },\n// //     },\n// //     legend: {\n// //       layout: \"horizontal\",\n// //       align: \"center\",\n// //       verticalAlign: \"bottom\",\n// //       itemStyle: {\n// //         color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //         fontSize: \"14px\",\n// //         fontWeight: \"bold\",\n// //       },\n// //       itemHoverStyle: {\n// //         color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //       },\n// //       itemHiddenStyle: {\n// //         color: isDarkMode ? \"#666666\" : \"#999999\",\n// //       },\n// //     },\n// //     tooltip: {\n// //       shared: true,\n// //       backgroundColor: isDarkMode\n// //         ? \"rgba(33, 33, 33, 0.85)\"\n// //         : \"rgba(255, 255, 255, 0.85)\",\n// //       borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n// //       style: {\n// //         color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //       },\n// //       formatter: handleTooltipFormatter,\n// //     },\n// //     series: getData(),\n// //     navigation: {\n// //       buttonOptions: {\n// //         enabled: true,\n// //         theme: {\n// //           fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// //           stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n// //           style: {\n// //             color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //           },\n// //         },\n// //       },\n// //     },\n// //     exporting: {\n// //       buttons: {\n// //         contextButton: {\n// //           symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //           theme: {\n// //             fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// //           },\n// //         },\n// //       },\n// //     },\n// //   };\n\n// //   useEffect(() => {\n// //     if (!loading && data.length > 0) {\n// //       Highcharts.charts.forEach((chart) => {\n// //         if (chart) {\n// //           chart.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n// //           chart.series.forEach((series) => {\n// //             const seriesData = getData().find((s) => s.name === series.name);\n// //             if (seriesData) {\n// //               series.setData(seriesData.data);\n// //             }\n// //           });\n// //         }\n// //       });\n// //     }\n// //   }, [startDate, endDate, selectedCurrencies, loading, data, isDarkMode]);\n\n// //   return (\n// //     <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n// //       <div className=\"app-container\">\n// //         <Topbar />\n// //         <div className=\"floating-box-container\">\n// //           <div className=\"translucent-box\">\n// //             <div className=\"control-group\">\n// //               <div className=\"currency-selector\">\n// //                 <h2>Select Currencies to Include in Total:</h2>\n// //                 <Selector\n// //                   options={[\n// //                     { value: \"AUD\", label: \"AUD\" },\n// //                     { value: \"EUR\", label: \"EUR\" },\n// //                     { value: \"GBP\", label: \"GBP\" },\n// //                     { value: \"JPY\", label: \"JPY\" },\n// //                     { value: \"USD\", label: \"USD\" },\n// //                     { value: \"BRL\", label: \"BRL\" },\n// //                     { value: \"CAD\", label: \"CAD\" },\n// //                     { value: \"CHF\", label: \"CHF\" },\n// //                     { value: \"CLP\", label: \"CLP\" },\n// //                     { value: \"CNY\", label: \"CNY\" },\n// //                     { value: \"CZK\", label: \"CZK\" },\n// //                     { value: \"DKK\", label: \"DKK\" },\n// //                     { value: \"HKD\", label: \"HKD\" },\n// //                     { value: \"HUF\", label: \"HUF\" },\n// //                     { value: \"INR\", label: \"INR\" },\n// //                     { value: \"KRW\", label: \"KRW\" },\n// //                     { value: \"MXN\", label: \"MXN\" },\n// //                     { value: \"NOK\", label: \"NOK\" },\n// //                     { value: \"NZD\", label: \"NZD\" },\n// //                     { value: \"PLN\", label: \"PLN\" },\n// //                     { value: \"SEK\", label: \"SEK\" },\n// //                     { value: \"SGD\", label: \"SGD\" },\n// //                     { value: \"THB\", label: \"THB\" },\n// //                     { value: \"TWD\", label: \"TWD\" },\n// //                     { value: \"ZAR\", label: \"ZAR\" },\n// //                   ]}\n// //                   selectedCurrencies={selectedCurrencies}\n// //                   setSelectedCurrencies={handleCurrencyChange}\n// //                 />\n// //               </div>\n// //             </div>\n\n// //             <div className=\"control-group\">\n// //               <div className=\"date-picker\">\n// //                 <h2>Select a date range</h2>\n// //                 <DatePicker\n// //                   selected={startDate}\n// //                   onChange={(date) => setStartDate(date)}\n// //                   selectsStart\n// //                   startDate={startDate}\n// //                   endDate={endDate}\n// //                   className=\"date-input\"\n// //                 />\n// //                 <DatePicker\n// //                   selected={endDate}\n// //                   onChange={(date) => setEndDate(date)}\n// //                   selectsEnd\n// //                   startDate={startDate}\n// //                   endDate={endDate}\n// //                   minDate={startDate}\n// //                   className=\"date-input\"\n// //                 />\n// //               </div>\n// //             </div>\n// //           </div>\n// //           <div className=\"translucent-box2\">\n// //             <h2>Graph Options</h2>\n// //             <button\n// //               onClick={() => setCompareWithTarget(!compareWithTarget)}\n// //               className=\"toggle-button\"\n// //             >\n// //               {compareWithTarget\n// //                 ? \"Disable Compare with Target\"\n// //                 : \"Enable Compare with Target\"}\n// //             </button>\n\n// //             <div className=\"download-section\">\n// //               <button className=\"toggle-button\">Download</button>\n// //               <div className=\"dropdown-content\">\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"image/png\" })\n// //                   }\n// //                 >\n// //                   PNG\n// //                 </button>\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"image/jpeg\" })\n// //                   }\n// //                 >\n// //                   JPEG\n// //                 </button>\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"application/pdf\" })\n// //                   }\n// //                 >\n// //                   PDF\n// //                 </button>\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"image/svg+xml\" })\n// //                   }\n// //                 >\n// //                   SVG\n// //                 </button>\n// //               </div>\n// //             </div>\n// //             <button\n// //               onClick={() => setIsDarkMode(!isDarkMode)}\n// //               className=\"toggle-button\"\n// //             >\n// //               Toggle Dark Mode\n// //             </button>\n// //           </div>\n// //         </div>\n// //         <div className=\"main-panel\">\n// //           <HighchartsReact\n// //             className=\"chart-actual\"\n// //             highcharts={Highcharts}\n// //             options={options}\n// //             containerProps={{ className: \"chart-container\" }}\n// //             updateArgs={[true, true, true]}\n// //             ref={chartRef}\n// //           />\n// //           {compareWithTarget && (\n// //             <div className=\"summary-box\">\n// //               <h3>Summary</h3>\n// //               <div dangerouslySetInnerHTML={{ __html: summary }} />\n// //             </div>\n// //           )}\n\n// //           <div className=\"data-table-section\">\n// //             <DataTable\n// //               title=\"LCH Notional | Summary Table\"\n// //               columns={getColumns()}\n// //               data={getFilteredTableData()}\n// //               pagination\n// //               highlightOnHover\n// //               pointerOnHover\n// //               customStyles={customTableStyles}\n// //             />\n// //           </div>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // const customTableStyles = {\n// //   header: {\n// //     style: {\n// //       fontSize: '22px',\n// //       fontWeight: 'bold',\n// //       color: 'var(--text-color)',\n// //       backgroundColor: 'var(--control-bg-color)',\n// //     },\n// //   },\n// //   rows: {\n// //     style: {\n// //       fontSize: '16px',\n// //       color: 'var(--text-color)',\n// //       backgroundColor: 'var(--input-bg-color)',\n// //       '&:not(:last-of-type)': {\n// //         borderBottomStyle: 'solid',\n// //         borderBottomWidth: '1px',\n// //         borderBottomColor: 'var(--control-bg-color)',\n// //       },\n// //     },\n// //   },\n// //   headCells: {\n// //     style: {\n// //       fontSize: '18px',\n// //       fontWeight: 'bold',\n// //       color: 'var(--text-color)',\n// //       backgroundColor: 'var(--control-bg-color)',\n// //     },\n// //   },\n// //   cells: {\n// //     style: {\n// //       fontSize: '16px',\n// //       color: 'var(--text-color)',\n// //       backgroundColor: 'var(--input-bg-color)',\n// //     },\n// //   },\n// // };\n\n// // export default Graph;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import Highcharts from \"highcharts\";\n// import HighchartsReact from \"highcharts-react-official\";\n// import HighchartsBoost from \"highcharts/modules/boost\";\n// import HighchartsExporting from \"highcharts/modules/exporting\";\n// import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// import HighchartsMore from \"highcharts/highcharts-more\";\n// import DataTable from \"react-data-table-component\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import Topbar from \"./Topbar\";\n// import Selector from \"./Selector\";\n// import \"../Styles/Graph.css\";\n\n// HighchartsBoost(Highcharts);\n// HighchartsExporting(Highcharts);\n// HighchartsAnnotations(Highcharts);\n// HighchartsMore(Highcharts);\n\n// const Graph = () => {\n//   const [compareWithTarget, setCompareWithTarget] = useState(false);\n//   const [selectedCurrencies, setSelectedCurrencies] = useState([\n//     { value: \"AUD\", label: \"AUD\" },\n//     { value: \"EUR\", label: \"EUR\" },\n//     { value: \"GBP\", label: \"GBP\" },\n//     { value: \"JPY\", label: \"JPY\" },\n//     { value: \"USD\", label: \"USD\" }\n//   ]);\n//   const [summary, setSummary] = useState(\"\");\n//   const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n//   const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n//   const [data, setData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [isDarkMode, setIsDarkMode] = useState(true);\n//   const latestSummaryRef = useRef(\"\");\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:5000/xva\");\n//         const result = await response.json();\n//         setData(result);\n//         setLoading(false);\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         setLoading(false);\n//       }\n//     };\n//     fetchData();\n//   }, []);\n\n//   const getFilteredData = () => {\n//     return data.filter((d) => {\n//       const date = new Date(d.Date).getTime();\n//       return date >= startDate.getTime() && date <= endDate.getTime();\n//     });\n//   };\n\n//   useEffect(() => {\n//     if (!loading && data.length > 0) {\n//       const updateSummary = () => {\n//         if (summary !== latestSummaryRef.current) {\n//           setSummary(latestSummaryRef.current);\n//         }\n//       };\n//       const interval = setInterval(updateSummary, 1000);\n//       return () => clearInterval(interval);\n//     }\n//   }, [loading, data, summary]);\n\n//   const filteredData = getFilteredData();\n\n//   const totalLine = {\n//     name: \"Total\",\n//     data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n//     color: isDarkMode ? \"#007bff\" : \"#343a40\",\n//     marker: { enabled: false },\n//     zIndex: 1,\n//     boostThreshold: 1,\n//   };\n\n//   const shadeData = {\n//     name: \"Shaded Area\",\n//     data: filteredData.map((d) => ({\n//       x: new Date(d.Date).getTime(),\n//       low: Math.min(d.Total, d.Target),\n//       high: Math.max(d.Total, d.Target),\n//     })),\n//     type: \"arearange\",\n//     lineWidth: 0,\n//     linkedTo: \"Total\",\n//     color: \"#2E8C39\",\n//     fillOpacity: 0.3,\n//     zIndex: 0,\n//     marker: { enabled: false },\n//     boostThreshold: 0,\n//     boost: false,\n//   };\n\n//   const getData = () => {\n//     const compareData = [\n//       ...selectedCurrencies.map((currency) => ({\n//         name: currency.value,\n//         data: filteredData.map((d) => [\n//           new Date(d.Date).getTime(),\n//           d[currency.value],\n//         ]),\n//         color: getCurrencyColor(currency.value),\n//         marker: { enabled: false },\n//         boostThreshold: 1,\n//       })),\n//       totalLine,\n//       {\n//         name: \"Target\",\n//         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n//         color: \"#007bff\",\n//         marker: { enabled: false },\n//         zIndex: 1,\n//         boostThreshold: 1,\n//       },\n//       shadeData,\n//     ];\n//     return compareWithTarget ? compareData : compareData.slice(0, -1);\n//   };\n\n//   const getCurrencyColor = (currency) => {\n//     switch (currency) {\n//       case \"AUD\":\n//         return \"#FFD700\";\n//       case \"EUR\":\n//         return \"#FF6347\";\n//       case \"GBP\":\n//         return \"#4682B4\";\n//       case \"JPY\":\n//         return \"#32CD32\";\n//       case \"USD\":\n//         return \"#FFA07A\";\n//       case \"BRL\":\n//         return \"#9400D3\";\n//       case \"CAD\":\n//         return \"#00FF00\";\n//       case \"CHF\":\n//         return \"#FF00FF\";\n//       case \"CL\":\n//         return \"#00FFFF\";\n//       case \"CNY\":\n//         return \"#FF4500\";\n//       case \"CZK\":\n//         return \"#FF1493\";\n//       case \"DKK\":\n//         return \"#1E90FF\";\n//       case \"HKD\":\n//         return \"#FF69B4\";\n//       case \"HUF\":\n//         return \"#8A2BE2\";\n//       case \"INR\":\n//         return \"#00BFFF\";\n//       case \"KRW\":\n//         return \"#7B68EE\";\n//       case \"NOK\":\n//         return \"#FFD700\";\n//       case \"NZD\":\n//         return \"#FF6347\";\n//       case \"PLN\":\n//         return \"#4682B4\";\n//       case \"SEK\":\n//         return \"#32CD32\";\n//       case \"SGD\":\n//         return \"#FFA07A\";\n//       case \"THB\":\n//         return \"#9400D3\";\n//       case \"TWD\":\n//         return \"#00FF00\";\n//       case \"ZAR\":\n//         return \"#FF00FF\";\n//       default:\n//         return \"#FF4500\";\n//     }\n//   };\n\n//   return (\n//     <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n//       <Topbar />\n//       <div className=\"selectors-container\">\n//         <Selector\n//           options={[\n//             { value: \"AUD\", label: \"AUD\" },\n//             { value: \"EUR\", label: \"EUR\" },\n//             { value: \"GBP\", label: \"GBP\" },\n//             { value: \"JPY\", label: \"JPY\" },\n//             { value: \"USD\", label: \"USD\" },\n//             { value: \"BRL\", label: \"BRL\" },\n//             { value: \"CAD\", label: \"CAD\" },\n//             { value: \"CHF\", label: \"CHF\" },\n//             { value: \"CLP\", label: \"CLP\" },\n//             { value: \"CNY\", label: \"CNY\" },\n//             { value: \"CZK\", label: \"CZK\" },\n//             { value: \"DKK\", label: \"DKK\" },\n//             { value: \"HKD\", label: \"HKD\" },\n//             { value: \"HUF\", label: \"HUF\" },\n//             { value: \"INR\", label: \"INR\" },\n//             { value: \"KRW\", label: \"KRW\" },\n//             { value: \"MXN\", label: \"MXN\" },\n//             { value: \"NOK\", label: \"NOK\" },\n//             { value: \"NZD\", label: \"NZD\" },\n//             { value: \"PLN\", label: \"PLN\" },\n//             { value: \"SEK\", label: \"SEK\" },\n//             { value: \"SGD\", label: \"SGD\" },\n//             { value: \"THB\", label: \"THB\" },\n//             { value: \"TWD\", label: \"TWD\" },\n//             { value: \"ZAR\", label: \"ZAR\" },\n//           ]}\n//           selectedCurrencies={selectedCurrencies}\n//           setSelectedCurrencies={setSelectedCurrencies}\n//         />\n//         <div className=\"date-picker\">\n//           <DatePicker\n//             selected={startDate}\n//             onChange={(date) => setStartDate(date)}\n//             selectsStart\n//             startDate={startDate}\n//             endDate={endDate}\n//             className=\"date-input\"\n//           />\n//           <DatePicker\n//             selected={endDate}\n//             onChange={(date) => setEndDate(date)}\n//             selectsEnd\n//             startDate={startDate}\n//             endDate={endDate}\n//             minDate={startDate}\n//             className=\"date-input\"\n//           />\n//         </div>\n//       </div>\n//       <div className=\"main-panel\">\n//         <HighchartsReact\n//           className=\"chart-actual\"\n//           highcharts={Highcharts}\n//           options={{\n//             chart: {\n//               type: \"line\",\n//               zoomType: \"x\",\n//               backgroundColor: {\n//                 linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n//                 stops: isDarkMode\n//                   ? [\n//                       [0, \"#2e2e2e\"],\n//                       [1, \"#1a1a1a\"],\n//                     ]\n//                   : [\n//                       [0, \"#ffffff\"],\n//                       [1, \"#f0f0f0\"],\n//                     ],\n//               },\n//               borderRadius: 10, // Rounded corners\n//               style: {\n//                 fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n//               },\n//               plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//               plotBorderWidth: 1,\n//               events: {\n//                 load: function () {\n//                   this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n//                 },\n//               },\n//               boost: {\n//                 useGPUTranslations: true,\n//                 usePreAllocated: true,\n//               },\n//             },\n//             title: {\n//               text: \"LCH Notional\",\n//               style: {\n//                 color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                 fontSize: \"22px\",\n//                 fontWeight: \"bold\",\n//               },\n//             },\n//             xAxis: {\n//               type: \"datetime\",\n//               title: {\n//                 text: \"Date\",\n//                 style: {\n//                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                   fontSize: \"14px\",\n//                   fontWeight: \"bold\",\n//                 },\n//               },\n//               lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//               tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//               labels: {\n//                 style: {\n//                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                   fontSize: \"12px\",\n//                 },\n//               },\n//             },\n//             yAxis: {\n//               title: {\n//                 text: \"Notional (USD)\",\n//                 style: {\n//                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                   fontSize: \"14px\",\n//                   fontWeight: \"bold\",\n//                 },\n//               },\n//               gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//               labels: {\n//                 style: {\n//                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                   fontSize: \"12px\",\n//                 },\n//               },\n//             },\n//             legend: {\n//               layout: \"horizontal\",\n//               align: \"center\",\n//               verticalAlign: \"bottom\",\n//               itemStyle: {\n//                 color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                 fontSize: \"14px\",\n//                 fontWeight: \"bold\",\n//               },\n//               itemHoverStyle: {\n//                 color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//               },\n//               itemHiddenStyle: {\n//                 color: isDarkMode ? \"#666666\" : \"#999999\",\n//               },\n//             },\n//             tooltip: {\n//               shared: true,\n//               backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n//               borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n//               style: {\n//                 color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//               },\n//               formatter: function () {\n//                 const points = this.points;\n//                 let targetValue = null;\n//                 let totalValue = null;\n\n//                 points.forEach((point) => {\n//                   if (point.series.name === \"Target\") {\n//                     targetValue = point.y;\n//                   }\n//                   if (point.series.name === \"Total\") {\n//                     totalValue = point.y;\n//                   }\n//                 });\n\n//                 if (targetValue !== null && totalValue !== null) {\n//                   const difference = (totalValue - targetValue).toFixed(2);\n//                   const totalBreakdown = selectedCurrencies\n//                     .map((currency) => {\n//                       const point = points.find((p) => p.series.name === currency.value);\n//                       return point\n//                         ? `${currency.value}: ${point.y.toFixed(2)}`\n//                         : `${currency.value}: N/A`;\n//                     })\n//                     .join(\"<br>\");\n\n//                   let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n//                   summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n//                   summaryHTML += `Difference: ${difference}<br><br>`;\n//                   summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n//                   latestSummaryRef.current = summaryHTML;\n\n//                   return points.reduce((s, point) => {\n//                     return (\n//                       s +\n//                       `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//                     );\n//                   }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n//                 }\n//                 return points.reduce((s, point) => {\n//                   return (\n//                     s +\n//                     `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//                   );\n//                 }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n//               },\n//             },\n//             series: getData(),\n//             navigation: {\n//               buttonOptions: {\n//                 enabled: true,\n//                 theme: {\n//                   fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//                   stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n//                   style: {\n//                     color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                   },\n//                 },\n//               },\n//             },\n//             exporting: {\n//               buttons: {\n//                 contextButton: {\n//                   symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                   theme: {\n//                     fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//                   },\n//                 },\n//               },\n//             },\n//           }}\n//           containerProps={{ className: \"chart-container\" }}\n//           updateArgs={[true, true, true]}\n//           ref={chartRef}\n//         />\n//         {compareWithTarget && (\n//           <div className=\"summary-box\">\n//             <h3>Summary</h3>\n//             <div dangerouslySetInnerHTML={{ __html: summary }} />\n//           </div>\n//         )}\n//         <div className=\"data-table-section\">\n//           <DataTable\n//             title=\"LCH Notional | Summary Table\"\n//             columns={[\n//               { name: \"Date\", selector: (row) => row.Date, sortable: true },\n//               { name: \"Target\", selector: (row) => row.Target, sortable: true },\n//               ...selectedCurrencies.map((currency) => ({\n//                 name: currency.label,\n//                 selector: (row) => row[currency.value],\n//                 sortable: true,\n//               })),\n//               { name: \"Total\", selector: (row) => row.Total, sortable: true },\n//             ]}\n//             data={filteredData.map((d) => {\n//               const rowData = {\n//                 Date: d.Date,\n//                 Target: d.Target,\n//                 Total: d.Total,\n//               };\n//               selectedCurrencies.forEach((currency) => {\n//                 rowData[currency.value] = d[currency.value];\n//               });\n//               return rowData;\n//             })}\n//             pagination\n//             highlightOnHover\n//             pointerOnHover\n//             customStyles={{\n//               header: {\n//                 style: {\n//                   fontSize: '22px',\n//                   fontWeight: 'bold',\n//                   color: 'var(--text-color)',\n//                   backgroundColor: 'var(--control-bg-color)',\n//                 },\n//               },\n//               rows: {\n//                 style: {\n//                   fontSize: '16px',\n//                   color: 'var(--text-color)',\n//                   backgroundColor: 'var(--input-bg-color)',\n//                   '&:not(:last-of-type)': {\n//                     borderBottomStyle: 'solid',\n//                     borderBottomWidth: '1px',\n//                     borderBottomColor: 'var(--control-bg-color)',\n//                   },\n//                 },\n//               },\n//               headCells: {\n//                 style: {\n//                   fontSize: '18px',\n//                   fontWeight: 'bold',\n//                   color: 'var(--text-color)',\n//                   backgroundColor: 'var(--control-bg-color)',\n//                 },\n//               },\n//               cells: {\n//                 style: {\n//                   fontSize: '16px',\n//                   color: 'var(--text-color)',\n//                   backgroundColor: 'var(--input-bg-color)',\n//                 },\n//               },\n//             }}\n//           />\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Graph;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport HighchartsBoost from \"highcharts/modules/boost\";\nimport HighchartsExporting from \"highcharts/modules/exporting\";\nimport HighchartsAnnotations from \"highcharts/modules/annotations\";\nimport HighchartsMore from \"highcharts/highcharts-more\";\nimport DataTable from \"react-data-table-component\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Topbar from \"./Topbar\";\nimport Selector from \"./Selector\";\nimport \"../Styles/Graph.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nHighchartsBoost(Highcharts);\nHighchartsExporting(Highcharts);\nHighchartsAnnotations(Highcharts);\nHighchartsMore(Highcharts);\nconst Graph = () => {\n  _s();\n  const [compareWithTarget, setCompareWithTarget] = useState(false);\n  const [selectedCurrencies, setSelectedCurrencies] = useState([{\n    value: \"AUD\",\n    label: \"AUD\"\n  }, {\n    value: \"EUR\",\n    label: \"EUR\"\n  }, {\n    value: \"GBP\",\n    label: \"GBP\"\n  }, {\n    value: \"JPY\",\n    label: \"JPY\"\n  }, {\n    value: \"USD\",\n    label: \"USD\"\n  }]);\n  const [summary, setSummary] = useState(\"\");\n  const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n  const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const latestSummaryRef = useRef(\"\");\n  const chartRef = useRef(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/xva\");\n        const result = await response.json();\n        setData(result);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  const getFilteredData = () => {\n    return data.filter(d => {\n      const date = new Date(d.Date).getTime();\n      return date >= startDate.getTime() && date <= endDate.getTime();\n    });\n  };\n  useEffect(() => {\n    if (!loading && data.length > 0) {\n      const updateSummary = () => {\n        if (summary !== latestSummaryRef.current) {\n          setSummary(latestSummaryRef.current);\n        }\n      };\n      const interval = setInterval(updateSummary, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [loading, data, summary]);\n  const filteredData = getFilteredData();\n  const totalLine = {\n    name: \"Total\",\n    data: filteredData.map(d => [new Date(d.Date).getTime(), d.Total]),\n    color: isDarkMode ? \"#007bff\" : \"#343a40\",\n    marker: {\n      enabled: false\n    },\n    zIndex: 1,\n    boostThreshold: 1\n  };\n  const shadeData = {\n    name: \"Shaded Area\",\n    data: filteredData.map(d => ({\n      x: new Date(d.Date).getTime(),\n      low: Math.min(d.Total, d.Target),\n      high: Math.max(d.Total, d.Target)\n    })),\n    type: \"arearange\",\n    lineWidth: 0,\n    linkedTo: \"Total\",\n    color: \"#2E8C39\",\n    fillOpacity: 0.3,\n    zIndex: 0,\n    marker: {\n      enabled: false\n    },\n    boostThreshold: 0,\n    boost: false\n  };\n  const getData = () => {\n    const compareData = [...selectedCurrencies.map(currency => ({\n      name: currency.value,\n      data: filteredData.map(d => [new Date(d.Date).getTime(), d[currency.value]]),\n      color: getCurrencyColor(currency.value),\n      marker: {\n        enabled: false\n      },\n      boostThreshold: 1\n    })), totalLine, {\n      name: \"Target\",\n      data: filteredData.map(d => [new Date(d.Date).getTime(), d.Target]),\n      color: \"#007bff\",\n      marker: {\n        enabled: false\n      },\n      zIndex: 1,\n      boostThreshold: 1\n    }, shadeData];\n    return compareWithTarget ? compareData : compareData.slice(0, -1);\n  };\n  const getCurrencyColor = currency => {\n    switch (currency) {\n      case \"AUD\":\n        return \"#FFD700\";\n      case \"EUR\":\n        return \"#FF6347\";\n      case \"GBP\":\n        return \"#4682B4\";\n      case \"JPY\":\n        return \"#32CD32\";\n      case \"USD\":\n        return \"#FFA07A\";\n      case \"BRL\":\n        return \"#9400D3\";\n      case \"CAD\":\n        return \"#00FF00\";\n      case \"CHF\":\n        return \"#FF00FF\";\n      case \"CLP\":\n        return \"#00FFFF\";\n      case \"CNY\":\n        return \"#FF4500\";\n      case \"CZK\":\n        return \"#FF1493\";\n      case \"DKK\":\n        return \"#1E90FF\";\n      case \"HKD\":\n        return \"#FF69B4\";\n      case \"HUF\":\n        return \"#8A2BE2\";\n      case \"INR\":\n        return \"#00BFFF\";\n      case \"KRW\":\n        return \"#7B68EE\";\n      case \"NOK\":\n        return \"#FFD700\";\n      case \"NZD\":\n        return \"#FF6347\";\n      case \"PLN\":\n        return \"#4682B4\";\n      case \"SEK\":\n        return \"#32CD32\";\n      case \"SGD\":\n        return \"#FFA07A\";\n      case \"THB\":\n        return \"#9400D3\";\n      case \"TWD\":\n        return \"#00FF00\";\n      case \"ZAR\":\n        return \"#FF00FF\";\n      default:\n        return \"#FF4500\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`,\n    children: [/*#__PURE__*/_jsxDEV(Topbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1281,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selectors-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"currency-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Select Currencies:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1284,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Selector, {\n          options: [{\n            value: \"AUD\",\n            label: \"AUD\"\n          }, {\n            value: \"EUR\",\n            label: \"EUR\"\n          }, {\n            value: \"GBP\",\n            label: \"GBP\"\n          }, {\n            value: \"JPY\",\n            label: \"JPY\"\n          }, {\n            value: \"USD\",\n            label: \"USD\"\n          }, {\n            value: \"BRL\",\n            label: \"BRL\"\n          }, {\n            value: \"CAD\",\n            label: \"CAD\"\n          }, {\n            value: \"CHF\",\n            label: \"CHF\"\n          }, {\n            value: \"CLP\",\n            label: \"CLP\"\n          }, {\n            value: \"CNY\",\n            label: \"CNY\"\n          }, {\n            value: \"CZK\",\n            label: \"CZK\"\n          }, {\n            value: \"DKK\",\n            label: \"DKK\"\n          }, {\n            value: \"HKD\",\n            label: \"HKD\"\n          }, {\n            value: \"HUF\",\n            label: \"HUF\"\n          }, {\n            value: \"INR\",\n            label: \"INR\"\n          }, {\n            value: \"KRW\",\n            label: \"KRW\"\n          }, {\n            value: \"MXN\",\n            label: \"MXN\"\n          }, {\n            value: \"NOK\",\n            label: \"NOK\"\n          }, {\n            value: \"NZD\",\n            label: \"NZD\"\n          }, {\n            value: \"PLN\",\n            label: \"PLN\"\n          }, {\n            value: \"SEK\",\n            label: \"SEK\"\n          }, {\n            value: \"SGD\",\n            label: \"SGD\"\n          }, {\n            value: \"THB\",\n            label: \"THB\"\n          }, {\n            value: \"TWD\",\n            label: \"TWD\"\n          }, {\n            value: \"ZAR\",\n            label: \"ZAR\"\n          }],\n          selectedCurrencies: selectedCurrencies,\n          setSelectedCurrencies: setSelectedCurrencies\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1285,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1283,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date-picker\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Select Date Range:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1318,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n          selected: startDate,\n          onChange: date => setStartDate(date),\n          selectsStart: true,\n          startDate: startDate,\n          endDate: endDate,\n          className: \"date-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1319,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n          selected: endDate,\n          onChange: date => setEndDate(date),\n          selectsEnd: true,\n          startDate: startDate,\n          endDate: endDate,\n          minDate: startDate,\n          className: \"date-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1327,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1317,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1282,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-panel\",\n      children: [/*#__PURE__*/_jsxDEV(HighchartsReact, {\n        className: \"chart-actual\",\n        highcharts: Highcharts,\n        options: {\n          chart: {\n            type: \"line\",\n            zoomType: \"x\",\n            backgroundColor: {\n              linearGradient: {\n                x1: 0,\n                y1: 0,\n                x2: 1,\n                y2: 1\n              },\n              stops: isDarkMode ? [[0, \"#2e2e2e\"], [1, \"#1a1a1a\"]] : [[0, \"#ffffff\"], [1, \"#f0f0f0\"]]\n            },\n            borderRadius: 10,\n            // Rounded corners\n            style: {\n              fontFamily: \"Helvetica, Arial, sans-serif\" // Font style for the chart\n            },\n            plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n            plotBorderWidth: 1,\n            events: {\n              load: function () {\n                this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n              }\n            },\n            boost: {\n              useGPUTranslations: true,\n              usePreAllocated: true\n            }\n          },\n          title: {\n            text: \"LCH Notional\",\n            style: {\n              color: isDarkMode ? \"#ffffff\" : \"#000000\",\n              fontSize: \"22px\",\n              fontWeight: \"bold\"\n            }\n          },\n          xAxis: {\n            type: \"datetime\",\n            title: {\n              text: \"Date\",\n              style: {\n                color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                fontSize: \"14px\",\n                fontWeight: \"bold\"\n              }\n            },\n            lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n            tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n            labels: {\n              style: {\n                color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                fontSize: \"12px\"\n              }\n            }\n          },\n          yAxis: {\n            title: {\n              text: \"Notional (USD)\",\n              style: {\n                color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                fontSize: \"14px\",\n                fontWeight: \"bold\"\n              }\n            },\n            gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n            labels: {\n              style: {\n                color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                fontSize: \"12px\"\n              }\n            }\n          },\n          legend: {\n            layout: \"horizontal\",\n            align: \"center\",\n            verticalAlign: \"bottom\",\n            itemStyle: {\n              color: isDarkMode ? \"#ffffff\" : \"#000000\",\n              fontSize: \"14px\",\n              fontWeight: \"bold\"\n            },\n            itemHoverStyle: {\n              color: isDarkMode ? \"#cccccc\" : \"#000000\"\n            },\n            itemHiddenStyle: {\n              color: isDarkMode ? \"#666666\" : \"#999999\"\n            }\n          },\n          tooltip: {\n            shared: true,\n            backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n            borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n            style: {\n              color: isDarkMode ? \"#ffffff\" : \"#000000\"\n            },\n            formatter: function () {\n              const points = this.points;\n              let targetValue = null;\n              let totalValue = null;\n              points.forEach(point => {\n                if (point.series.name === \"Target\") {\n                  targetValue = point.y;\n                }\n                if (point.series.name === \"Total\") {\n                  totalValue = point.y;\n                }\n              });\n              if (targetValue !== null && totalValue !== null) {\n                const difference = (totalValue - targetValue).toFixed(2);\n                const totalBreakdown = selectedCurrencies.map(currency => {\n                  const point = points.find(p => p.series.name === currency.value);\n                  return point ? `${currency.value}: ${point.y.toFixed(2)}` : `${currency.value}: N/A`;\n                }).join(\"<br>\");\n                let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n                summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n                summaryHTML += `Difference: ${difference}<br><br>`;\n                summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n                latestSummaryRef.current = summaryHTML;\n                return points.reduce((s, point) => {\n                  return s + `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`;\n                }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n              }\n              return points.reduce((s, point) => {\n                return s + `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`;\n              }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n            }\n          },\n          series: getData(),\n          navigation: {\n            buttonOptions: {\n              enabled: true,\n              theme: {\n                fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n                stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n                style: {\n                  color: isDarkMode ? \"#ffffff\" : \"#000000\"\n                }\n              }\n            }\n          },\n          exporting: {\n            buttons: {\n              contextButton: {\n                symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n                theme: {\n                  fill: isDarkMode ? \"#444444\" : \"#f0f0f0\"\n                }\n              }\n            }\n          }\n        },\n        containerProps: {\n          className: \"chart-container\"\n        },\n        updateArgs: [true, true, true],\n        ref: chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1339,\n        columnNumber: 9\n      }, this), compareWithTarget && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Summary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1518,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: summary\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1519,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1517,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"data-table-section\",\n        children: /*#__PURE__*/_jsxDEV(DataTable, {\n          title: \"LCH Notional | Summary Table\",\n          columns: [{\n            name: \"Date\",\n            selector: row => row.Date,\n            sortable: true\n          }, {\n            name: \"Target\",\n            selector: row => row.Target,\n            sortable: true\n          }, ...selectedCurrencies.map(currency => ({\n            name: currency.label,\n            selector: row => row[currency.value],\n            sortable: true\n          })), {\n            name: \"Total\",\n            selector: row => row.Total,\n            sortable: true\n          }],\n          data: filteredData.map(d => {\n            const rowData = {\n              Date: d.Date,\n              Target: d.Target,\n              Total: d.Total\n            };\n            selectedCurrencies.forEach(currency => {\n              rowData[currency.value] = d[currency.value];\n            });\n            return rowData;\n          }),\n          pagination: true,\n          highlightOnHover: true,\n          pointerOnHover: true,\n          customStyles: {\n            header: {\n              style: {\n                fontSize: '22px',\n                fontWeight: 'bold',\n                color: 'var(--text-color)',\n                backgroundColor: 'var(--control-bg-color)'\n              }\n            },\n            rows: {\n              style: {\n                fontSize: '16px',\n                color: 'var(--text-color)',\n                backgroundColor: 'var(--input-bg-color)',\n                '&:not(:last-of-type)': {\n                  borderBottomStyle: 'solid',\n                  borderBottomWidth: '1px',\n                  borderBottomColor: 'var(--control-bg-color)'\n                }\n              }\n            },\n            headCells: {\n              style: {\n                fontSize: '18px',\n                fontWeight: 'bold',\n                color: 'var(--text-color)',\n                backgroundColor: 'var(--control-bg-color)'\n              }\n            },\n            cells: {\n              style: {\n                fontSize: '16px',\n                color: 'var(--text-color)',\n                backgroundColor: 'var(--input-bg-color)'\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1523,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1522,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1338,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1280,\n    columnNumber: 5\n  }, this);\n};\n_s(Graph, \"gBkqWAJVnIPxqE0N3+Gh2rjUJfE=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Highcharts","HighchartsReact","HighchartsBoost","HighchartsExporting","HighchartsAnnotations","HighchartsMore","DataTable","DatePicker","Topbar","Selector","jsxDEV","_jsxDEV","Graph","_s","compareWithTarget","setCompareWithTarget","selectedCurrencies","setSelectedCurrencies","value","label","summary","setSummary","startDate","setStartDate","Date","endDate","setEndDate","data","setData","loading","setLoading","isDarkMode","setIsDarkMode","latestSummaryRef","chartRef","fetchData","response","fetch","result","json","error","console","getFilteredData","filter","d","date","getTime","length","updateSummary","current","interval","setInterval","clearInterval","filteredData","totalLine","name","map","Total","color","marker","enabled","zIndex","boostThreshold","shadeData","x","low","Math","min","Target","high","max","type","lineWidth","linkedTo","fillOpacity","boost","getData","compareData","currency","getCurrencyColor","slice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","selected","onChange","selectsStart","selectsEnd","minDate","highcharts","chart","zoomType","backgroundColor","linearGradient","x1","y1","x2","y2","stops","borderRadius","style","fontFamily","plotBorderColor","plotBorderWidth","events","load","xAxis","setExtremes","useGPUTranslations","usePreAllocated","title","text","fontSize","fontWeight","lineColor","tickColor","labels","yAxis","gridLineColor","legend","layout","align","verticalAlign","itemStyle","itemHoverStyle","itemHiddenStyle","tooltip","shared","borderColor","formatter","points","targetValue","totalValue","forEach","point","series","y","difference","toFixed","totalBreakdown","find","p","join","summaryHTML","reduce","s","dateFormat","navigation","buttonOptions","theme","fill","stroke","exporting","buttons","contextButton","symbolStroke","containerProps","updateArgs","ref","dangerouslySetInnerHTML","__html","columns","selector","row","sortable","rowData","pagination","highlightOnHover","pointerOnHover","customStyles","header","rows","borderBottomStyle","borderBottomWidth","borderBottomColor","headCells","cells","_c","$RefreshReg$"],"sources":["/Users/harshmishra/Desktop/dashboard/frontend/src/Components/Graph.jsx"],"sourcesContent":["// // import React, { useState, useEffect, useRef } from \"react\";\n// // import Highcharts from \"highcharts\";\n// // import HighchartsReact from \"highcharts-react-official\";\n// // import HighchartsBoost from \"highcharts/modules/boost\";\n// // import HighchartsExporting from \"highcharts/modules/exporting\";\n// // import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// // import HighchartsMore from \"highcharts/highcharts-more\";\n// // import DataTable from \"react-data-table-component\";\n// // import DatePicker from \"react-datepicker\";\n// // import \"react-datepicker/dist/react-datepicker.css\";\n// // import Topbar from \"./Topbar\";\n// // import \"../Styles/Graph.css\";\n// // import Selector from \"./Selector\";  // Ensure to import the new component\n\n// // HighchartsBoost(Highcharts);\n// // HighchartsExporting(Highcharts);\n// // HighchartsAnnotations(Highcharts);\n// // HighchartsMore(Highcharts);\n\n// // const Graph = () => {\n// //   const [compareWithTarget, setCompareWithTarget] = useState(false);\n// //   const [selectedCurrencies, setSelectedCurrencies] = useState([\n// //     { value: \"AUD\", label: \"AUD\" },\n// //     { value: \"EUR\", label: \"EUR\" },\n// //     { value: \"GBP\", label: \"GBP\" },\n// //     { value: \"JPY\", label: \"JPY\" },\n// //     { value: \"USD\", label: \"USD\" },\n// //   ]);\n// //   const [summary, setSummary] = useState(\"\");\n// //   const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n// //   const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n// //   const [data, setData] = useState([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [isDarkMode, setIsDarkMode] = useState(true);\n// //   const latestSummaryRef = useRef(\"\");\n// //   const chartRef = useRef(null);\n\n// //   useEffect(() => {\n// //     const fetchData = async () => {\n// //       try {\n// //         const response = await fetch(\"http://localhost:5000/xva\");\n// //         const result = await response.json();\n// //         setData(result);\n// //         setLoading(false);\n// //       } catch (error) {\n// //         console.error('Error fetching data:', error);\n// //         setLoading(false);\n// //       }\n// //     };\n// //     fetchData();\n// //   }, []);\n\n// //   const getFilteredData = () => {\n// //     return data.filter((d) => {\n// //       const date = new Date(d.Date).getTime();\n// //       return date >= startDate.getTime() && date <= endDate.getTime();\n// //     });\n// //   };\n\n// //   const filteredData = getFilteredData();\n\n// //   useEffect(() => {\n// //     if (!loading && data.length > 0) {\n// //       const updateSummary = () => {\n// //         if (summary !== latestSummaryRef.current) {\n// //           setSummary(latestSummaryRef.current);\n// //         }\n// //       };\n// //       const interval = setInterval(updateSummary, 1000);\n// //       return () => clearInterval(interval);\n// //     }\n// //   }, [loading, data, summary]);\n\n// //   const totalLine = {\n// //     name: \"Total\",\n// //     data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n// //     color: isDarkMode ? \"#007bff\" : \"#343a40\",\n// //     marker: { enabled: false },\n// //     zIndex: 1,\n// //     boostThreshold: 1,\n// //   };\n\n// //   const shadeData = {\n// //     name: \"Shaded Area\",\n// //     data: filteredData.map((d) => ({\n// //       x: new Date(d.Date).getTime(),\n// //       low: Math.min(d.Total, d.Target),\n// //       high: Math.max(d.Total, d.Target),\n// //     })),\n// //     type: \"arearange\",\n// //     lineWidth: 0,\n// //     linkedTo: \"Total\",\n// //     color: \"#2E8C39\",\n// //     fillOpacity: 0.3,\n// //     zIndex: 0,\n// //     marker: { enabled: false },\n// //     boostThreshold: 0,\n// //     boost: false,\n// //   };\n\n// //   const handleCurrencyChange = (selectedOptions) => {\n// //     setSelectedCurrencies(selectedOptions);\n// //   };\n\n// //   const getData = () => {\n// //     if (!filteredData || filteredData.length === 0) return [];\n\n// //     const compareData = [\n// //       ...selectedCurrencies.map((currency) => ({\n// //         name: currency.value,\n// //         data: filteredData.map((d) => [\n// //           new Date(d.Date).getTime(),\n// //           d[currency.value],\n// //         ]),\n// //         color: getCurrencyColor(currency.value),\n// //         marker: { enabled: false },\n// //         boostThreshold: 1,\n// //       })),\n// //       totalLine,\n// //       {\n// //         name: \"Target\",\n// //         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n// //         color: \"#007bff\",\n// //         marker: { enabled: false },\n// //         zIndex: 1,\n// //         boostThreshold: 1,\n// //       },\n// //       shadeData,\n// //     ];\n// //     return compareWithTarget ? compareData : compareData.slice(0, -1);\n// //   };\n\n// //   const getCurrencyColor = (currency) => {\n// //     switch (currency) {\n// //       case \"AUD\":\n// //         return \"#FFD700\";\n// //       case \"EUR\":\n// //         return \"#FF6347\";\n// //       case \"GBP\":\n// //         return \"#4682B4\";\n// //       case \"JPY\":\n// //         return \"#32CD32\";\n// //       case \"USD\":\n// //         return \"#FFA07A\";\n// //       case \"BRL\":\n// //         return \"#9400D3\";\n// //       case \"CAD\":\n// //         return \"#00FF00\";\n// //       case \"CHF\":\n// //         return \"#FF00FF\";\n// //       case \"CLP\":\n// //         return \"#00FFFF\";\n// //       case \"CNY\":\n// //         return \"#FF4500\";\n// //       case \"CZK\":\n// //         return \"#FF1493\";\n// //       case \"DKK\":\n// //         return \"#1E90FF\";\n// //       case \"HKD\":\n// //         return \"#FF69B4\";\n// //       case \"HUF\":\n// //         return \"#8A2BE2\";\n// //       case \"INR\":\n// //         return \"#00BFFF\";\n// //       case \"KRW\":\n// //         return \"#7B68EE\";\n// //       case \"MXN\":\n// //         return \"#F4C145\";\n// //       case \"NOK\":\n// //         return \"#FFD700\";\n// //       case \"NZD\":\n// //         return \"#FF6347\";\n// //       case \"PLN\":\n// //         return \"#4682B4\";\n// //       case \"SEK\":\n// //         return \"#32CD32\";\n// //       case \"SGD\":\n// //         return \"#FFA07A\";\n// //       case \"THB\":\n// //         return \"#9400D3\";\n// //       case \"TWD\":\n// //         return \"#00FF00\";\n// //       case \"ZAR\":\n// //         return \"#FF00FF\";\n// //       default:\n// //         return \"#FF4500\";\n// //     }\n// //   };\n\n// //   const getColumns = () => {\n// //     const baseColumns = [\n// //       { name: \"Date\", selector: (row) => row.Date, sortable: true },\n// //       { name: \"Target\", selector: (row) => row.Target, sortable: true },\n// //     ];\n\n// //     const currencyColumns = selectedCurrencies.map((currency) => ({\n// //       name: currency.label,\n// //       selector: (row) => row[currency.value],\n// //       sortable: true,\n// //     }));\n\n// //     return [\n// //       ...baseColumns,\n// //       ...currencyColumns,\n// //       { name: \"Total\", selector: (row) => row.Total, sortable: true },\n// //     ];\n// //   };\n\n// //   const getFilteredTableData = () => {\n// //     return filteredData.map((d) => {\n// //       const rowData = {\n// //         Date: d.Date,\n// //         Target: d.Target,\n// //         Total: d.Total,\n// //       };\n// //       selectedCurrencies.forEach((currency) => {\n// //         rowData[currency.value] = d[currency.value];\n// //       });\n// //       return rowData;\n// //     });\n// //   };\n\n// //   const handleTooltipFormatter = function () {\n// //     const points = this.points;\n// //     let targetValue = null;\n// //     let totalValue = null;\n\n// //     points.forEach((point) => {\n// //       if (point.series.name === \"Target\") {\n// //         targetValue = point.y;\n// //       }\n// //       if (point.series.name === \"Total\") {\n// //         totalValue = point.y;\n// //       }\n// //     });\n\n// //     if (targetValue !== null && totalValue !== null) {\n// //       const difference = (totalValue - targetValue).toFixed(2);\n// //       const totalBreakdown = selectedCurrencies\n// //         .map((currency) => {\n// //           const point = points.find((p) => p.series.name === currency.value);\n// //           return point\n// //             ? `${currency.value}: ${point.y.toFixed(2)}`\n// //             : `${currency.value}: N/A`;\n// //         })\n// //         .join(\"<br>\");\n\n// //       let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n// //       summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n// //       summaryHTML += `Difference: ${difference}<br><br>`;\n// //       summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n\n// //       latestSummaryRef.current = summaryHTML;\n\n// //       return points.reduce((s, point) => {\n// //         return (\n// //           s +\n// //           `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// //         );\n// //       }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// //     }\n// //     return points.reduce((s, point) => {\n// //       return (\n// //         s +\n// //         `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n// //       );\n// //     }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n// //   };\n\n// //   const options = {\n// //     chart: {\n// //       type: \"line\",\n// //       zoomType: \"x\",\n// //       backgroundColor: {\n// //         linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n// //         stops: isDarkMode\n// //           ? [\n// //               [0, \"#2e2e2e\"],\n// //               [1, \"#1a1a1a\"],\n// //             ]\n// //           : [\n// //               [0, \"#ffffff\"],\n// //               [1, \"#f0f0f0\"],\n// //             ],\n// //       },\n// //       borderRadius: 10, // Rounded corners\n// //       style: {\n// //         fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n// //       },\n// //       plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //       plotBorderWidth: 1,\n// //       events: {\n// //         load: function () {\n// //           this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n// //         },\n// //       },\n// //       boost: {\n// //         useGPUTranslations: true,\n// //         usePreAllocated: true,\n// //       },\n// //     },\n// //     title: {\n// //       text: \"LCH Notional\",\n// //       style: {\n// //         color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //         fontSize: \"22px\",\n// //         fontWeight: \"bold\",\n// //       },\n// //     },\n// //     xAxis: {\n// //       type: \"datetime\",\n// //       title: {\n// //         text: \"Date\",\n// //         style: {\n// //           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //           fontSize: \"14px\",\n// //           fontWeight: \"bold\",\n// //         },\n// //       },\n// //       lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //       tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //       labels: {\n// //         style: {\n// //           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //           fontSize: \"12px\",\n// //         },\n// //       },\n// //     },\n// //     yAxis: {\n// //       title: {\n// //         text: \"Notional (USD)\",\n// //         style: {\n// //           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //           fontSize: \"14px\",\n// //           fontWeight: \"bold\",\n// //         },\n// //       },\n// //       gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n// //       labels: {\n// //         style: {\n// //           color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //           fontSize: \"12px\",\n// //         },\n// //       },\n// //     },\n// //     legend: {\n// //       layout: \"horizontal\",\n// //       align: \"center\",\n// //       verticalAlign: \"bottom\",\n// //       itemStyle: {\n// //         color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //         fontSize: \"14px\",\n// //         fontWeight: \"bold\",\n// //       },\n// //       itemHoverStyle: {\n// //         color: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //       },\n// //       itemHiddenStyle: {\n// //         color: isDarkMode ? \"#666666\" : \"#999999\",\n// //       },\n// //     },\n// //     tooltip: {\n// //       shared: true,\n// //       backgroundColor: isDarkMode\n// //         ? \"rgba(33, 33, 33, 0.85)\"\n// //         : \"rgba(255, 255, 255, 0.85)\",\n// //       borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n// //       style: {\n// //         color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //       },\n// //       formatter: handleTooltipFormatter,\n// //     },\n// //     series: getData(),\n// //     navigation: {\n// //       buttonOptions: {\n// //         enabled: true,\n// //         theme: {\n// //           fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// //           stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n// //           style: {\n// //             color: isDarkMode ? \"#ffffff\" : \"#000000\",\n// //           },\n// //         },\n// //       },\n// //     },\n// //     exporting: {\n// //       buttons: {\n// //         contextButton: {\n// //           symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n// //           theme: {\n// //             fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n// //           },\n// //         },\n// //       },\n// //     },\n// //   };\n\n// //   useEffect(() => {\n// //     if (!loading && data.length > 0) {\n// //       Highcharts.charts.forEach((chart) => {\n// //         if (chart) {\n// //           chart.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n// //           chart.series.forEach((series) => {\n// //             const seriesData = getData().find((s) => s.name === series.name);\n// //             if (seriesData) {\n// //               series.setData(seriesData.data);\n// //             }\n// //           });\n// //         }\n// //       });\n// //     }\n// //   }, [startDate, endDate, selectedCurrencies, loading, data, isDarkMode]);\n\n// //   return (\n// //     <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n// //       <div className=\"app-container\">\n// //         <Topbar />\n// //         <div className=\"floating-box-container\">\n// //           <div className=\"translucent-box\">\n// //             <div className=\"control-group\">\n// //               <div className=\"currency-selector\">\n// //                 <h2>Select Currencies to Include in Total:</h2>\n// //                 <Selector\n// //                   options={[\n// //                     { value: \"AUD\", label: \"AUD\" },\n// //                     { value: \"EUR\", label: \"EUR\" },\n// //                     { value: \"GBP\", label: \"GBP\" },\n// //                     { value: \"JPY\", label: \"JPY\" },\n// //                     { value: \"USD\", label: \"USD\" },\n// //                     { value: \"BRL\", label: \"BRL\" },\n// //                     { value: \"CAD\", label: \"CAD\" },\n// //                     { value: \"CHF\", label: \"CHF\" },\n// //                     { value: \"CLP\", label: \"CLP\" },\n// //                     { value: \"CNY\", label: \"CNY\" },\n// //                     { value: \"CZK\", label: \"CZK\" },\n// //                     { value: \"DKK\", label: \"DKK\" },\n// //                     { value: \"HKD\", label: \"HKD\" },\n// //                     { value: \"HUF\", label: \"HUF\" },\n// //                     { value: \"INR\", label: \"INR\" },\n// //                     { value: \"KRW\", label: \"KRW\" },\n// //                     { value: \"MXN\", label: \"MXN\" },\n// //                     { value: \"NOK\", label: \"NOK\" },\n// //                     { value: \"NZD\", label: \"NZD\" },\n// //                     { value: \"PLN\", label: \"PLN\" },\n// //                     { value: \"SEK\", label: \"SEK\" },\n// //                     { value: \"SGD\", label: \"SGD\" },\n// //                     { value: \"THB\", label: \"THB\" },\n// //                     { value: \"TWD\", label: \"TWD\" },\n// //                     { value: \"ZAR\", label: \"ZAR\" },\n// //                   ]}\n// //                   selectedCurrencies={selectedCurrencies}\n// //                   setSelectedCurrencies={handleCurrencyChange}\n// //                 />\n// //               </div>\n// //             </div>\n\n// //             <div className=\"control-group\">\n// //               <div className=\"date-picker\">\n// //                 <h2>Select a date range</h2>\n// //                 <DatePicker\n// //                   selected={startDate}\n// //                   onChange={(date) => setStartDate(date)}\n// //                   selectsStart\n// //                   startDate={startDate}\n// //                   endDate={endDate}\n// //                   className=\"date-input\"\n// //                 />\n// //                 <DatePicker\n// //                   selected={endDate}\n// //                   onChange={(date) => setEndDate(date)}\n// //                   selectsEnd\n// //                   startDate={startDate}\n// //                   endDate={endDate}\n// //                   minDate={startDate}\n// //                   className=\"date-input\"\n// //                 />\n// //               </div>\n// //             </div>\n// //           </div>\n// //           <div className=\"translucent-box2\">\n// //             <h2>Graph Options</h2>\n// //             <button\n// //               onClick={() => setCompareWithTarget(!compareWithTarget)}\n// //               className=\"toggle-button\"\n// //             >\n// //               {compareWithTarget\n// //                 ? \"Disable Compare with Target\"\n// //                 : \"Enable Compare with Target\"}\n// //             </button>\n\n// //             <div className=\"download-section\">\n// //               <button className=\"toggle-button\">Download</button>\n// //               <div className=\"dropdown-content\">\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"image/png\" })\n// //                   }\n// //                 >\n// //                   PNG\n// //                 </button>\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"image/jpeg\" })\n// //                   }\n// //                 >\n// //                   JPEG\n// //                 </button>\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"application/pdf\" })\n// //                   }\n// //                 >\n// //                   PDF\n// //                 </button>\n// //                 <button\n// //                   onClick={() =>\n// //                     chartRef.current.chart.exportChart({ type: \"image/svg+xml\" })\n// //                   }\n// //                 >\n// //                   SVG\n// //                 </button>\n// //               </div>\n// //             </div>\n// //             <button\n// //               onClick={() => setIsDarkMode(!isDarkMode)}\n// //               className=\"toggle-button\"\n// //             >\n// //               Toggle Dark Mode\n// //             </button>\n// //           </div>\n// //         </div>\n// //         <div className=\"main-panel\">\n// //           <HighchartsReact\n// //             className=\"chart-actual\"\n// //             highcharts={Highcharts}\n// //             options={options}\n// //             containerProps={{ className: \"chart-container\" }}\n// //             updateArgs={[true, true, true]}\n// //             ref={chartRef}\n// //           />\n// //           {compareWithTarget && (\n// //             <div className=\"summary-box\">\n// //               <h3>Summary</h3>\n// //               <div dangerouslySetInnerHTML={{ __html: summary }} />\n// //             </div>\n// //           )}\n\n// //           <div className=\"data-table-section\">\n// //             <DataTable\n// //               title=\"LCH Notional | Summary Table\"\n// //               columns={getColumns()}\n// //               data={getFilteredTableData()}\n// //               pagination\n// //               highlightOnHover\n// //               pointerOnHover\n// //               customStyles={customTableStyles}\n// //             />\n// //           </div>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // };\n\n// // const customTableStyles = {\n// //   header: {\n// //     style: {\n// //       fontSize: '22px',\n// //       fontWeight: 'bold',\n// //       color: 'var(--text-color)',\n// //       backgroundColor: 'var(--control-bg-color)',\n// //     },\n// //   },\n// //   rows: {\n// //     style: {\n// //       fontSize: '16px',\n// //       color: 'var(--text-color)',\n// //       backgroundColor: 'var(--input-bg-color)',\n// //       '&:not(:last-of-type)': {\n// //         borderBottomStyle: 'solid',\n// //         borderBottomWidth: '1px',\n// //         borderBottomColor: 'var(--control-bg-color)',\n// //       },\n// //     },\n// //   },\n// //   headCells: {\n// //     style: {\n// //       fontSize: '18px',\n// //       fontWeight: 'bold',\n// //       color: 'var(--text-color)',\n// //       backgroundColor: 'var(--control-bg-color)',\n// //     },\n// //   },\n// //   cells: {\n// //     style: {\n// //       fontSize: '16px',\n// //       color: 'var(--text-color)',\n// //       backgroundColor: 'var(--input-bg-color)',\n// //     },\n// //   },\n// // };\n\n// // export default Graph;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n// import Highcharts from \"highcharts\";\n// import HighchartsReact from \"highcharts-react-official\";\n// import HighchartsBoost from \"highcharts/modules/boost\";\n// import HighchartsExporting from \"highcharts/modules/exporting\";\n// import HighchartsAnnotations from \"highcharts/modules/annotations\";\n// import HighchartsMore from \"highcharts/highcharts-more\";\n// import DataTable from \"react-data-table-component\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import Topbar from \"./Topbar\";\n// import Selector from \"./Selector\";\n// import \"../Styles/Graph.css\";\n\n// HighchartsBoost(Highcharts);\n// HighchartsExporting(Highcharts);\n// HighchartsAnnotations(Highcharts);\n// HighchartsMore(Highcharts);\n\n// const Graph = () => {\n//   const [compareWithTarget, setCompareWithTarget] = useState(false);\n//   const [selectedCurrencies, setSelectedCurrencies] = useState([\n//     { value: \"AUD\", label: \"AUD\" },\n//     { value: \"EUR\", label: \"EUR\" },\n//     { value: \"GBP\", label: \"GBP\" },\n//     { value: \"JPY\", label: \"JPY\" },\n//     { value: \"USD\", label: \"USD\" }\n//   ]);\n//   const [summary, setSummary] = useState(\"\");\n//   const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n//   const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n//   const [data, setData] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [isDarkMode, setIsDarkMode] = useState(true);\n//   const latestSummaryRef = useRef(\"\");\n//   const chartRef = useRef(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"http://localhost:5000/xva\");\n//         const result = await response.json();\n//         setData(result);\n//         setLoading(false);\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//         setLoading(false);\n//       }\n//     };\n//     fetchData();\n//   }, []);\n\n//   const getFilteredData = () => {\n//     return data.filter((d) => {\n//       const date = new Date(d.Date).getTime();\n//       return date >= startDate.getTime() && date <= endDate.getTime();\n//     });\n//   };\n\n//   useEffect(() => {\n//     if (!loading && data.length > 0) {\n//       const updateSummary = () => {\n//         if (summary !== latestSummaryRef.current) {\n//           setSummary(latestSummaryRef.current);\n//         }\n//       };\n//       const interval = setInterval(updateSummary, 1000);\n//       return () => clearInterval(interval);\n//     }\n//   }, [loading, data, summary]);\n\n//   const filteredData = getFilteredData();\n\n//   const totalLine = {\n//     name: \"Total\",\n//     data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n//     color: isDarkMode ? \"#007bff\" : \"#343a40\",\n//     marker: { enabled: false },\n//     zIndex: 1,\n//     boostThreshold: 1,\n//   };\n\n//   const shadeData = {\n//     name: \"Shaded Area\",\n//     data: filteredData.map((d) => ({\n//       x: new Date(d.Date).getTime(),\n//       low: Math.min(d.Total, d.Target),\n//       high: Math.max(d.Total, d.Target),\n//     })),\n//     type: \"arearange\",\n//     lineWidth: 0,\n//     linkedTo: \"Total\",\n//     color: \"#2E8C39\",\n//     fillOpacity: 0.3,\n//     zIndex: 0,\n//     marker: { enabled: false },\n//     boostThreshold: 0,\n//     boost: false,\n//   };\n\n//   const getData = () => {\n//     const compareData = [\n//       ...selectedCurrencies.map((currency) => ({\n//         name: currency.value,\n//         data: filteredData.map((d) => [\n//           new Date(d.Date).getTime(),\n//           d[currency.value],\n//         ]),\n//         color: getCurrencyColor(currency.value),\n//         marker: { enabled: false },\n//         boostThreshold: 1,\n//       })),\n//       totalLine,\n//       {\n//         name: \"Target\",\n//         data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n//         color: \"#007bff\",\n//         marker: { enabled: false },\n//         zIndex: 1,\n//         boostThreshold: 1,\n//       },\n//       shadeData,\n//     ];\n//     return compareWithTarget ? compareData : compareData.slice(0, -1);\n//   };\n\n//   const getCurrencyColor = (currency) => {\n//     switch (currency) {\n//       case \"AUD\":\n//         return \"#FFD700\";\n//       case \"EUR\":\n//         return \"#FF6347\";\n//       case \"GBP\":\n//         return \"#4682B4\";\n//       case \"JPY\":\n//         return \"#32CD32\";\n//       case \"USD\":\n//         return \"#FFA07A\";\n//       case \"BRL\":\n//         return \"#9400D3\";\n//       case \"CAD\":\n//         return \"#00FF00\";\n//       case \"CHF\":\n//         return \"#FF00FF\";\n//       case \"CL\":\n//         return \"#00FFFF\";\n//       case \"CNY\":\n//         return \"#FF4500\";\n//       case \"CZK\":\n//         return \"#FF1493\";\n//       case \"DKK\":\n//         return \"#1E90FF\";\n//       case \"HKD\":\n//         return \"#FF69B4\";\n//       case \"HUF\":\n//         return \"#8A2BE2\";\n//       case \"INR\":\n//         return \"#00BFFF\";\n//       case \"KRW\":\n//         return \"#7B68EE\";\n//       case \"NOK\":\n//         return \"#FFD700\";\n//       case \"NZD\":\n//         return \"#FF6347\";\n//       case \"PLN\":\n//         return \"#4682B4\";\n//       case \"SEK\":\n//         return \"#32CD32\";\n//       case \"SGD\":\n//         return \"#FFA07A\";\n//       case \"THB\":\n//         return \"#9400D3\";\n//       case \"TWD\":\n//         return \"#00FF00\";\n//       case \"ZAR\":\n//         return \"#FF00FF\";\n//       default:\n//         return \"#FF4500\";\n//     }\n//   };\n\n//   return (\n//     <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n//       <Topbar />\n//       <div className=\"selectors-container\">\n//         <Selector\n//           options={[\n//             { value: \"AUD\", label: \"AUD\" },\n//             { value: \"EUR\", label: \"EUR\" },\n//             { value: \"GBP\", label: \"GBP\" },\n//             { value: \"JPY\", label: \"JPY\" },\n//             { value: \"USD\", label: \"USD\" },\n//             { value: \"BRL\", label: \"BRL\" },\n//             { value: \"CAD\", label: \"CAD\" },\n//             { value: \"CHF\", label: \"CHF\" },\n//             { value: \"CLP\", label: \"CLP\" },\n//             { value: \"CNY\", label: \"CNY\" },\n//             { value: \"CZK\", label: \"CZK\" },\n//             { value: \"DKK\", label: \"DKK\" },\n//             { value: \"HKD\", label: \"HKD\" },\n//             { value: \"HUF\", label: \"HUF\" },\n//             { value: \"INR\", label: \"INR\" },\n//             { value: \"KRW\", label: \"KRW\" },\n//             { value: \"MXN\", label: \"MXN\" },\n//             { value: \"NOK\", label: \"NOK\" },\n//             { value: \"NZD\", label: \"NZD\" },\n//             { value: \"PLN\", label: \"PLN\" },\n//             { value: \"SEK\", label: \"SEK\" },\n//             { value: \"SGD\", label: \"SGD\" },\n//             { value: \"THB\", label: \"THB\" },\n//             { value: \"TWD\", label: \"TWD\" },\n//             { value: \"ZAR\", label: \"ZAR\" },\n//           ]}\n//           selectedCurrencies={selectedCurrencies}\n//           setSelectedCurrencies={setSelectedCurrencies}\n//         />\n//         <div className=\"date-picker\">\n//           <DatePicker\n//             selected={startDate}\n//             onChange={(date) => setStartDate(date)}\n//             selectsStart\n//             startDate={startDate}\n//             endDate={endDate}\n//             className=\"date-input\"\n//           />\n//           <DatePicker\n//             selected={endDate}\n//             onChange={(date) => setEndDate(date)}\n//             selectsEnd\n//             startDate={startDate}\n//             endDate={endDate}\n//             minDate={startDate}\n//             className=\"date-input\"\n//           />\n//         </div>\n//       </div>\n//       <div className=\"main-panel\">\n//         <HighchartsReact\n//           className=\"chart-actual\"\n//           highcharts={Highcharts}\n//           options={{\n//             chart: {\n//               type: \"line\",\n//               zoomType: \"x\",\n//               backgroundColor: {\n//                 linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n//                 stops: isDarkMode\n//                   ? [\n//                       [0, \"#2e2e2e\"],\n//                       [1, \"#1a1a1a\"],\n//                     ]\n//                   : [\n//                       [0, \"#ffffff\"],\n//                       [1, \"#f0f0f0\"],\n//                     ],\n//               },\n//               borderRadius: 10, // Rounded corners\n//               style: {\n//                 fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n//               },\n//               plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//               plotBorderWidth: 1,\n//               events: {\n//                 load: function () {\n//                   this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n//                 },\n//               },\n//               boost: {\n//                 useGPUTranslations: true,\n//                 usePreAllocated: true,\n//               },\n//             },\n//             title: {\n//               text: \"LCH Notional\",\n//               style: {\n//                 color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                 fontSize: \"22px\",\n//                 fontWeight: \"bold\",\n//               },\n//             },\n//             xAxis: {\n//               type: \"datetime\",\n//               title: {\n//                 text: \"Date\",\n//                 style: {\n//                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                   fontSize: \"14px\",\n//                   fontWeight: \"bold\",\n//                 },\n//               },\n//               lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//               tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//               labels: {\n//                 style: {\n//                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                   fontSize: \"12px\",\n//                 },\n//               },\n//             },\n//             yAxis: {\n//               title: {\n//                 text: \"Notional (USD)\",\n//                 style: {\n//                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                   fontSize: \"14px\",\n//                   fontWeight: \"bold\",\n//                 },\n//               },\n//               gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n//               labels: {\n//                 style: {\n//                   color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                   fontSize: \"12px\",\n//                 },\n//               },\n//             },\n//             legend: {\n//               layout: \"horizontal\",\n//               align: \"center\",\n//               verticalAlign: \"bottom\",\n//               itemStyle: {\n//                 color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                 fontSize: \"14px\",\n//                 fontWeight: \"bold\",\n//               },\n//               itemHoverStyle: {\n//                 color: isDarkMode ? \"#cccccc\" : \"#000000\",\n//               },\n//               itemHiddenStyle: {\n//                 color: isDarkMode ? \"#666666\" : \"#999999\",\n//               },\n//             },\n//             tooltip: {\n//               shared: true,\n//               backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n//               borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n//               style: {\n//                 color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//               },\n//               formatter: function () {\n//                 const points = this.points;\n//                 let targetValue = null;\n//                 let totalValue = null;\n  \n//                 points.forEach((point) => {\n//                   if (point.series.name === \"Target\") {\n//                     targetValue = point.y;\n//                   }\n//                   if (point.series.name === \"Total\") {\n//                     totalValue = point.y;\n//                   }\n//                 });\n  \n//                 if (targetValue !== null && totalValue !== null) {\n//                   const difference = (totalValue - targetValue).toFixed(2);\n//                   const totalBreakdown = selectedCurrencies\n//                     .map((currency) => {\n//                       const point = points.find((p) => p.series.name === currency.value);\n//                       return point\n//                         ? `${currency.value}: ${point.y.toFixed(2)}`\n//                         : `${currency.value}: N/A`;\n//                     })\n//                     .join(\"<br>\");\n  \n//                   let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n//                   summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n//                   summaryHTML += `Difference: ${difference}<br><br>`;\n//                   summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n  \n//                   latestSummaryRef.current = summaryHTML;\n  \n//                   return points.reduce((s, point) => {\n//                     return (\n//                       s +\n//                       `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//                     );\n//                   }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n//                 }\n//                 return points.reduce((s, point) => {\n//                   return (\n//                     s +\n//                     `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n//                   );\n//                 }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n//               },\n//             },\n//             series: getData(),\n//             navigation: {\n//               buttonOptions: {\n//                 enabled: true,\n//                 theme: {\n//                   fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//                   stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n//                   style: {\n//                     color: isDarkMode ? \"#ffffff\" : \"#000000\",\n//                   },\n//                 },\n//               },\n//             },\n//             exporting: {\n//               buttons: {\n//                 contextButton: {\n//                   symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n//                   theme: {\n//                     fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n//                   },\n//                 },\n//               },\n//             },\n//           }}\n//           containerProps={{ className: \"chart-container\" }}\n//           updateArgs={[true, true, true]}\n//           ref={chartRef}\n//         />\n//         {compareWithTarget && (\n//           <div className=\"summary-box\">\n//             <h3>Summary</h3>\n//             <div dangerouslySetInnerHTML={{ __html: summary }} />\n//           </div>\n//         )}\n//         <div className=\"data-table-section\">\n//           <DataTable\n//             title=\"LCH Notional | Summary Table\"\n//             columns={[\n//               { name: \"Date\", selector: (row) => row.Date, sortable: true },\n//               { name: \"Target\", selector: (row) => row.Target, sortable: true },\n//               ...selectedCurrencies.map((currency) => ({\n//                 name: currency.label,\n//                 selector: (row) => row[currency.value],\n//                 sortable: true,\n//               })),\n//               { name: \"Total\", selector: (row) => row.Total, sortable: true },\n//             ]}\n//             data={filteredData.map((d) => {\n//               const rowData = {\n//                 Date: d.Date,\n//                 Target: d.Target,\n//                 Total: d.Total,\n//               };\n//               selectedCurrencies.forEach((currency) => {\n//                 rowData[currency.value] = d[currency.value];\n//               });\n//               return rowData;\n//             })}\n//             pagination\n//             highlightOnHover\n//             pointerOnHover\n//             customStyles={{\n//               header: {\n//                 style: {\n//                   fontSize: '22px',\n//                   fontWeight: 'bold',\n//                   color: 'var(--text-color)',\n//                   backgroundColor: 'var(--control-bg-color)',\n//                 },\n//               },\n//               rows: {\n//                 style: {\n//                   fontSize: '16px',\n//                   color: 'var(--text-color)',\n//                   backgroundColor: 'var(--input-bg-color)',\n//                   '&:not(:last-of-type)': {\n//                     borderBottomStyle: 'solid',\n//                     borderBottomWidth: '1px',\n//                     borderBottomColor: 'var(--control-bg-color)',\n//                   },\n//                 },\n//               },\n//               headCells: {\n//                 style: {\n//                   fontSize: '18px',\n//                   fontWeight: 'bold',\n//                   color: 'var(--text-color)',\n//                   backgroundColor: 'var(--control-bg-color)',\n//                 },\n//               },\n//               cells: {\n//                 style: {\n//                   fontSize: '16px',\n//                   color: 'var(--text-color)',\n//                   backgroundColor: 'var(--input-bg-color)',\n//                 },\n//               },\n//             }}\n//           />\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Graph;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport HighchartsBoost from \"highcharts/modules/boost\";\nimport HighchartsExporting from \"highcharts/modules/exporting\";\nimport HighchartsAnnotations from \"highcharts/modules/annotations\";\nimport HighchartsMore from \"highcharts/highcharts-more\";\nimport DataTable from \"react-data-table-component\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Topbar from \"./Topbar\";\nimport Selector from \"./Selector\";\nimport \"../Styles/Graph.css\";\n\nHighchartsBoost(Highcharts);\nHighchartsExporting(Highcharts);\nHighchartsAnnotations(Highcharts);\nHighchartsMore(Highcharts);\n\nconst Graph = () => {\n  const [compareWithTarget, setCompareWithTarget] = useState(false);\n  const [selectedCurrencies, setSelectedCurrencies] = useState([\n    { value: \"AUD\", label: \"AUD\" },\n    { value: \"EUR\", label: \"EUR\" },\n    { value: \"GBP\", label: \"GBP\" },\n    { value: \"JPY\", label: \"JPY\" },\n    { value: \"USD\", label: \"USD\" }\n  ]);\n  const [summary, setSummary] = useState(\"\");\n  const [startDate, setStartDate] = useState(new Date(\"2022-06-01\"));\n  const [endDate, setEndDate] = useState(new Date(\"2024-06-25\"));\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const latestSummaryRef = useRef(\"\");\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/xva\");\n        const result = await response.json();\n        setData(result);\n        setLoading(false);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  const getFilteredData = () => {\n    return data.filter((d) => {\n      const date = new Date(d.Date).getTime();\n      return date >= startDate.getTime() && date <= endDate.getTime();\n    });\n  };\n\n  useEffect(() => {\n    if (!loading && data.length > 0) {\n      const updateSummary = () => {\n        if (summary !== latestSummaryRef.current) {\n          setSummary(latestSummaryRef.current);\n        }\n      };\n      const interval = setInterval(updateSummary, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [loading, data, summary]);\n\n  const filteredData = getFilteredData();\n\n  const totalLine = {\n    name: \"Total\",\n    data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Total]),\n    color: isDarkMode ? \"#007bff\" : \"#343a40\",\n    marker: { enabled: false },\n    zIndex: 1,\n    boostThreshold: 1,\n  };\n\n  const shadeData = {\n    name: \"Shaded Area\",\n    data: filteredData.map((d) => ({\n      x: new Date(d.Date).getTime(),\n      low: Math.min(d.Total, d.Target),\n      high: Math.max(d.Total, d.Target),\n    })),\n    type: \"arearange\",\n    lineWidth: 0,\n    linkedTo: \"Total\",\n    color: \"#2E8C39\",\n    fillOpacity: 0.3,\n    zIndex: 0,\n    marker: { enabled: false },\n    boostThreshold: 0,\n    boost: false,\n  };\n\n  const getData = () => {\n    const compareData = [\n      ...selectedCurrencies.map((currency) => ({\n        name: currency.value,\n        data: filteredData.map((d) => [\n          new Date(d.Date).getTime(),\n          d[currency.value],\n        ]),\n        color: getCurrencyColor(currency.value),\n        marker: { enabled: false },\n        boostThreshold: 1,\n      })),\n      totalLine,\n      {\n        name: \"Target\",\n        data: filteredData.map((d) => [new Date(d.Date).getTime(), d.Target]),\n        color: \"#007bff\",\n        marker: { enabled: false },\n        zIndex: 1,\n        boostThreshold: 1,\n      },\n      shadeData,\n    ];\n    return compareWithTarget ? compareData : compareData.slice(0, -1);\n  };\n\n  const getCurrencyColor = (currency) => {\n    switch (currency) {\n      case \"AUD\":\n        return \"#FFD700\";\n      case \"EUR\":\n        return \"#FF6347\";\n      case \"GBP\":\n        return \"#4682B4\";\n      case \"JPY\":\n        return \"#32CD32\";\n      case \"USD\":\n        return \"#FFA07A\";\n      case \"BRL\":\n        return \"#9400D3\";\n      case \"CAD\":\n        return \"#00FF00\";\n      case \"CHF\":\n        return \"#FF00FF\";\n      case \"CLP\":\n        return \"#00FFFF\";\n      case \"CNY\":\n        return \"#FF4500\";\n      case \"CZK\":\n        return \"#FF1493\";\n      case \"DKK\":\n        return \"#1E90FF\";\n      case \"HKD\":\n        return \"#FF69B4\";\n      case \"HUF\":\n        return \"#8A2BE2\";\n      case \"INR\":\n        return \"#00BFFF\";\n      case \"KRW\":\n        return \"#7B68EE\";\n      case \"NOK\":\n        return \"#FFD700\";\n      case \"NZD\":\n        return \"#FF6347\";\n      case \"PLN\":\n        return \"#4682B4\";\n      case \"SEK\":\n        return \"#32CD32\";\n      case \"SGD\":\n        return \"#FFA07A\";\n      case \"THB\":\n        return \"#9400D3\";\n      case \"TWD\":\n        return \"#00FF00\";\n      case \"ZAR\":\n        return \"#FF00FF\";\n      default:\n        return \"#FF4500\";\n    }\n  };\n\n  return (\n    <div className={`app-container ${isDarkMode ? 'dark-theme' : 'light-theme'}`}>\n      <Topbar />\n      <div className=\"selectors-container\">\n        <div className=\"currency-selector\">\n          <label>Select Currencies:</label>\n          <Selector\n            options={[\n              { value: \"AUD\", label: \"AUD\" },\n              { value: \"EUR\", label: \"EUR\" },\n              { value: \"GBP\", label: \"GBP\" },\n              { value: \"JPY\", label: \"JPY\" },\n              { value: \"USD\", label: \"USD\" },\n              { value: \"BRL\", label: \"BRL\" },\n              { value: \"CAD\", label: \"CAD\" },\n              { value: \"CHF\", label: \"CHF\" },\n              { value: \"CLP\", label: \"CLP\" },\n              { value: \"CNY\", label: \"CNY\" },\n              { value: \"CZK\", label: \"CZK\" },\n              { value: \"DKK\", label: \"DKK\" },\n              { value: \"HKD\", label: \"HKD\" },\n              { value: \"HUF\", label: \"HUF\" },\n              { value: \"INR\", label: \"INR\" },\n              { value: \"KRW\", label: \"KRW\" },\n              { value: \"MXN\", label: \"MXN\" },\n              { value: \"NOK\", label: \"NOK\" },\n              { value: \"NZD\", label: \"NZD\" },\n              { value: \"PLN\", label: \"PLN\" },\n              { value: \"SEK\", label: \"SEK\" },\n              { value: \"SGD\", label: \"SGD\" },\n              { value: \"THB\", label: \"THB\" },\n              { value: \"TWD\", label: \"TWD\" },\n              { value: \"ZAR\", label: \"ZAR\" },\n            ]}\n            selectedCurrencies={selectedCurrencies}\n            setSelectedCurrencies={setSelectedCurrencies}\n          />\n        </div>\n        <div className=\"date-picker\">\n          <label>Select Date Range:</label>\n          <DatePicker\n            selected={startDate}\n            onChange={(date) => setStartDate(date)}\n            selectsStart\n            startDate={startDate}\n            endDate={endDate}\n            className=\"date-input\"\n          />\n          <DatePicker\n            selected={endDate}\n            onChange={(date) => setEndDate(date)}\n            selectsEnd\n            startDate={startDate}\n            endDate={endDate}\n            minDate={startDate}\n            className=\"date-input\"\n          />\n        </div>\n      </div>\n      <div className=\"main-panel\">\n        <HighchartsReact\n          className=\"chart-actual\"\n          highcharts={Highcharts}\n          options={{\n            chart: {\n              type: \"line\",\n              zoomType: \"x\",\n              backgroundColor: {\n                linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },\n                stops: isDarkMode\n                  ? [\n                      [0, \"#2e2e2e\"],\n                      [1, \"#1a1a1a\"],\n                    ]\n                  : [\n                      [0, \"#ffffff\"],\n                      [1, \"#f0f0f0\"],\n                    ],\n              },\n              borderRadius: 10, // Rounded corners\n              style: {\n                fontFamily: \"Helvetica, Arial, sans-serif\", // Font style for the chart\n              },\n              plotBorderColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n              plotBorderWidth: 1,\n              events: {\n                load: function () {\n                  this.xAxis[0].setExtremes(startDate.getTime(), endDate.getTime());\n                },\n              },\n              boost: {\n                useGPUTranslations: true,\n                usePreAllocated: true,\n              },\n            },\n            title: {\n              text: \"LCH Notional\",\n              style: {\n                color: isDarkMode ? \"#ffffff\" : \"#000000\",\n                fontSize: \"22px\",\n                fontWeight: \"bold\",\n              },\n            },\n            xAxis: {\n              type: \"datetime\",\n              title: {\n                text: \"Date\",\n                style: {\n                  color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                  fontSize: \"14px\",\n                  fontWeight: \"bold\",\n                },\n              },\n              lineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n              tickColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n              labels: {\n                style: {\n                  color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                  fontSize: \"12px\",\n                },\n              },\n            },\n            yAxis: {\n              title: {\n                text: \"Notional (USD)\",\n                style: {\n                  color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                  fontSize: \"14px\",\n                  fontWeight: \"bold\",\n                },\n              },\n              gridLineColor: isDarkMode ? \"#444444\" : \"#cccccc\",\n              labels: {\n                style: {\n                  color: isDarkMode ? \"#cccccc\" : \"#000000\",\n                  fontSize: \"12px\",\n                },\n              },\n            },\n            legend: {\n              layout: \"horizontal\",\n              align: \"center\",\n              verticalAlign: \"bottom\",\n              itemStyle: {\n                color: isDarkMode ? \"#ffffff\" : \"#000000\",\n                fontSize: \"14px\",\n                fontWeight: \"bold\",\n              },\n              itemHoverStyle: {\n                color: isDarkMode ? \"#cccccc\" : \"#000000\",\n              },\n              itemHiddenStyle: {\n                color: isDarkMode ? \"#666666\" : \"#999999\",\n              },\n            },\n            tooltip: {\n              shared: true,\n              backgroundColor: isDarkMode ? \"rgba(33, 33, 33, 0.85)\" : \"rgba(255, 255, 255, 0.85)\",\n              borderColor: isDarkMode ? \"#666666\" : \"#cccccc\",\n              style: {\n                color: isDarkMode ? \"#ffffff\" : \"#000000\",\n              },\n              formatter: function () {\n                const points = this.points;\n                let targetValue = null;\n                let totalValue = null;\n  \n                points.forEach((point) => {\n                  if (point.series.name === \"Target\") {\n                    targetValue = point.y;\n                  }\n                  if (point.series.name === \"Total\") {\n                    totalValue = point.y;\n                  }\n                });\n  \n                if (targetValue !== null && totalValue !== null) {\n                  const difference = (totalValue - targetValue).toFixed(2);\n                  const totalBreakdown = selectedCurrencies\n                    .map((currency) => {\n                      const point = points.find((p) => p.series.name === currency.value);\n                      return point\n                        ? `${currency.value}: ${point.y.toFixed(2)}`\n                        : `${currency.value}: N/A`;\n                    })\n                    .join(\"<br>\");\n  \n                  let summaryHTML = `<strong>Total: ${totalValue.toFixed(2)}</strong><br>`;\n                  summaryHTML += `<strong>Target: ${targetValue.toFixed(2)}</strong><br>`;\n                  summaryHTML += `Difference: ${difference}<br><br>`;\n                  summaryHTML += `<strong>Breakdown of Selected Currencies:</strong><br>${totalBreakdown}`;\n  \n                  latestSummaryRef.current = summaryHTML;\n  \n                  return points.reduce((s, point) => {\n                    return (\n                      s +\n                      `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n                    );\n                  }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n                }\n                return points.reduce((s, point) => {\n                  return (\n                    s +\n                    `<br><span style=\"color:${point.series.color}\">${point.series.name}</span>: ${point.y}`\n                  );\n                }, `<b>${Highcharts.dateFormat(\"%A, %b %e, %Y\", this.x)}</b>`);\n              },\n            },\n            series: getData(),\n            navigation: {\n              buttonOptions: {\n                enabled: true,\n                theme: {\n                  fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n                  stroke: isDarkMode ? \"#666666\" : \"#cccccc\",\n                  style: {\n                    color: isDarkMode ? \"#ffffff\" : \"#000000\",\n                  },\n                },\n              },\n            },\n            exporting: {\n              buttons: {\n                contextButton: {\n                  symbolStroke: isDarkMode ? \"#cccccc\" : \"#000000\",\n                  theme: {\n                    fill: isDarkMode ? \"#444444\" : \"#f0f0f0\",\n                  },\n                },\n              },\n            },\n          }}\n          containerProps={{ className: \"chart-container\" }}\n          updateArgs={[true, true, true]}\n          ref={chartRef}\n        />\n        {compareWithTarget && (\n          <div className=\"summary-box\">\n            <h3>Summary</h3>\n            <div dangerouslySetInnerHTML={{ __html: summary }} />\n          </div>\n        )}\n        <div className=\"data-table-section\">\n          <DataTable\n            title=\"LCH Notional | Summary Table\"\n            columns={[\n              { name: \"Date\", selector: (row) => row.Date, sortable: true },\n              { name: \"Target\", selector: (row) => row.Target, sortable: true },\n              ...selectedCurrencies.map((currency) => ({\n                name: currency.label,\n                selector: (row) => row[currency.value],\n                sortable: true,\n              })),\n              { name: \"Total\", selector: (row) => row.Total, sortable: true },\n            ]}\n            data={filteredData.map((d) => {\n              const rowData = {\n                Date: d.Date,\n                Target: d.Target,\n                Total: d.Total,\n              };\n              selectedCurrencies.forEach((currency) => {\n                rowData[currency.value] = d[currency.value];\n              });\n              return rowData;\n            })}\n            pagination\n            highlightOnHover\n            pointerOnHover\n            customStyles={{\n              header: {\n                style: {\n                  fontSize: '22px',\n                  fontWeight: 'bold',\n                  color: 'var(--text-color)',\n                  backgroundColor: 'var(--control-bg-color)',\n                },\n              },\n              rows: {\n                style: {\n                  fontSize: '16px',\n                  color: 'var(--text-color)',\n                  backgroundColor: 'var(--input-bg-color)',\n                  '&:not(:last-of-type)': {\n                    borderBottomStyle: 'solid',\n                    borderBottomWidth: '1px',\n                    borderBottomColor: 'var(--control-bg-color)',\n                  },\n                },\n              },\n              headCells: {\n                style: {\n                  fontSize: '18px',\n                  fontWeight: 'bold',\n                  color: 'var(--text-color)',\n                  backgroundColor: 'var(--control-bg-color)',\n                },\n              },\n              cells: {\n                style: {\n                  fontSize: '16px',\n                  color: 'var(--text-color)',\n                  backgroundColor: 'var(--input-bg-color)',\n                },\n              },\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Graph;\n\n\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}